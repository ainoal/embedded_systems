
ex_5_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d77  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c41  00000000  00000000  0000108f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003dd  00000000  00000000  00001cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000020b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005b3  00000000  00000000  000020f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000186  00000000  00000000  000026a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000282d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	2e d0       	rcall	.+92     	; 0x152 <main>
  f6:	98 c0       	rjmp	.+304    	; 0x228 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <floor_choice>:
#include <avr/io.h>
#include <util/delay.h>

int floor_choice(int *current_floor) {
    //
    if (PINC & (1 << PC0)) {
  fa:	30 9b       	sbis	0x06, 0	; 6
  fc:	06 c0       	rjmp	.+12     	; 0x10a <floor_choice+0x10>
        *current_floor = 1;
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	fc 01       	movw	r30, r24
 104:	31 83       	std	Z+1, r19	; 0x01
 106:	20 83       	st	Z, r18
 108:	23 c0       	rjmp	.+70     	; 0x150 <floor_choice+0x56>
        } else if (PINC & (1 << PC1)) {
 10a:	31 9b       	sbis	0x06, 1	; 6
 10c:	06 c0       	rjmp	.+12     	; 0x11a <floor_choice+0x20>
        *current_floor = 2;
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	fc 01       	movw	r30, r24
 114:	31 83       	std	Z+1, r19	; 0x01
 116:	20 83       	st	Z, r18
 118:	1b c0       	rjmp	.+54     	; 0x150 <floor_choice+0x56>
        } else if (PINC & (1 << PC2)) {
 11a:	32 9b       	sbis	0x06, 2	; 6
 11c:	06 c0       	rjmp	.+12     	; 0x12a <floor_choice+0x30>
        *current_floor = 3;
 11e:	23 e0       	ldi	r18, 0x03	; 3
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	fc 01       	movw	r30, r24
 124:	31 83       	std	Z+1, r19	; 0x01
 126:	20 83       	st	Z, r18
 128:	13 c0       	rjmp	.+38     	; 0x150 <floor_choice+0x56>
        } else if (PINC & (1 << PC3)) {
 12a:	33 9b       	sbis	0x06, 3	; 6
 12c:	06 c0       	rjmp	.+12     	; 0x13a <floor_choice+0x40>
        *current_floor = 4;
 12e:	24 e0       	ldi	r18, 0x04	; 4
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	fc 01       	movw	r30, r24
 134:	31 83       	std	Z+1, r19	; 0x01
 136:	20 83       	st	Z, r18
 138:	0b c0       	rjmp	.+22     	; 0x150 <floor_choice+0x56>
        } else if ( (PINC & (1 << PC4)) ) {
 13a:	34 9b       	sbis	0x06, 4	; 6
 13c:	06 c0       	rjmp	.+12     	; 0x14a <floor_choice+0x50>
        *current_floor = 5;
 13e:	25 e0       	ldi	r18, 0x05	; 5
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	fc 01       	movw	r30, r24
 144:	31 83       	std	Z+1, r19	; 0x01
 146:	20 83       	st	Z, r18
 148:	03 c0       	rjmp	.+6      	; 0x150 <floor_choice+0x56>
        } else {
        return 0;
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	08 95       	ret
    }
}
 150:	08 95       	ret

00000152 <main>:

int main(void)
{
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	1f 92       	push	r1
 158:	1f 92       	push	r1
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
    // 1 = output, 0 = input -> LED pins output, button pins input
    DDRA |= (1 << PA0) | (1 << PA1) | (1 << PA2) | (1 << PA3) | (1 << PA4) | (1 << PA5); // Floor LEDs
 15e:	81 b1       	in	r24, 0x01	; 1
 160:	8f 63       	ori	r24, 0x3F	; 63
 162:	81 b9       	out	0x01, r24	; 1
    DDRH |= (1 << PH3) | (1 << PH4); // Door LED | movement LED
 164:	e1 e0       	ldi	r30, 0x01	; 1
 166:	f1 e0       	ldi	r31, 0x01	; 1
 168:	80 81       	ld	r24, Z
 16a:	88 61       	ori	r24, 0x18	; 24
 16c:	80 83       	st	Z, r24
    DDRC &= ~(1 << PC0) & ~(1 << PC1) & ~(1 << PC2) & ~(1 << PC3) & ~(1 << PC4); // Floor buttons
 16e:	87 b1       	in	r24, 0x07	; 7
 170:	80 7e       	andi	r24, 0xE0	; 224
 172:	87 b9       	out	0x07, r24	; 7
    int state = 1;
    int current_floor = 1;
    int next_floor = 1;
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	9a 83       	std	Y+2, r25	; 0x02
 17a:	89 83       	std	Y+1, r24	; 0x01
    
    PORTH &= ~(1 << PH3);
 17c:	e2 e0       	ldi	r30, 0x02	; 2
 17e:	f1 e0       	ldi	r31, 0x01	; 1
 180:	80 81       	ld	r24, Z
 182:	87 7f       	andi	r24, 0xF7	; 247
 184:	80 83       	st	Z, r24
    // 1 = output, 0 = input -> LED pins output, button pins input
    DDRA |= (1 << PA0) | (1 << PA1) | (1 << PA2) | (1 << PA3) | (1 << PA4) | (1 << PA5); // Floor LEDs
    DDRH |= (1 << PH3) | (1 << PH4); // Door LED | movement LED
    DDRC &= ~(1 << PC0) & ~(1 << PC1) & ~(1 << PC2) & ~(1 << PC3) & ~(1 << PC4); // Floor buttons
    int state = 1;
    int current_floor = 1;
 186:	01 e0       	ldi	r16, 0x01	; 1
 188:	10 e0       	ldi	r17, 0x00	; 0
{
    // 1 = output, 0 = input -> LED pins output, button pins input
    DDRA |= (1 << PA0) | (1 << PA1) | (1 << PA2) | (1 << PA3) | (1 << PA4) | (1 << PA5); // Floor LEDs
    DDRH |= (1 << PH3) | (1 << PH4); // Door LED | movement LED
    DDRC &= ~(1 << PC0) & ~(1 << PC1) & ~(1 << PC2) & ~(1 << PC3) & ~(1 << PC4); // Floor buttons
    int state = 1;
 18a:	ee 24       	eor	r14, r14
 18c:	e3 94       	inc	r14
 18e:	f1 2c       	mov	r15, r1
 190:	10 c0       	rjmp	.+32     	; 0x1b2 <main+0x60>
                
                if (current_floor == next_floor) {
                    floor_choice(&next_floor);
                    _delay_ms(10);
                } else if ((next_floor < 1) || (next_floor > 5)) {
                    state = 5;
 192:	0f 2e       	mov	r0, r31
 194:	f5 e0       	ldi	r31, 0x05	; 5
 196:	ef 2e       	mov	r14, r31
 198:	f1 2c       	mov	r15, r1
 19a:	f0 2d       	mov	r31, r0
 19c:	0a c0       	rjmp	.+20     	; 0x1b2 <main+0x60>
                } else if (next_floor > current_floor) {
                    state = 2;
 19e:	68 94       	set
 1a0:	ee 24       	eor	r14, r14
 1a2:	e1 f8       	bld	r14, 1
 1a4:	f1 2c       	mov	r15, r1
 1a6:	05 c0       	rjmp	.+10     	; 0x1b2 <main+0x60>
                } else if (next_floor < current_floor) {
                    state = 3;
 1a8:	0f 2e       	mov	r0, r31
 1aa:	f3 e0       	ldi	r31, 0x03	; 3
 1ac:	ef 2e       	mov	r14, r31
 1ae:	f1 2c       	mov	r15, r1
 1b0:	f0 2d       	mov	r31, r0
    
    PORTH &= ~(1 << PH3);
    
    while (1) 
    {
        switch(state) {
 1b2:	21 e0       	ldi	r18, 0x01	; 1
 1b4:	e2 16       	cp	r14, r18
 1b6:	f1 04       	cpc	r15, r1
 1b8:	29 f0       	breq	.+10     	; 0x1c4 <main+0x72>
 1ba:	82 e0       	ldi	r24, 0x02	; 2
 1bc:	e8 16       	cp	r14, r24
 1be:	f1 04       	cpc	r15, r1
 1c0:	69 f1       	breq	.+90     	; 0x21c <main+0xca>
 1c2:	f7 cf       	rjmp	.-18     	; 0x1b2 <main+0x60>
            case 1:         // Idle state
                
                if (current_floor == next_floor) {
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	9a 81       	ldd	r25, Y+2	; 0x02
 1c8:	08 17       	cp	r16, r24
 1ca:	19 07       	cpc	r17, r25
 1cc:	51 f4       	brne	.+20     	; 0x1e2 <main+0x90>
                    floor_choice(&next_floor);
 1ce:	ce 01       	movw	r24, r28
 1d0:	01 96       	adiw	r24, 0x01	; 1
 1d2:	93 df       	rcall	.-218    	; 0xfa <floor_choice>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d4:	8f e3       	ldi	r24, 0x3F	; 63
 1d6:	9c e9       	ldi	r25, 0x9C	; 156
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <main+0x86>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <main+0x8c>
 1de:	00 00       	nop
 1e0:	e8 cf       	rjmp	.-48     	; 0x1b2 <main+0x60>
                    _delay_ms(10);
                } else if ((next_floor < 1) || (next_floor > 5)) {
 1e2:	9c 01       	movw	r18, r24
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	31 09       	sbc	r19, r1
 1e8:	25 30       	cpi	r18, 0x05	; 5
 1ea:	31 05       	cpc	r19, r1
 1ec:	90 f6       	brcc	.-92     	; 0x192 <main+0x40>
                    state = 5;
                } else if (next_floor > current_floor) {
 1ee:	08 17       	cp	r16, r24
 1f0:	19 07       	cpc	r17, r25
 1f2:	ac f2       	brlt	.-86     	; 0x19e <main+0x4c>
                    state = 2;
                } else if (next_floor < current_floor) {
 1f4:	80 17       	cp	r24, r16
 1f6:	91 07       	cpc	r25, r17
 1f8:	bc f2       	brlt	.-82     	; 0x1a8 <main+0x56>
 1fa:	db cf       	rjmp	.-74     	; 0x1b2 <main+0x60>
                    state = 3;
                }
                break;
            case 2:         // Going up
                while (next_floor > current_floor) {
                    current_floor ++;
 1fc:	0f 5f       	subi	r16, 0xFF	; 255
 1fe:	1f 4f       	sbci	r17, 0xFF	; 255
                    PORTH |= (1 << PH4);    // Turn movement LED on
 200:	e2 e0       	ldi	r30, 0x02	; 2
 202:	f1 e0       	ldi	r31, 0x01	; 1
 204:	80 81       	ld	r24, Z
 206:	80 61       	ori	r24, 0x10	; 16
 208:	80 83       	st	Z, r24
 20a:	9f ef       	ldi	r25, 0xFF	; 255
 20c:	27 ea       	ldi	r18, 0xA7	; 167
 20e:	81 e6       	ldi	r24, 0x61	; 97
 210:	91 50       	subi	r25, 0x01	; 1
 212:	20 40       	sbci	r18, 0x00	; 0
 214:	80 40       	sbci	r24, 0x00	; 0
 216:	e1 f7       	brne	.-8      	; 0x210 <main+0xbe>
 218:	00 c0       	rjmp	.+0      	; 0x21a <main+0xc8>
 21a:	00 00       	nop
                } else if (next_floor < current_floor) {
                    state = 3;
                }
                break;
            case 2:         // Going up
                while (next_floor > current_floor) {
 21c:	89 81       	ldd	r24, Y+1	; 0x01
 21e:	9a 81       	ldd	r25, Y+2	; 0x02
 220:	08 17       	cp	r16, r24
 222:	19 07       	cpc	r17, r25
 224:	5c f3       	brlt	.-42     	; 0x1fc <main+0xaa>
 226:	c5 cf       	rjmp	.-118    	; 0x1b2 <main+0x60>

00000228 <_exit>:
 228:	f8 94       	cli

0000022a <__stop_program>:
 22a:	ff cf       	rjmp	.-2      	; 0x22a <__stop_program>
