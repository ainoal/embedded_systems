
elevator_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  0000037e  00000412  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000037e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800202  00800202  00000414  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000444  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f5b  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c82  00000000  00000000  00001417  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ff  00000000  00000000  00002099  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00002598  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000633  00000000  00000000  000025ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000265  00000000  00000000  00002c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00002e84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e7       	ldi	r30, 0x7E	; 126
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 30       	cpi	r26, 0x04	; 4
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	49 d0       	rcall	.+146    	; 0x1b2 <main>
 120:	2c c1       	rjmp	.+600    	; 0x37a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <floor_button_choice>:
// returns: none
int 
floor_button_choice(int8_t *current_floor_button)
{
    //
    if ( (PINC & (1 << PC0)) )
 124:	30 9b       	sbis	0x06, 0	; 6
 126:	04 c0       	rjmp	.+8      	; 0x130 <floor_button_choice+0xc>
    {
        *current_floor_button = 1;
 128:	21 e0       	ldi	r18, 0x01	; 1
 12a:	fc 01       	movw	r30, r24
 12c:	20 83       	st	Z, r18
 12e:	1b c0       	rjmp	.+54     	; 0x166 <floor_button_choice+0x42>
    }
    else if ( (PINC & (1 << PC1)) )
 130:	31 9b       	sbis	0x06, 1	; 6
 132:	04 c0       	rjmp	.+8      	; 0x13c <floor_button_choice+0x18>
    {
        *current_floor_button = 2;
 134:	22 e0       	ldi	r18, 0x02	; 2
 136:	fc 01       	movw	r30, r24
 138:	20 83       	st	Z, r18
 13a:	15 c0       	rjmp	.+42     	; 0x166 <floor_button_choice+0x42>
    }
    else if ( (PINC & (1 << PC2)) ) 
 13c:	32 9b       	sbis	0x06, 2	; 6
 13e:	04 c0       	rjmp	.+8      	; 0x148 <floor_button_choice+0x24>
    {
        *current_floor_button = 3;
 140:	23 e0       	ldi	r18, 0x03	; 3
 142:	fc 01       	movw	r30, r24
 144:	20 83       	st	Z, r18
 146:	0f c0       	rjmp	.+30     	; 0x166 <floor_button_choice+0x42>
    }
    else if ( (PINC & (1 << PC3)) )
 148:	33 9b       	sbis	0x06, 3	; 6
 14a:	04 c0       	rjmp	.+8      	; 0x154 <floor_button_choice+0x30>
    {
        *current_floor_button = 4;
 14c:	24 e0       	ldi	r18, 0x04	; 4
 14e:	fc 01       	movw	r30, r24
 150:	20 83       	st	Z, r18
 152:	09 c0       	rjmp	.+18     	; 0x166 <floor_button_choice+0x42>
    }
    else if ( (PINC & (1 << PC4)) ) 
 154:	34 9b       	sbis	0x06, 4	; 6
 156:	04 c0       	rjmp	.+8      	; 0x160 <floor_button_choice+0x3c>
    {
        *current_floor_button = 5;
 158:	25 e0       	ldi	r18, 0x05	; 5
 15a:	fc 01       	movw	r30, r24
 15c:	20 83       	st	Z, r18
 15e:	03 c0       	rjmp	.+6      	; 0x166 <floor_button_choice+0x42>
    }
    else 
    {
        return 0;
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	08 95       	ret
    }
    
}
 166:	08 95       	ret

00000168 <floor_led_on>:
// returns: void
int
floor_led_on(int8_t *current_floor_led)
{
    //
    PORTA |= (1 << (*current_floor_led -1) );
 168:	42 b1       	in	r20, 0x02	; 2
 16a:	fc 01       	movw	r30, r24
 16c:	20 81       	ld	r18, Z
 16e:	02 2e       	mov	r0, r18
 170:	00 0c       	add	r0, r0
 172:	33 0b       	sbc	r19, r19
 174:	21 50       	subi	r18, 0x01	; 1
 176:	31 09       	sbc	r19, r1
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <floor_led_on+0x1a>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	2a 95       	dec	r18
 184:	e2 f7       	brpl	.-8      	; 0x17e <floor_led_on+0x16>
 186:	84 2b       	or	r24, r20
 188:	82 b9       	out	0x02, r24	; 2
    
}
 18a:	08 95       	ret

0000018c <floor_led_off>:
// returns: void
int
floor_led_off(int8_t *current_floor_led)
{
    //
    PORTA &= ~(1 << (*current_floor_led -1) );
 18c:	42 b1       	in	r20, 0x02	; 2
 18e:	fc 01       	movw	r30, r24
 190:	20 81       	ld	r18, Z
 192:	02 2e       	mov	r0, r18
 194:	00 0c       	add	r0, r0
 196:	33 0b       	sbc	r19, r19
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	31 09       	sbc	r19, r1
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <floor_led_off+0x1a>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	2a 95       	dec	r18
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <floor_led_off+0x16>
 1aa:	80 95       	com	r24
 1ac:	84 23       	and	r24, r20
 1ae:	82 b9       	out	0x02, r24	; 2
    
}
 1b0:	08 95       	ret

000001b2 <main>:
int 
main(void)
{
    
    /* Set inputs and outputs for the ports A, C and H */
    DDRA |= (1 << PA0) | (1 << PA1) | (1 << PA2) | (1 << PA3) | (1 << PA4) | (1 << PA5); // Floor LEDs
 1b2:	81 b1       	in	r24, 0x01	; 1
 1b4:	8f 63       	ori	r24, 0x3F	; 63
 1b6:	81 b9       	out	0x01, r24	; 1
    DDRH |= (1 << PH3) | (1 << PH4); // Door LED and movement LED, respectively
 1b8:	e1 e0       	ldi	r30, 0x01	; 1
 1ba:	f1 e0       	ldi	r31, 0x01	; 1
 1bc:	80 81       	ld	r24, Z
 1be:	88 61       	ori	r24, 0x18	; 24
 1c0:	80 83       	st	Z, r24
    
    DDRC &= ~(1 << PC0) & ~(1 << PC1) & ~(1 << PC2) & ~(1 << PC3) & ~(1 << PC4); // Floor buttons
 1c2:	87 b1       	in	r24, 0x07	; 7
 1c4:	80 7e       	andi	r24, 0xE0	; 224
 1c6:	87 b9       	out	0x07, r24	; 7
    
    /* elevator variables, elevator has 5 floors */
    static int8_t requested_floor = 1;
    static int8_t floor_current = 1;
    static bool  b_doors_opened = false;
    floor_led_on(&floor_current);
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	92 e0       	ldi	r25, 0x02	; 2
 1cc:	cd df       	rcall	.-102    	; 0x168 <floor_led_on>

    while (1) 
    {
           
        /* State machine - switch case */
        switch(g_STATE) {
 1ce:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <g_STATE>
 1d2:	82 30       	cpi	r24, 0x02	; 2
 1d4:	09 f4       	brne	.+2      	; 0x1d8 <main+0x26>
 1d6:	57 c0       	rjmp	.+174    	; 0x286 <main+0xd4>
 1d8:	2c f4       	brge	.+10     	; 0x1e4 <main+0x32>
 1da:	88 23       	and	r24, r24
 1dc:	51 f0       	breq	.+20     	; 0x1f2 <main+0x40>
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	71 f1       	breq	.+92     	; 0x23e <main+0x8c>
 1e2:	c7 c0       	rjmp	.+398    	; 0x372 <main+0x1c0>
 1e4:	83 30       	cpi	r24, 0x03	; 3
 1e6:	09 f4       	brne	.+2      	; 0x1ea <main+0x38>
 1e8:	78 c0       	rjmp	.+240    	; 0x2da <main+0x128>
 1ea:	84 30       	cpi	r24, 0x04	; 4
 1ec:	09 f4       	brne	.+2      	; 0x1f0 <main+0x3e>
 1ee:	9b c0       	rjmp	.+310    	; 0x326 <main+0x174>
 1f0:	c0 c0       	rjmp	.+384    	; 0x372 <main+0x1c0>
            case Idle:
                
                if (requested_floor == floor_current)
 1f2:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1f6:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <floor_current.1901>
 1fa:	98 13       	cpse	r25, r24
 1fc:	14 c0       	rjmp	.+40     	; 0x226 <main+0x74>
                {
                    g_STATE = Idle;
 1fe:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <g_STATE>
                    //int8_t request_floor = 1;
                    floor_button_choice(&requested_floor);
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	92 e0       	ldi	r25, 0x02	; 2
 206:	8e df       	rcall	.-228    	; 0x124 <floor_button_choice>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 208:	8f e3       	ldi	r24, 0x3F	; 63
 20a:	9c e9       	ldi	r25, 0x9C	; 156
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <main+0x5a>
 210:	00 c0       	rjmp	.+0      	; 0x212 <main+0x60>
 212:	00 00       	nop
                    _delay_ms(10);
                    if ((requested_floor > 5) || (requested_floor < 1))
 214:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 218:	81 50       	subi	r24, 0x01	; 1
 21a:	85 30       	cpi	r24, 0x05	; 5
 21c:	c0 f2       	brcs	.-80     	; 0x1ce <main+0x1c>
                    {
                        g_STATE = FAULT;
 21e:	84 e0       	ldi	r24, 0x04	; 4
 220:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <g_STATE>
 224:	d4 cf       	rjmp	.-88     	; 0x1ce <main+0x1c>
                        
                    }
                    
                }
                else if (requested_floor < floor_current)
 226:	98 17       	cp	r25, r24
 228:	24 f4       	brge	.+8      	; 0x232 <main+0x80>
                {
                    g_STATE = GOINGDOWN;
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <g_STATE>
 230:	ce cf       	rjmp	.-100    	; 0x1ce <main+0x1c>
                }
                else if (requested_floor > floor_current)
 232:	89 17       	cp	r24, r25
 234:	64 f6       	brge	.-104    	; 0x1ce <main+0x1c>
                {
                    g_STATE = GOINGUP;
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <g_STATE>
 23c:	c8 cf       	rjmp	.-112    	; 0x1ce <main+0x1c>
                }
            break;
            
            case GOINGUP:
                if (requested_floor > floor_current)
 23e:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 242:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <floor_current.1901>
 246:	89 17       	cp	r24, r25
 248:	c4 f4       	brge	.+48     	; 0x27a <main+0xc8>
                {
                    //GOING UP TO THE NEXT FLOOR
                    g_STATE = GOINGUP;
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <g_STATE>
                    floor_current++;
 250:	8f 5f       	subi	r24, 0xFF	; 255
 252:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <floor_current.1901>
                    PORTH |= (1 << PH3); // turn movement LED ON
 256:	e2 e0       	ldi	r30, 0x02	; 2
 258:	f1 e0       	ldi	r31, 0x01	; 1
 25a:	80 81       	ld	r24, Z
 25c:	88 60       	ori	r24, 0x08	; 8
 25e:	80 83       	st	Z, r24
 260:	9f ef       	ldi	r25, 0xFF	; 255
 262:	2b e7       	ldi	r18, 0x7B	; 123
 264:	32 e9       	ldi	r19, 0x92	; 146
 266:	91 50       	subi	r25, 0x01	; 1
 268:	20 40       	sbci	r18, 0x00	; 0
 26a:	30 40       	sbci	r19, 0x00	; 0
 26c:	e1 f7       	brne	.-8      	; 0x266 <main+0xb4>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <main+0xbe>
 270:	00 00       	nop
                    _delay_ms(3000);
                    floor_led_on(&floor_current);
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	92 e0       	ldi	r25, 0x02	; 2
 276:	78 df       	rcall	.-272    	; 0x168 <floor_led_on>
 278:	aa cf       	rjmp	.-172    	; 0x1ce <main+0x1c>
                    

                }
                else if (requested_floor == floor_current)
 27a:	98 13       	cpse	r25, r24
 27c:	a8 cf       	rjmp	.-176    	; 0x1ce <main+0x1c>
                {
                    //FLOOR REACHED
                    g_STATE = DOOROPEN;
 27e:	83 e0       	ldi	r24, 0x03	; 3
 280:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <g_STATE>
 284:	a4 cf       	rjmp	.-184    	; 0x1ce <main+0x1c>
                }
            break;
            
            case GOINGDOWN:
                if (requested_floor < floor_current)
 286:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 28a:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <floor_current.1901>
 28e:	98 17       	cp	r25, r24
 290:	f4 f4       	brge	.+60     	; 0x2ce <main+0x11c>
                {
                    // GOING DOWN TO THE NEXT FLOOR
                    g_STATE = GOINGDOWN;
 292:	82 e0       	ldi	r24, 0x02	; 2
 294:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <g_STATE>
                    PORTH |= (1 << PH3); // turn movement LED ON
 298:	e2 e0       	ldi	r30, 0x02	; 2
 29a:	f1 e0       	ldi	r31, 0x01	; 1
 29c:	80 81       	ld	r24, Z
 29e:	88 60       	ori	r24, 0x08	; 8
 2a0:	80 83       	st	Z, r24
 2a2:	8f ef       	ldi	r24, 0xFF	; 255
 2a4:	9b e7       	ldi	r25, 0x7B	; 123
 2a6:	22 e9       	ldi	r18, 0x92	; 146
 2a8:	81 50       	subi	r24, 0x01	; 1
 2aa:	90 40       	sbci	r25, 0x00	; 0
 2ac:	20 40       	sbci	r18, 0x00	; 0
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <main+0xf6>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <main+0x100>
 2b2:	00 00       	nop
                    _delay_ms(3000);
                    if (1 == floor_current)
 2b4:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <floor_current.1901>
 2b8:	81 30       	cpi	r24, 0x01	; 1
                    {
                        ;
                    }
                    else
                    {
                        floor_led_off(&floor_current);
 2ba:	19 f0       	breq	.+6      	; 0x2c2 <main+0x110>
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	92 e0       	ldi	r25, 0x02	; 2
 2c0:	65 df       	rcall	.-310    	; 0x18c <floor_led_off>
                    }
                    
                    floor_current--;
 2c2:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <floor_current.1901>
 2c6:	81 50       	subi	r24, 0x01	; 1
 2c8:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <floor_current.1901>
 2cc:	80 cf       	rjmp	.-256    	; 0x1ce <main+0x1c>
                    
                }
                else if (requested_floor == floor_current)
 2ce:	98 13       	cpse	r25, r24
 2d0:	7e cf       	rjmp	.-260    	; 0x1ce <main+0x1c>
                {
                    // FLOOR REACHED
                    g_STATE = DOOROPEN;
 2d2:	83 e0       	ldi	r24, 0x03	; 3
 2d4:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <g_STATE>
 2d8:	7a cf       	rjmp	.-268    	; 0x1ce <main+0x1c>
                }
            break;
            
            case DOOROPEN:
                if (!b_doors_opened)
 2da:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 2de:	81 11       	cpse	r24, r1
 2e0:	18 c0       	rjmp	.+48     	; 0x312 <main+0x160>
                {
                    // DOORS OPEN
                    PORTH |= (1 << PH4); // turn door open LED ON
 2e2:	e2 e0       	ldi	r30, 0x02	; 2
 2e4:	f1 e0       	ldi	r31, 0x01	; 1
 2e6:	80 81       	ld	r24, Z
 2e8:	80 61       	ori	r24, 0x10	; 16
 2ea:	80 83       	st	Z, r24
                    PORTH &= ~(1 << PH3); // turn movement LED OFF
 2ec:	80 81       	ld	r24, Z
 2ee:	87 7f       	andi	r24, 0xF7	; 247
 2f0:	80 83       	st	Z, r24
 2f2:	3f ef       	ldi	r19, 0xFF	; 255
 2f4:	83 e2       	ldi	r24, 0x23	; 35
 2f6:	94 ef       	ldi	r25, 0xF4	; 244
 2f8:	31 50       	subi	r19, 0x01	; 1
 2fa:	80 40       	sbci	r24, 0x00	; 0
 2fc:	90 40       	sbci	r25, 0x00	; 0
 2fe:	e1 f7       	brne	.-8      	; 0x2f8 <main+0x146>
 300:	00 c0       	rjmp	.+0      	; 0x302 <main+0x150>
 302:	00 00       	nop
                    _delay_ms(5000);
                    b_doors_opened = true;
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
                    g_STATE = DOOROPEN;
 30a:	83 e0       	ldi	r24, 0x03	; 3
 30c:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <g_STATE>
 310:	5e cf       	rjmp	.-324    	; 0x1ce <main+0x1c>
                }
                else
                {
                    // DOORS CLOSED
                    PORTH &= ~(1 << PH4);
 312:	e2 e0       	ldi	r30, 0x02	; 2
 314:	f1 e0       	ldi	r31, 0x01	; 1
 316:	80 81       	ld	r24, Z
 318:	8f 7e       	andi	r24, 0xEF	; 239
 31a:	80 83       	st	Z, r24
                    g_STATE = Idle;
 31c:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <g_STATE>
                    b_doors_opened = false;
 320:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__data_end>
 324:	54 cf       	rjmp	.-344    	; 0x1ce <main+0x1c>
                }
            break;
            
            case FAULT:
                // WRONG FLOOR INPUT
                requested_floor = floor_current;
 326:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <floor_current.1901>
 32a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
                
                // Blink movement LED to indicate fault. 
                for (int8_t blink_amount = 0; blink_amount < 20; blink_amount++)
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	1b c0       	rjmp	.+54     	; 0x368 <main+0x1b6>
                {
                    PORTH |= (1 << PH3);
 332:	e2 e0       	ldi	r30, 0x02	; 2
 334:	f1 e0       	ldi	r31, 0x01	; 1
 336:	80 81       	ld	r24, Z
 338:	88 60       	ori	r24, 0x08	; 8
 33a:	80 83       	st	Z, r24
 33c:	2f ef       	ldi	r18, 0xFF	; 255
 33e:	30 e7       	ldi	r19, 0x70	; 112
 340:	82 e0       	ldi	r24, 0x02	; 2
 342:	21 50       	subi	r18, 0x01	; 1
 344:	30 40       	sbci	r19, 0x00	; 0
 346:	80 40       	sbci	r24, 0x00	; 0
 348:	e1 f7       	brne	.-8      	; 0x342 <main+0x190>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <main+0x19a>
 34c:	00 00       	nop
                    _delay_ms(50);
                    PORTH &= ~(1 << PH3);
 34e:	80 81       	ld	r24, Z
 350:	87 7f       	andi	r24, 0xF7	; 247
 352:	80 83       	st	Z, r24
 354:	2f ef       	ldi	r18, 0xFF	; 255
 356:	30 e7       	ldi	r19, 0x70	; 112
 358:	82 e0       	ldi	r24, 0x02	; 2
 35a:	21 50       	subi	r18, 0x01	; 1
 35c:	30 40       	sbci	r19, 0x00	; 0
 35e:	80 40       	sbci	r24, 0x00	; 0
 360:	e1 f7       	brne	.-8      	; 0x35a <main+0x1a8>
 362:	00 c0       	rjmp	.+0      	; 0x364 <main+0x1b2>
 364:	00 00       	nop
            case FAULT:
                // WRONG FLOOR INPUT
                requested_floor = floor_current;
                
                // Blink movement LED to indicate fault. 
                for (int8_t blink_amount = 0; blink_amount < 20; blink_amount++)
 366:	9f 5f       	subi	r25, 0xFF	; 255
 368:	94 31       	cpi	r25, 0x14	; 20
 36a:	1c f3       	brlt	.-58     	; 0x332 <main+0x180>
                    _delay_ms(50);
                    PORTH &= ~(1 << PH3);
                    _delay_ms(50);
                }                 

                g_STATE = Idle;
 36c:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <g_STATE>
            break;
 370:	2e cf       	rjmp	.-420    	; 0x1ce <main+0x1c>
                
            default:
                    // This state should not be reached. 
                    g_STATE = FAULT;
 372:	84 e0       	ldi	r24, 0x04	; 4
 374:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <g_STATE>
            break;
 378:	2a cf       	rjmp	.-428    	; 0x1ce <main+0x1c>

0000037a <_exit>:
 37a:	f8 94       	cli

0000037c <__stop_program>:
 37c:	ff cf       	rjmp	.-2      	; 0x37c <__stop_program>
