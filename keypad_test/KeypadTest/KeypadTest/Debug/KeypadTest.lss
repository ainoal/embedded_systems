
KeypadTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800100  00000afe  00000b92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000afe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800184  00800184  00000c16  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c16  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d14  00000000  00000000  00000d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000860  00000000  00000000  00001a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000067e  00000000  00000000  00002288  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00002908  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a3  00000000  00000000  000029a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000041f  00000000  00000000  00002e43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00003262  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ef       	ldi	r30, 0xFE	; 254
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 38       	cpi	r26, 0x84	; 132
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e8       	ldi	r26, 0x84	; 132
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 38       	cpi	r26, 0x8A	; 138
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 90 00 	call	0x120	; 0x120 <main>
  9e:	0c 94 7d 05 	jmp	0xafa	; 0xafa <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <led_test>:

#define BITMASK_D 0b11000000
#define BITMASK_B 0b00111111

void led_test(void){
    PORTD &= ~(1 << PD3);
  a6:	8b b1       	in	r24, 0x0b	; 11
  a8:	87 7f       	andi	r24, 0xF7	; 247
  aa:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	83 ed       	ldi	r24, 0xD3	; 211
  b0:	90 e3       	ldi	r25, 0x30	; 48
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <led_test+0xc>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <led_test+0x16>
  bc:	00 00       	nop
    _delay_ms(1000);
    PORTD |= (1 << PD3);
  be:	8b b1       	in	r24, 0x0b	; 11
  c0:	88 60       	ori	r24, 0x08	; 8
  c2:	8b b9       	out	0x0b, r24	; 11
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	83 ed       	ldi	r24, 0xD3	; 211
  c8:	90 e3       	ldi	r25, 0x30	; 48
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <led_test+0x24>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <led_test+0x2e>
  d4:	00 00       	nop
    _delay_ms(1000);
    PORTD &= ~(1 << PD3);
  d6:	8b b1       	in	r24, 0x0b	; 11
  d8:	87 7f       	andi	r24, 0xF7	; 247
  da:	8b b9       	out	0x0b, r24	; 11
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	83 ed       	ldi	r24, 0xD3	; 211
  e0:	90 e3       	ldi	r25, 0x30	; 48
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <led_test+0x3c>
  ea:	00 c0       	rjmp	.+0      	; 0xec <led_test+0x46>
  ec:	00 00       	nop
  ee:	08 95       	ret

000000f0 <compare>:
    _delay_ms(1000);
}

int compare(char *password, char *given_password){
    if (strcmp(password, given_password) != 0) {
  f0:	0e 94 96 02 	call	0x52c	; 0x52c <strcmp>
  f4:	89 2b       	or	r24, r25
  f6:	89 f0       	breq	.+34     	; 0x11a <compare+0x2a>
        led_test();
  f8:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
 104:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
 108:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
 10c:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
 110:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        return 0;
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	08 95       	ret
    }
    else {
        return 1;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
    }
}
 11e:	08 95       	ret

00000120 <main>:

int main(void)
{
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	6c 97       	sbiw	r28, 0x1c	; 28
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	f8 94       	cli
 12e:	de bf       	out	0x3e, r29	; 62
 130:	0f be       	out	0x3f, r0	; 63
 132:	cd bf       	out	0x3d, r28	; 61
    /********************testing****************************/
    
    char input;
    FILE uart_output = FDEV_SETUP_STREAM(USART_transmit, NULL, _FDEV_SETUP_WRITE);
 134:	8e e0       	ldi	r24, 0x0E	; 14
 136:	8e 01       	movw	r16, r28
 138:	0f 5f       	subi	r16, 0xFF	; 255
 13a:	1f 4f       	sbci	r17, 0xFF	; 255
 13c:	f8 01       	movw	r30, r16
 13e:	98 2f       	mov	r25, r24
 140:	11 92       	st	Z+, r1
 142:	9a 95       	dec	r25
 144:	e9 f7       	brne	.-6      	; 0x140 <main+0x20>
 146:	92 e0       	ldi	r25, 0x02	; 2
 148:	9c 83       	std	Y+4, r25	; 0x04
 14a:	28 e8       	ldi	r18, 0x88	; 136
 14c:	32 e0       	ldi	r19, 0x02	; 2
 14e:	3a 87       	std	Y+10, r19	; 0x0a
 150:	29 87       	std	Y+9, r18	; 0x09
    FILE uart_input = FDEV_SETUP_STREAM(NULL, USART_receive, _FDEV_SETUP_READ);
 152:	7e 01       	movw	r14, r28
 154:	ef e0       	ldi	r30, 0x0F	; 15
 156:	ee 0e       	add	r14, r30
 158:	f1 1c       	adc	r15, r1
 15a:	f7 01       	movw	r30, r14
 15c:	11 92       	st	Z+, r1
 15e:	8a 95       	dec	r24
 160:	e9 f7       	brne	.-6      	; 0x15c <main+0x3c>
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	8a 8b       	std	Y+18, r24	; 0x12
 166:	8f e8       	ldi	r24, 0x8F	; 143
 168:	92 e0       	ldi	r25, 0x02	; 2
 16a:	9a 8f       	std	Y+26, r25	; 0x1a
 16c:	89 8f       	std	Y+25, r24	; 0x19
        
    USART_init(UBRR);
 16e:	87 e6       	ldi	r24, 0x67	; 103
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 7d 02 	call	0x4fa	; 0x4fa <USART_init>
        
    stdout = &uart_output;
 176:	e4 e8       	ldi	r30, 0x84	; 132
 178:	f1 e0       	ldi	r31, 0x01	; 1
 17a:	13 83       	std	Z+3, r17	; 0x03
 17c:	02 83       	std	Z+2, r16	; 0x02
    stdin = &uart_input;
 17e:	f1 82       	std	Z+1, r15	; 0x01
 180:	e0 82       	st	Z, r14
    char* password = "0123";
    char* given_password = "xxxx";
    int idx = 0;
    
    // Set digital pins 6-9 (rows) as input and 10-13 (columns) as output
    DDRD &= 0b00111111;
 182:	8a b1       	in	r24, 0x0a	; 10
 184:	8f 73       	andi	r24, 0x3F	; 63
 186:	8a b9       	out	0x0a, r24	; 10
    DDRB &= 0b11111100;
 188:	84 b1       	in	r24, 0x04	; 4
 18a:	8c 7f       	andi	r24, 0xFC	; 252
 18c:	84 b9       	out	0x04, r24	; 4
    DDRB |= 0b00111100;
 18e:	84 b1       	in	r24, 0x04	; 4
 190:	8c 63       	ori	r24, 0x3C	; 60
 192:	84 b9       	out	0x04, r24	; 4
 194:	8f e9       	ldi	r24, 0x9F	; 159
 196:	9f e0       	ldi	r25, 0x0F	; 15
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <main+0x78>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x7e>
 19e:	00 00       	nop
    _delay_ms(1);
    
    // Power the row pins
    PORTD |= 0b11000000;
 1a0:	8b b1       	in	r24, 0x0b	; 11
 1a2:	80 6c       	ori	r24, 0xC0	; 192
 1a4:	8b b9       	out	0x0b, r24	; 11
    PORTB |= 0b00000011;
 1a6:	85 b1       	in	r24, 0x05	; 5
 1a8:	83 60       	ori	r24, 0x03	; 3
 1aa:	85 b9       	out	0x05, r24	; 5
 1ac:	ef e9       	ldi	r30, 0x9F	; 159
 1ae:	ff e0       	ldi	r31, 0x0F	; 15
 1b0:	31 97       	sbiw	r30, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <main+0x90>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0x96>
 1b6:	00 00       	nop
    stdin = &uart_input;
    /******************************************************/
    
    char* password = "0123";
    char* given_password = "xxxx";
    int idx = 0;
 1b8:	e1 2c       	mov	r14, r1
 1ba:	f1 2c       	mov	r15, r1
    uint8_t portd_vals;
    
    while (1) 
    { 
        //_delay_ms(10);
        portd_vals = ((PIND & BITMASK_D) >> 6);
 1bc:	29 b1       	in	r18, 0x09	; 9
 1be:	22 95       	swap	r18
 1c0:	26 95       	lsr	r18
 1c2:	26 95       	lsr	r18
 1c4:	23 70       	andi	r18, 0x03	; 3
        portb_vals = ((PINB & BITMASK_B) << 2);
 1c6:	83 b1       	in	r24, 0x03	; 3
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
        keypad_vals = portd_vals | portb_vals;
 1d2:	12 2f       	mov	r17, r18
 1d4:	18 2b       	or	r17, r24
        
        //printf("Keypad_vals %d", keypad_vals);
        keypad_vals &= 0b00001111;
 1d6:	1f 70       	andi	r17, 0x0F	; 15
        printf("kp_vals: %d  portd_vals: %d  portb_vals: %d  PINB: %d\n\r", keypad_vals, portd_vals, portb_vals, PINB);
 1d8:	33 b1       	in	r19, 0x03	; 3
 1da:	d1 2c       	mov	r13, r1
 1dc:	1f 92       	push	r1
 1de:	3f 93       	push	r19
 1e0:	99 27       	eor	r25, r25
 1e2:	9f 93       	push	r25
 1e4:	8f 93       	push	r24
 1e6:	1f 92       	push	r1
 1e8:	2f 93       	push	r18
 1ea:	1f 92       	push	r1
 1ec:	1f 93       	push	r17
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	9f 93       	push	r25
 1f4:	8f 93       	push	r24
 1f6:	0e 94 9f 02 	call	0x53e	; 0x53e <printf>
        
        if (keypad_vals != 0b00001111) {     // If any of column pins goes high
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	f8 94       	cli
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	0f be       	out	0x3f, r0	; 63
 202:	cd bf       	out	0x3d, r28	; 61
 204:	1f 30       	cpi	r17, 0x0F	; 15
 206:	d1 f2       	breq	.-76     	; 0x1bc <main+0x9c>
            printf("if\n\r");
 208:	88 e3       	ldi	r24, 0x38	; 56
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	9f 93       	push	r25
 20e:	8f 93       	push	r24
 210:	0e 94 9f 02 	call	0x53e	; 0x53e <printf>
            key_pressed = keypad_vals;
            //_delay_ms(1);
   
            
            // Make rows as output and columns as input
            DDRD |= 0b11000000;
 214:	8a b1       	in	r24, 0x0a	; 10
 216:	80 6c       	ori	r24, 0xC0	; 192
 218:	8a b9       	out	0x0a, r24	; 10
            DDRB = 0b00000011;
 21a:	83 e0       	ldi	r24, 0x03	; 3
 21c:	84 b9       	out	0x04, r24	; 4
 21e:	ef e9       	ldi	r30, 0x9F	; 159
 220:	ff e0       	ldi	r31, 0x0F	; 15
 222:	31 97       	sbiw	r30, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <main+0x102>
 226:	00 c0       	rjmp	.+0      	; 0x228 <main+0x108>
 228:	00 00       	nop
            _delay_ms(1);
            
            // Power the column pins
            PORTB = 0b00111100;
 22a:	8c e3       	ldi	r24, 0x3C	; 60
 22c:	85 b9       	out	0x05, r24	; 5
            PORTD &= 0b00111111;
 22e:	8b b1       	in	r24, 0x0b	; 11
 230:	8f 73       	andi	r24, 0x3F	; 63
 232:	8b b9       	out	0x0b, r24	; 11
 234:	8f e9       	ldi	r24, 0x9F	; 159
 236:	9f e0       	ldi	r25, 0x0F	; 15
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <main+0x118>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <main+0x11e>
 23e:	00 00       	nop
            _delay_ms(1);
            
            printf("PINB %d   ", PINB);
 240:	83 b1       	in	r24, 0x03	; 3
 242:	1f 92       	push	r1
 244:	8f 93       	push	r24
 246:	8d e3       	ldi	r24, 0x3D	; 61
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	9f 93       	push	r25
 24c:	8f 93       	push	r24
 24e:	0e 94 9f 02 	call	0x53e	; 0x53e <printf>
            portd_vals = ((PIND & BITMASK_D) >> 6);
 252:	89 b1       	in	r24, 0x09	; 9
 254:	82 95       	swap	r24
 256:	86 95       	lsr	r24
 258:	86 95       	lsr	r24
 25a:	83 70       	andi	r24, 0x03	; 3
            portb_vals = ((PINB & BITMASK_B) << 2);
 25c:	a3 b0       	in	r10, 0x03	; 3
 25e:	b1 2c       	mov	r11, r1
 260:	aa 0c       	add	r10, r10
 262:	bb 1c       	adc	r11, r11
 264:	aa 0c       	add	r10, r10
 266:	bb 1c       	adc	r11, r11
            printf("portb_vals %d   portd_vals %d ", portb_vals, portd_vals);
 268:	1f 92       	push	r1
 26a:	8f 93       	push	r24
 26c:	c5 01       	movw	r24, r10
 26e:	99 27       	eor	r25, r25
 270:	9f 93       	push	r25
 272:	8f 93       	push	r24
 274:	88 e4       	ldi	r24, 0x48	; 72
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	9f 93       	push	r25
 27a:	8f 93       	push	r24
 27c:	0e 94 9f 02 	call	0x53e	; 0x53e <printf>
            
            //_delay_ms(10);
            keypad_vals = portd_vals | portb_vals;
            keypad_vals &= 0b11110000;
 280:	0a 2d       	mov	r16, r10
 282:	00 7f       	andi	r16, 0xF0	; 240
            
            //printf("PINB %d   ", PINB);
            printf("Key pressed %d   ", key_pressed);
 284:	df 92       	push	r13
 286:	1f 93       	push	r17
 288:	87 e6       	ldi	r24, 0x67	; 103
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	9f 93       	push	r25
 28e:	8f 93       	push	r24
 290:	0e 94 9f 02 	call	0x53e	; 0x53e <printf>
            //_delay_ms(10);
            key_pressed |= keypad_vals;    // The variable has now both row and column values
 294:	10 2b       	or	r17, r16
            printf("%d\n\r", key_pressed);
 296:	1f 92       	push	r1
 298:	1f 93       	push	r17
 29a:	83 e3       	ldi	r24, 0x33	; 51
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	9f 93       	push	r25
 2a0:	8f 93       	push	r24
 2a2:	0e 94 9f 02 	call	0x53e	; 0x53e <printf>
            
            if (key_pressed == 0b01110111) {
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	f8 94       	cli
 2aa:	de bf       	out	0x3e, r29	; 62
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	cd bf       	out	0x3d, r28	; 61
 2b0:	17 37       	cpi	r17, 0x77	; 119
 2b2:	79 f4       	brne	.+30     	; 0x2d2 <main+0x1b2>
                // Key 1 pressed
                given_password[idx] = '1';
 2b4:	81 e3       	ldi	r24, 0x31	; 49
 2b6:	f7 01       	movw	r30, r14
 2b8:	e7 58       	subi	r30, 0x87	; 135
 2ba:	fe 4f       	sbci	r31, 0xFE	; 254
 2bc:	80 83       	st	Z, r24
                if (password[idx] == '1') {
 2be:	f7 01       	movw	r30, r14
 2c0:	e2 58       	subi	r30, 0x82	; 130
 2c2:	fe 4f       	sbci	r31, 0xFE	; 254
 2c4:	80 81       	ld	r24, Z
 2c6:	81 33       	cpi	r24, 0x31	; 49
 2c8:	09 f0       	breq	.+2      	; 0x2cc <main+0x1ac>
 2ca:	f5 c0       	rjmp	.+490    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
                    led_test();
 2cc:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 2d0:	f2 c0       	rjmp	.+484    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b01111011) {
 2d2:	1b 37       	cpi	r17, 0x7B	; 123
 2d4:	79 f4       	brne	.+30     	; 0x2f4 <main+0x1d4>
                // Key 2 pressed
                given_password[idx] = '2';
 2d6:	82 e3       	ldi	r24, 0x32	; 50
 2d8:	f7 01       	movw	r30, r14
 2da:	e7 58       	subi	r30, 0x87	; 135
 2dc:	fe 4f       	sbci	r31, 0xFE	; 254
 2de:	80 83       	st	Z, r24
                if (password[idx] == '2') {
 2e0:	f7 01       	movw	r30, r14
 2e2:	e2 58       	subi	r30, 0x82	; 130
 2e4:	fe 4f       	sbci	r31, 0xFE	; 254
 2e6:	80 81       	ld	r24, Z
 2e8:	82 33       	cpi	r24, 0x32	; 50
 2ea:	09 f0       	breq	.+2      	; 0x2ee <main+0x1ce>
 2ec:	e4 c0       	rjmp	.+456    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
                    led_test();
 2ee:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 2f2:	e1 c0       	rjmp	.+450    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b01111101) {
 2f4:	1d 37       	cpi	r17, 0x7D	; 125
 2f6:	79 f4       	brne	.+30     	; 0x316 <main+0x1f6>
                // Key 3 pressed
                given_password[idx] = '3';
 2f8:	83 e3       	ldi	r24, 0x33	; 51
 2fa:	f7 01       	movw	r30, r14
 2fc:	e7 58       	subi	r30, 0x87	; 135
 2fe:	fe 4f       	sbci	r31, 0xFE	; 254
 300:	80 83       	st	Z, r24
                if (password[idx] == '3') {
 302:	f7 01       	movw	r30, r14
 304:	e2 58       	subi	r30, 0x82	; 130
 306:	fe 4f       	sbci	r31, 0xFE	; 254
 308:	80 81       	ld	r24, Z
 30a:	83 33       	cpi	r24, 0x33	; 51
 30c:	09 f0       	breq	.+2      	; 0x310 <main+0x1f0>
 30e:	d3 c0       	rjmp	.+422    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
                    led_test();
 310:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 314:	d0 c0       	rjmp	.+416    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b01111110) {
 316:	1e 37       	cpi	r17, 0x7E	; 126
 318:	79 f4       	brne	.+30     	; 0x338 <main+0x218>
                // A
                given_password[idx] = 'A';
 31a:	81 e4       	ldi	r24, 0x41	; 65
 31c:	f7 01       	movw	r30, r14
 31e:	e7 58       	subi	r30, 0x87	; 135
 320:	fe 4f       	sbci	r31, 0xFE	; 254
 322:	80 83       	st	Z, r24
                if (password[idx] == 'A') {
 324:	f7 01       	movw	r30, r14
 326:	e2 58       	subi	r30, 0x82	; 130
 328:	fe 4f       	sbci	r31, 0xFE	; 254
 32a:	80 81       	ld	r24, Z
 32c:	81 34       	cpi	r24, 0x41	; 65
 32e:	09 f0       	breq	.+2      	; 0x332 <main+0x212>
 330:	c2 c0       	rjmp	.+388    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
                    led_test();
 332:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 336:	bf c0       	rjmp	.+382    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b10110111) {
 338:	17 3b       	cpi	r17, 0xB7	; 183
 33a:	79 f4       	brne	.+30     	; 0x35a <main+0x23a>
                // 4
                given_password[idx] = '4';
 33c:	84 e3       	ldi	r24, 0x34	; 52
 33e:	f7 01       	movw	r30, r14
 340:	e7 58       	subi	r30, 0x87	; 135
 342:	fe 4f       	sbci	r31, 0xFE	; 254
 344:	80 83       	st	Z, r24
                if (password[idx] == '4') {
 346:	f7 01       	movw	r30, r14
 348:	e2 58       	subi	r30, 0x82	; 130
 34a:	fe 4f       	sbci	r31, 0xFE	; 254
 34c:	80 81       	ld	r24, Z
 34e:	84 33       	cpi	r24, 0x34	; 52
 350:	09 f0       	breq	.+2      	; 0x354 <main+0x234>
 352:	b1 c0       	rjmp	.+354    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
                    led_test();
 354:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 358:	ae c0       	rjmp	.+348    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b10111011) {
 35a:	1b 3b       	cpi	r17, 0xBB	; 187
 35c:	79 f4       	brne	.+30     	; 0x37c <main+0x25c>
                // 5
                given_password[idx] = '5';
 35e:	85 e3       	ldi	r24, 0x35	; 53
 360:	f7 01       	movw	r30, r14
 362:	e7 58       	subi	r30, 0x87	; 135
 364:	fe 4f       	sbci	r31, 0xFE	; 254
 366:	80 83       	st	Z, r24
                if (password[idx] == '5') {
 368:	f7 01       	movw	r30, r14
 36a:	e2 58       	subi	r30, 0x82	; 130
 36c:	fe 4f       	sbci	r31, 0xFE	; 254
 36e:	80 81       	ld	r24, Z
 370:	85 33       	cpi	r24, 0x35	; 53
 372:	09 f0       	breq	.+2      	; 0x376 <main+0x256>
 374:	a0 c0       	rjmp	.+320    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
                    led_test();
 376:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 37a:	9d c0       	rjmp	.+314    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b10111101) {
 37c:	1d 3b       	cpi	r17, 0xBD	; 189
 37e:	79 f4       	brne	.+30     	; 0x39e <main+0x27e>
                // 6
                given_password[idx] = '6';
 380:	86 e3       	ldi	r24, 0x36	; 54
 382:	f7 01       	movw	r30, r14
 384:	e7 58       	subi	r30, 0x87	; 135
 386:	fe 4f       	sbci	r31, 0xFE	; 254
 388:	80 83       	st	Z, r24
                if (password[idx] == '6') {
 38a:	f7 01       	movw	r30, r14
 38c:	e2 58       	subi	r30, 0x82	; 130
 38e:	fe 4f       	sbci	r31, 0xFE	; 254
 390:	80 81       	ld	r24, Z
 392:	86 33       	cpi	r24, 0x36	; 54
 394:	09 f0       	breq	.+2      	; 0x398 <main+0x278>
 396:	8f c0       	rjmp	.+286    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
                    led_test();
 398:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 39c:	8c c0       	rjmp	.+280    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b10111110) {
 39e:	1e 3b       	cpi	r17, 0xBE	; 190
 3a0:	79 f4       	brne	.+30     	; 0x3c0 <main+0x2a0>
                // B
                given_password[idx] = 'B';
 3a2:	82 e4       	ldi	r24, 0x42	; 66
 3a4:	f7 01       	movw	r30, r14
 3a6:	e7 58       	subi	r30, 0x87	; 135
 3a8:	fe 4f       	sbci	r31, 0xFE	; 254
 3aa:	80 83       	st	Z, r24
                if (password[idx] == 'B') {
 3ac:	f7 01       	movw	r30, r14
 3ae:	e2 58       	subi	r30, 0x82	; 130
 3b0:	fe 4f       	sbci	r31, 0xFE	; 254
 3b2:	80 81       	ld	r24, Z
 3b4:	82 34       	cpi	r24, 0x42	; 66
 3b6:	09 f0       	breq	.+2      	; 0x3ba <main+0x29a>
 3b8:	7e c0       	rjmp	.+252    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
                    led_test();
 3ba:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 3be:	7b c0       	rjmp	.+246    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11010111) {
 3c0:	17 3d       	cpi	r17, 0xD7	; 215
 3c2:	79 f4       	brne	.+30     	; 0x3e2 <main+0x2c2>
                // 7
                given_password[idx] = '7';
 3c4:	87 e3       	ldi	r24, 0x37	; 55
 3c6:	f7 01       	movw	r30, r14
 3c8:	e7 58       	subi	r30, 0x87	; 135
 3ca:	fe 4f       	sbci	r31, 0xFE	; 254
 3cc:	80 83       	st	Z, r24
                if (password[idx] == '7') {
 3ce:	f7 01       	movw	r30, r14
 3d0:	e2 58       	subi	r30, 0x82	; 130
 3d2:	fe 4f       	sbci	r31, 0xFE	; 254
 3d4:	80 81       	ld	r24, Z
 3d6:	87 33       	cpi	r24, 0x37	; 55
 3d8:	09 f0       	breq	.+2      	; 0x3dc <main+0x2bc>
 3da:	6d c0       	rjmp	.+218    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
                    led_test();
 3dc:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 3e0:	6a c0       	rjmp	.+212    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11011011) {
 3e2:	1b 3d       	cpi	r17, 0xDB	; 219
 3e4:	79 f4       	brne	.+30     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
                // 8
                given_password[idx] = '8';
 3e6:	88 e3       	ldi	r24, 0x38	; 56
 3e8:	f7 01       	movw	r30, r14
 3ea:	e7 58       	subi	r30, 0x87	; 135
 3ec:	fe 4f       	sbci	r31, 0xFE	; 254
 3ee:	80 83       	st	Z, r24
                if (password[idx] == '8') {
 3f0:	f7 01       	movw	r30, r14
 3f2:	e2 58       	subi	r30, 0x82	; 130
 3f4:	fe 4f       	sbci	r31, 0xFE	; 254
 3f6:	80 81       	ld	r24, Z
 3f8:	88 33       	cpi	r24, 0x38	; 56
 3fa:	09 f0       	breq	.+2      	; 0x3fe <main+0x2de>
 3fc:	5c c0       	rjmp	.+184    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
                    led_test();
 3fe:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 402:	59 c0       	rjmp	.+178    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11011101) {
 404:	1d 3d       	cpi	r17, 0xDD	; 221
 406:	79 f4       	brne	.+30     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
                // 9
                given_password[idx] = '9';
 408:	89 e3       	ldi	r24, 0x39	; 57
 40a:	f7 01       	movw	r30, r14
 40c:	e7 58       	subi	r30, 0x87	; 135
 40e:	fe 4f       	sbci	r31, 0xFE	; 254
 410:	80 83       	st	Z, r24
                if (password[idx] == '9') {
 412:	f7 01       	movw	r30, r14
 414:	e2 58       	subi	r30, 0x82	; 130
 416:	fe 4f       	sbci	r31, 0xFE	; 254
 418:	80 81       	ld	r24, Z
 41a:	89 33       	cpi	r24, 0x39	; 57
 41c:	09 f0       	breq	.+2      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 41e:	4b c0       	rjmp	.+150    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
                    led_test();
 420:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 424:	48 c0       	rjmp	.+144    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11011110) {
 426:	1e 3d       	cpi	r17, 0xDE	; 222
 428:	71 f4       	brne	.+28     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
                // C
                given_password[idx] = 'C';
 42a:	83 e4       	ldi	r24, 0x43	; 67
 42c:	f7 01       	movw	r30, r14
 42e:	e7 58       	subi	r30, 0x87	; 135
 430:	fe 4f       	sbci	r31, 0xFE	; 254
 432:	80 83       	st	Z, r24
                if (password[idx] == 'C') {
 434:	f7 01       	movw	r30, r14
 436:	e2 58       	subi	r30, 0x82	; 130
 438:	fe 4f       	sbci	r31, 0xFE	; 254
 43a:	80 81       	ld	r24, Z
 43c:	83 34       	cpi	r24, 0x43	; 67
 43e:	d9 f5       	brne	.+118    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
                    led_test();
 440:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 444:	38 c0       	rjmp	.+112    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11100111) {
 446:	17 3e       	cpi	r17, 0xE7	; 231
 448:	71 f4       	brne	.+28     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
                // *
                // TODO: make this the backspace button
                given_password[idx] = '*';
 44a:	8a e2       	ldi	r24, 0x2A	; 42
 44c:	f7 01       	movw	r30, r14
 44e:	e7 58       	subi	r30, 0x87	; 135
 450:	fe 4f       	sbci	r31, 0xFE	; 254
 452:	80 83       	st	Z, r24
                if (password[idx] == '*') {
 454:	f7 01       	movw	r30, r14
 456:	e2 58       	subi	r30, 0x82	; 130
 458:	fe 4f       	sbci	r31, 0xFE	; 254
 45a:	80 81       	ld	r24, Z
 45c:	8a 32       	cpi	r24, 0x2A	; 42
 45e:	59 f5       	brne	.+86     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
                    led_test();
 460:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 464:	28 c0       	rjmp	.+80     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11101011) {
 466:	1b 3e       	cpi	r17, 0xEB	; 235
 468:	71 f4       	brne	.+28     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
                // 0
                given_password[idx] = '0';
 46a:	80 e3       	ldi	r24, 0x30	; 48
 46c:	f7 01       	movw	r30, r14
 46e:	e7 58       	subi	r30, 0x87	; 135
 470:	fe 4f       	sbci	r31, 0xFE	; 254
 472:	80 83       	st	Z, r24
                if (password[idx] == '0') {
 474:	f7 01       	movw	r30, r14
 476:	e2 58       	subi	r30, 0x82	; 130
 478:	fe 4f       	sbci	r31, 0xFE	; 254
 47a:	80 81       	ld	r24, Z
 47c:	80 33       	cpi	r24, 0x30	; 48
 47e:	d9 f4       	brne	.+54     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
                    led_test();
 480:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 484:	18 c0       	rjmp	.+48     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11101101) {
 486:	1d 3e       	cpi	r17, 0xED	; 237
 488:	39 f4       	brne	.+14     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
                // #
                compare(password, given_password);
 48a:	69 e7       	ldi	r22, 0x79	; 121
 48c:	71 e0       	ldi	r23, 0x01	; 1
 48e:	8e e7       	ldi	r24, 0x7E	; 126
 490:	91 e0       	ldi	r25, 0x01	; 1
 492:	0e 94 78 00 	call	0xf0	; 0xf0 <compare>
 496:	0f c0       	rjmp	.+30     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
                //printf("#");
                //given_password[idx] = '#';
                //led_test();
            }
            else if (key_pressed == 0b11101110) {
 498:	1e 3e       	cpi	r17, 0xEE	; 238
 49a:	69 f4       	brne	.+26     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
                // D
                given_password[idx] = 'D';
 49c:	84 e4       	ldi	r24, 0x44	; 68
 49e:	f7 01       	movw	r30, r14
 4a0:	e7 58       	subi	r30, 0x87	; 135
 4a2:	fe 4f       	sbci	r31, 0xFE	; 254
 4a4:	80 83       	st	Z, r24
                if (password[idx] == 'D') {
 4a6:	f7 01       	movw	r30, r14
 4a8:	e2 58       	subi	r30, 0x82	; 130
 4aa:	fe 4f       	sbci	r31, 0xFE	; 254
 4ac:	80 81       	ld	r24, Z
 4ae:	84 34       	cpi	r24, 0x44	; 68
 4b0:	11 f4       	brne	.+4      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
                    led_test();
 4b2:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
                }
            }
            
            /* Initialization for new loop */
            // Set digital pins 6-9 (rows) as input and 10-13 (columns) as output
            DDRD &= 0b00111111;
 4b6:	8a b1       	in	r24, 0x0a	; 10
 4b8:	8f 73       	andi	r24, 0x3F	; 63
 4ba:	8a b9       	out	0x0a, r24	; 10
            DDRB &= 0b11111100;
 4bc:	84 b1       	in	r24, 0x04	; 4
 4be:	8c 7f       	andi	r24, 0xFC	; 252
 4c0:	84 b9       	out	0x04, r24	; 4
            DDRB |= 0b00111100;
 4c2:	84 b1       	in	r24, 0x04	; 4
 4c4:	8c 63       	ori	r24, 0x3C	; 60
 4c6:	84 b9       	out	0x04, r24	; 4
 4c8:	8f e9       	ldi	r24, 0x9F	; 159
 4ca:	9f e0       	ldi	r25, 0x0F	; 15
 4cc:	01 97       	sbiw	r24, 0x01	; 1
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4d2:	00 00       	nop
            _delay_ms(1);
    
            // Power the row pins
            PORTD |= 0b11000000;
 4d4:	8b b1       	in	r24, 0x0b	; 11
 4d6:	80 6c       	ori	r24, 0xC0	; 192
 4d8:	8b b9       	out	0x0b, r24	; 11
            PORTB |= 0b00000011;
 4da:	85 b1       	in	r24, 0x05	; 5
 4dc:	83 60       	ori	r24, 0x03	; 3
 4de:	85 b9       	out	0x05, r24	; 5
            PORTB &= 0b11000011;
 4e0:	85 b1       	in	r24, 0x05	; 5
 4e2:	83 7c       	andi	r24, 0xC3	; 195
 4e4:	85 b9       	out	0x05, r24	; 5
 4e6:	ef e9       	ldi	r30, 0x9F	; 159
 4e8:	ff e0       	ldi	r31, 0x0F	; 15
 4ea:	31 97       	sbiw	r30, 0x01	; 1
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
 4f0:	00 00       	nop
            _delay_ms(1);

            
            key_pressed = 0;
            idx +=1;
 4f2:	ff ef       	ldi	r31, 0xFF	; 255
 4f4:	ef 1a       	sub	r14, r31
 4f6:	ff 0a       	sbc	r15, r31
 4f8:	61 ce       	rjmp	.-830    	; 0x1bc <main+0x9c>

000004fa <USART_init>:
#include <stdio.h>


void USART_init(unsigned int ubrr) {
	// Set baud rate
	UBRR0H = (unsigned char) (ubrr>>8);
 4fa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char) ubrr;
 4fe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 502:	88 e1       	ldi	r24, 0x18	; 24
 504:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	// Set frame format: 8data, 2stop bit
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);
 508:	8e e0       	ldi	r24, 0x0E	; 14
 50a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 50e:	08 95       	ret

00000510 <USART_transmit>:
}

void USART_transmit(unsigned char data) {
	// Wait for empty transmit buffer
	while(!(UCSR0A & (1<<UDRE0)));
 510:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 514:	95 ff       	sbrs	r25, 5
 516:	fc cf       	rjmp	.-8      	; 0x510 <USART_transmit>
    
	// Put data into buffer, send the data
	UDR0 = data;
 518:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 51c:	08 95       	ret

0000051e <USART_receive>:
}

unsigned char USART_receive(void) {
	// Wait for data to be received
	while(!(UCSR0A & (1<<RXC0)));
 51e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 522:	88 23       	and	r24, r24
 524:	e4 f7       	brge	.-8      	; 0x51e <USART_receive>
	
	// Get and return received data from buffer
	return UDR0;
 526:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 52a:	08 95       	ret

0000052c <strcmp>:
 52c:	fb 01       	movw	r30, r22
 52e:	dc 01       	movw	r26, r24
 530:	8d 91       	ld	r24, X+
 532:	01 90       	ld	r0, Z+
 534:	80 19       	sub	r24, r0
 536:	01 10       	cpse	r0, r1
 538:	d9 f3       	breq	.-10     	; 0x530 <strcmp+0x4>
 53a:	99 0b       	sbc	r25, r25
 53c:	08 95       	ret

0000053e <printf>:
 53e:	a0 e0       	ldi	r26, 0x00	; 0
 540:	b0 e0       	ldi	r27, 0x00	; 0
 542:	e5 ea       	ldi	r30, 0xA5	; 165
 544:	f2 e0       	ldi	r31, 0x02	; 2
 546:	0c 94 56 05 	jmp	0xaac	; 0xaac <__prologue_saves__+0x20>
 54a:	ae 01       	movw	r20, r28
 54c:	4b 5f       	subi	r20, 0xFB	; 251
 54e:	5f 4f       	sbci	r21, 0xFF	; 255
 550:	fa 01       	movw	r30, r20
 552:	61 91       	ld	r22, Z+
 554:	71 91       	ld	r23, Z+
 556:	af 01       	movw	r20, r30
 558:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <__data_end+0x2>
 55c:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <__data_end+0x3>
 560:	0e 94 b5 02 	call	0x56a	; 0x56a <vfprintf>
 564:	e2 e0       	ldi	r30, 0x02	; 2
 566:	0c 94 72 05 	jmp	0xae4	; 0xae4 <__epilogue_restores__+0x20>

0000056a <vfprintf>:
 56a:	ab e0       	ldi	r26, 0x0B	; 11
 56c:	b0 e0       	ldi	r27, 0x00	; 0
 56e:	eb eb       	ldi	r30, 0xBB	; 187
 570:	f2 e0       	ldi	r31, 0x02	; 2
 572:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <__prologue_saves__>
 576:	6c 01       	movw	r12, r24
 578:	7b 01       	movw	r14, r22
 57a:	8a 01       	movw	r16, r20
 57c:	fc 01       	movw	r30, r24
 57e:	17 82       	std	Z+7, r1	; 0x07
 580:	16 82       	std	Z+6, r1	; 0x06
 582:	83 81       	ldd	r24, Z+3	; 0x03
 584:	81 ff       	sbrs	r24, 1
 586:	cc c1       	rjmp	.+920    	; 0x920 <__stack+0x21>
 588:	ce 01       	movw	r24, r28
 58a:	01 96       	adiw	r24, 0x01	; 1
 58c:	3c 01       	movw	r6, r24
 58e:	f6 01       	movw	r30, r12
 590:	93 81       	ldd	r25, Z+3	; 0x03
 592:	f7 01       	movw	r30, r14
 594:	93 fd       	sbrc	r25, 3
 596:	85 91       	lpm	r24, Z+
 598:	93 ff       	sbrs	r25, 3
 59a:	81 91       	ld	r24, Z+
 59c:	7f 01       	movw	r14, r30
 59e:	88 23       	and	r24, r24
 5a0:	09 f4       	brne	.+2      	; 0x5a4 <vfprintf+0x3a>
 5a2:	ba c1       	rjmp	.+884    	; 0x918 <__stack+0x19>
 5a4:	85 32       	cpi	r24, 0x25	; 37
 5a6:	39 f4       	brne	.+14     	; 0x5b6 <vfprintf+0x4c>
 5a8:	93 fd       	sbrc	r25, 3
 5aa:	85 91       	lpm	r24, Z+
 5ac:	93 ff       	sbrs	r25, 3
 5ae:	81 91       	ld	r24, Z+
 5b0:	7f 01       	movw	r14, r30
 5b2:	85 32       	cpi	r24, 0x25	; 37
 5b4:	29 f4       	brne	.+10     	; 0x5c0 <vfprintf+0x56>
 5b6:	b6 01       	movw	r22, r12
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	0e 94 ac 04 	call	0x958	; 0x958 <fputc>
 5be:	e7 cf       	rjmp	.-50     	; 0x58e <vfprintf+0x24>
 5c0:	91 2c       	mov	r9, r1
 5c2:	21 2c       	mov	r2, r1
 5c4:	31 2c       	mov	r3, r1
 5c6:	ff e1       	ldi	r31, 0x1F	; 31
 5c8:	f3 15       	cp	r31, r3
 5ca:	d8 f0       	brcs	.+54     	; 0x602 <vfprintf+0x98>
 5cc:	8b 32       	cpi	r24, 0x2B	; 43
 5ce:	79 f0       	breq	.+30     	; 0x5ee <vfprintf+0x84>
 5d0:	38 f4       	brcc	.+14     	; 0x5e0 <vfprintf+0x76>
 5d2:	80 32       	cpi	r24, 0x20	; 32
 5d4:	79 f0       	breq	.+30     	; 0x5f4 <vfprintf+0x8a>
 5d6:	83 32       	cpi	r24, 0x23	; 35
 5d8:	a1 f4       	brne	.+40     	; 0x602 <vfprintf+0x98>
 5da:	23 2d       	mov	r18, r3
 5dc:	20 61       	ori	r18, 0x10	; 16
 5de:	1d c0       	rjmp	.+58     	; 0x61a <vfprintf+0xb0>
 5e0:	8d 32       	cpi	r24, 0x2D	; 45
 5e2:	61 f0       	breq	.+24     	; 0x5fc <vfprintf+0x92>
 5e4:	80 33       	cpi	r24, 0x30	; 48
 5e6:	69 f4       	brne	.+26     	; 0x602 <vfprintf+0x98>
 5e8:	23 2d       	mov	r18, r3
 5ea:	21 60       	ori	r18, 0x01	; 1
 5ec:	16 c0       	rjmp	.+44     	; 0x61a <vfprintf+0xb0>
 5ee:	83 2d       	mov	r24, r3
 5f0:	82 60       	ori	r24, 0x02	; 2
 5f2:	38 2e       	mov	r3, r24
 5f4:	e3 2d       	mov	r30, r3
 5f6:	e4 60       	ori	r30, 0x04	; 4
 5f8:	3e 2e       	mov	r3, r30
 5fa:	2a c0       	rjmp	.+84     	; 0x650 <vfprintf+0xe6>
 5fc:	f3 2d       	mov	r31, r3
 5fe:	f8 60       	ori	r31, 0x08	; 8
 600:	1d c0       	rjmp	.+58     	; 0x63c <vfprintf+0xd2>
 602:	37 fc       	sbrc	r3, 7
 604:	2d c0       	rjmp	.+90     	; 0x660 <vfprintf+0xf6>
 606:	20 ed       	ldi	r18, 0xD0	; 208
 608:	28 0f       	add	r18, r24
 60a:	2a 30       	cpi	r18, 0x0A	; 10
 60c:	40 f0       	brcs	.+16     	; 0x61e <vfprintf+0xb4>
 60e:	8e 32       	cpi	r24, 0x2E	; 46
 610:	b9 f4       	brne	.+46     	; 0x640 <vfprintf+0xd6>
 612:	36 fc       	sbrc	r3, 6
 614:	81 c1       	rjmp	.+770    	; 0x918 <__stack+0x19>
 616:	23 2d       	mov	r18, r3
 618:	20 64       	ori	r18, 0x40	; 64
 61a:	32 2e       	mov	r3, r18
 61c:	19 c0       	rjmp	.+50     	; 0x650 <vfprintf+0xe6>
 61e:	36 fe       	sbrs	r3, 6
 620:	06 c0       	rjmp	.+12     	; 0x62e <vfprintf+0xc4>
 622:	8a e0       	ldi	r24, 0x0A	; 10
 624:	98 9e       	mul	r9, r24
 626:	20 0d       	add	r18, r0
 628:	11 24       	eor	r1, r1
 62a:	92 2e       	mov	r9, r18
 62c:	11 c0       	rjmp	.+34     	; 0x650 <vfprintf+0xe6>
 62e:	ea e0       	ldi	r30, 0x0A	; 10
 630:	2e 9e       	mul	r2, r30
 632:	20 0d       	add	r18, r0
 634:	11 24       	eor	r1, r1
 636:	22 2e       	mov	r2, r18
 638:	f3 2d       	mov	r31, r3
 63a:	f0 62       	ori	r31, 0x20	; 32
 63c:	3f 2e       	mov	r3, r31
 63e:	08 c0       	rjmp	.+16     	; 0x650 <vfprintf+0xe6>
 640:	8c 36       	cpi	r24, 0x6C	; 108
 642:	21 f4       	brne	.+8      	; 0x64c <vfprintf+0xe2>
 644:	83 2d       	mov	r24, r3
 646:	80 68       	ori	r24, 0x80	; 128
 648:	38 2e       	mov	r3, r24
 64a:	02 c0       	rjmp	.+4      	; 0x650 <vfprintf+0xe6>
 64c:	88 36       	cpi	r24, 0x68	; 104
 64e:	41 f4       	brne	.+16     	; 0x660 <vfprintf+0xf6>
 650:	f7 01       	movw	r30, r14
 652:	93 fd       	sbrc	r25, 3
 654:	85 91       	lpm	r24, Z+
 656:	93 ff       	sbrs	r25, 3
 658:	81 91       	ld	r24, Z+
 65a:	7f 01       	movw	r14, r30
 65c:	81 11       	cpse	r24, r1
 65e:	b3 cf       	rjmp	.-154    	; 0x5c6 <vfprintf+0x5c>
 660:	98 2f       	mov	r25, r24
 662:	9f 7d       	andi	r25, 0xDF	; 223
 664:	95 54       	subi	r25, 0x45	; 69
 666:	93 30       	cpi	r25, 0x03	; 3
 668:	28 f4       	brcc	.+10     	; 0x674 <vfprintf+0x10a>
 66a:	0c 5f       	subi	r16, 0xFC	; 252
 66c:	1f 4f       	sbci	r17, 0xFF	; 255
 66e:	9f e3       	ldi	r25, 0x3F	; 63
 670:	99 83       	std	Y+1, r25	; 0x01
 672:	0d c0       	rjmp	.+26     	; 0x68e <vfprintf+0x124>
 674:	83 36       	cpi	r24, 0x63	; 99
 676:	31 f0       	breq	.+12     	; 0x684 <vfprintf+0x11a>
 678:	83 37       	cpi	r24, 0x73	; 115
 67a:	71 f0       	breq	.+28     	; 0x698 <vfprintf+0x12e>
 67c:	83 35       	cpi	r24, 0x53	; 83
 67e:	09 f0       	breq	.+2      	; 0x682 <vfprintf+0x118>
 680:	59 c0       	rjmp	.+178    	; 0x734 <vfprintf+0x1ca>
 682:	21 c0       	rjmp	.+66     	; 0x6c6 <vfprintf+0x15c>
 684:	f8 01       	movw	r30, r16
 686:	80 81       	ld	r24, Z
 688:	89 83       	std	Y+1, r24	; 0x01
 68a:	0e 5f       	subi	r16, 0xFE	; 254
 68c:	1f 4f       	sbci	r17, 0xFF	; 255
 68e:	88 24       	eor	r8, r8
 690:	83 94       	inc	r8
 692:	91 2c       	mov	r9, r1
 694:	53 01       	movw	r10, r6
 696:	13 c0       	rjmp	.+38     	; 0x6be <vfprintf+0x154>
 698:	28 01       	movw	r4, r16
 69a:	f2 e0       	ldi	r31, 0x02	; 2
 69c:	4f 0e       	add	r4, r31
 69e:	51 1c       	adc	r5, r1
 6a0:	f8 01       	movw	r30, r16
 6a2:	a0 80       	ld	r10, Z
 6a4:	b1 80       	ldd	r11, Z+1	; 0x01
 6a6:	36 fe       	sbrs	r3, 6
 6a8:	03 c0       	rjmp	.+6      	; 0x6b0 <vfprintf+0x146>
 6aa:	69 2d       	mov	r22, r9
 6ac:	70 e0       	ldi	r23, 0x00	; 0
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <vfprintf+0x14a>
 6b0:	6f ef       	ldi	r22, 0xFF	; 255
 6b2:	7f ef       	ldi	r23, 0xFF	; 255
 6b4:	c5 01       	movw	r24, r10
 6b6:	0e 94 a1 04 	call	0x942	; 0x942 <strnlen>
 6ba:	4c 01       	movw	r8, r24
 6bc:	82 01       	movw	r16, r4
 6be:	f3 2d       	mov	r31, r3
 6c0:	ff 77       	andi	r31, 0x7F	; 127
 6c2:	3f 2e       	mov	r3, r31
 6c4:	16 c0       	rjmp	.+44     	; 0x6f2 <vfprintf+0x188>
 6c6:	28 01       	movw	r4, r16
 6c8:	22 e0       	ldi	r18, 0x02	; 2
 6ca:	42 0e       	add	r4, r18
 6cc:	51 1c       	adc	r5, r1
 6ce:	f8 01       	movw	r30, r16
 6d0:	a0 80       	ld	r10, Z
 6d2:	b1 80       	ldd	r11, Z+1	; 0x01
 6d4:	36 fe       	sbrs	r3, 6
 6d6:	03 c0       	rjmp	.+6      	; 0x6de <vfprintf+0x174>
 6d8:	69 2d       	mov	r22, r9
 6da:	70 e0       	ldi	r23, 0x00	; 0
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <vfprintf+0x178>
 6de:	6f ef       	ldi	r22, 0xFF	; 255
 6e0:	7f ef       	ldi	r23, 0xFF	; 255
 6e2:	c5 01       	movw	r24, r10
 6e4:	0e 94 96 04 	call	0x92c	; 0x92c <strnlen_P>
 6e8:	4c 01       	movw	r8, r24
 6ea:	f3 2d       	mov	r31, r3
 6ec:	f0 68       	ori	r31, 0x80	; 128
 6ee:	3f 2e       	mov	r3, r31
 6f0:	82 01       	movw	r16, r4
 6f2:	33 fc       	sbrc	r3, 3
 6f4:	1b c0       	rjmp	.+54     	; 0x72c <vfprintf+0x1c2>
 6f6:	82 2d       	mov	r24, r2
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	88 16       	cp	r8, r24
 6fc:	99 06       	cpc	r9, r25
 6fe:	b0 f4       	brcc	.+44     	; 0x72c <vfprintf+0x1c2>
 700:	b6 01       	movw	r22, r12
 702:	80 e2       	ldi	r24, 0x20	; 32
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	0e 94 ac 04 	call	0x958	; 0x958 <fputc>
 70a:	2a 94       	dec	r2
 70c:	f4 cf       	rjmp	.-24     	; 0x6f6 <vfprintf+0x18c>
 70e:	f5 01       	movw	r30, r10
 710:	37 fc       	sbrc	r3, 7
 712:	85 91       	lpm	r24, Z+
 714:	37 fe       	sbrs	r3, 7
 716:	81 91       	ld	r24, Z+
 718:	5f 01       	movw	r10, r30
 71a:	b6 01       	movw	r22, r12
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	0e 94 ac 04 	call	0x958	; 0x958 <fputc>
 722:	21 10       	cpse	r2, r1
 724:	2a 94       	dec	r2
 726:	21 e0       	ldi	r18, 0x01	; 1
 728:	82 1a       	sub	r8, r18
 72a:	91 08       	sbc	r9, r1
 72c:	81 14       	cp	r8, r1
 72e:	91 04       	cpc	r9, r1
 730:	71 f7       	brne	.-36     	; 0x70e <vfprintf+0x1a4>
 732:	e8 c0       	rjmp	.+464    	; 0x904 <__stack+0x5>
 734:	84 36       	cpi	r24, 0x64	; 100
 736:	11 f0       	breq	.+4      	; 0x73c <vfprintf+0x1d2>
 738:	89 36       	cpi	r24, 0x69	; 105
 73a:	41 f5       	brne	.+80     	; 0x78c <vfprintf+0x222>
 73c:	f8 01       	movw	r30, r16
 73e:	37 fe       	sbrs	r3, 7
 740:	07 c0       	rjmp	.+14     	; 0x750 <vfprintf+0x1e6>
 742:	60 81       	ld	r22, Z
 744:	71 81       	ldd	r23, Z+1	; 0x01
 746:	82 81       	ldd	r24, Z+2	; 0x02
 748:	93 81       	ldd	r25, Z+3	; 0x03
 74a:	0c 5f       	subi	r16, 0xFC	; 252
 74c:	1f 4f       	sbci	r17, 0xFF	; 255
 74e:	08 c0       	rjmp	.+16     	; 0x760 <vfprintf+0x1f6>
 750:	60 81       	ld	r22, Z
 752:	71 81       	ldd	r23, Z+1	; 0x01
 754:	07 2e       	mov	r0, r23
 756:	00 0c       	add	r0, r0
 758:	88 0b       	sbc	r24, r24
 75a:	99 0b       	sbc	r25, r25
 75c:	0e 5f       	subi	r16, 0xFE	; 254
 75e:	1f 4f       	sbci	r17, 0xFF	; 255
 760:	f3 2d       	mov	r31, r3
 762:	ff 76       	andi	r31, 0x6F	; 111
 764:	3f 2e       	mov	r3, r31
 766:	97 ff       	sbrs	r25, 7
 768:	09 c0       	rjmp	.+18     	; 0x77c <vfprintf+0x212>
 76a:	90 95       	com	r25
 76c:	80 95       	com	r24
 76e:	70 95       	com	r23
 770:	61 95       	neg	r22
 772:	7f 4f       	sbci	r23, 0xFF	; 255
 774:	8f 4f       	sbci	r24, 0xFF	; 255
 776:	9f 4f       	sbci	r25, 0xFF	; 255
 778:	f0 68       	ori	r31, 0x80	; 128
 77a:	3f 2e       	mov	r3, r31
 77c:	2a e0       	ldi	r18, 0x0A	; 10
 77e:	30 e0       	ldi	r19, 0x00	; 0
 780:	a3 01       	movw	r20, r6
 782:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__ultoa_invert>
 786:	88 2e       	mov	r8, r24
 788:	86 18       	sub	r8, r6
 78a:	45 c0       	rjmp	.+138    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 78c:	85 37       	cpi	r24, 0x75	; 117
 78e:	31 f4       	brne	.+12     	; 0x79c <vfprintf+0x232>
 790:	23 2d       	mov	r18, r3
 792:	2f 7e       	andi	r18, 0xEF	; 239
 794:	b2 2e       	mov	r11, r18
 796:	2a e0       	ldi	r18, 0x0A	; 10
 798:	30 e0       	ldi	r19, 0x00	; 0
 79a:	25 c0       	rjmp	.+74     	; 0x7e6 <vfprintf+0x27c>
 79c:	93 2d       	mov	r25, r3
 79e:	99 7f       	andi	r25, 0xF9	; 249
 7a0:	b9 2e       	mov	r11, r25
 7a2:	8f 36       	cpi	r24, 0x6F	; 111
 7a4:	c1 f0       	breq	.+48     	; 0x7d6 <vfprintf+0x26c>
 7a6:	18 f4       	brcc	.+6      	; 0x7ae <vfprintf+0x244>
 7a8:	88 35       	cpi	r24, 0x58	; 88
 7aa:	79 f0       	breq	.+30     	; 0x7ca <vfprintf+0x260>
 7ac:	b5 c0       	rjmp	.+362    	; 0x918 <__stack+0x19>
 7ae:	80 37       	cpi	r24, 0x70	; 112
 7b0:	19 f0       	breq	.+6      	; 0x7b8 <vfprintf+0x24e>
 7b2:	88 37       	cpi	r24, 0x78	; 120
 7b4:	21 f0       	breq	.+8      	; 0x7be <vfprintf+0x254>
 7b6:	b0 c0       	rjmp	.+352    	; 0x918 <__stack+0x19>
 7b8:	e9 2f       	mov	r30, r25
 7ba:	e0 61       	ori	r30, 0x10	; 16
 7bc:	be 2e       	mov	r11, r30
 7be:	b4 fe       	sbrs	r11, 4
 7c0:	0d c0       	rjmp	.+26     	; 0x7dc <vfprintf+0x272>
 7c2:	fb 2d       	mov	r31, r11
 7c4:	f4 60       	ori	r31, 0x04	; 4
 7c6:	bf 2e       	mov	r11, r31
 7c8:	09 c0       	rjmp	.+18     	; 0x7dc <vfprintf+0x272>
 7ca:	34 fe       	sbrs	r3, 4
 7cc:	0a c0       	rjmp	.+20     	; 0x7e2 <vfprintf+0x278>
 7ce:	29 2f       	mov	r18, r25
 7d0:	26 60       	ori	r18, 0x06	; 6
 7d2:	b2 2e       	mov	r11, r18
 7d4:	06 c0       	rjmp	.+12     	; 0x7e2 <vfprintf+0x278>
 7d6:	28 e0       	ldi	r18, 0x08	; 8
 7d8:	30 e0       	ldi	r19, 0x00	; 0
 7da:	05 c0       	rjmp	.+10     	; 0x7e6 <vfprintf+0x27c>
 7dc:	20 e1       	ldi	r18, 0x10	; 16
 7de:	30 e0       	ldi	r19, 0x00	; 0
 7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <vfprintf+0x27c>
 7e2:	20 e1       	ldi	r18, 0x10	; 16
 7e4:	32 e0       	ldi	r19, 0x02	; 2
 7e6:	f8 01       	movw	r30, r16
 7e8:	b7 fe       	sbrs	r11, 7
 7ea:	07 c0       	rjmp	.+14     	; 0x7fa <vfprintf+0x290>
 7ec:	60 81       	ld	r22, Z
 7ee:	71 81       	ldd	r23, Z+1	; 0x01
 7f0:	82 81       	ldd	r24, Z+2	; 0x02
 7f2:	93 81       	ldd	r25, Z+3	; 0x03
 7f4:	0c 5f       	subi	r16, 0xFC	; 252
 7f6:	1f 4f       	sbci	r17, 0xFF	; 255
 7f8:	06 c0       	rjmp	.+12     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7fa:	60 81       	ld	r22, Z
 7fc:	71 81       	ldd	r23, Z+1	; 0x01
 7fe:	80 e0       	ldi	r24, 0x00	; 0
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	0e 5f       	subi	r16, 0xFE	; 254
 804:	1f 4f       	sbci	r17, 0xFF	; 255
 806:	a3 01       	movw	r20, r6
 808:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__ultoa_invert>
 80c:	88 2e       	mov	r8, r24
 80e:	86 18       	sub	r8, r6
 810:	fb 2d       	mov	r31, r11
 812:	ff 77       	andi	r31, 0x7F	; 127
 814:	3f 2e       	mov	r3, r31
 816:	36 fe       	sbrs	r3, 6
 818:	0d c0       	rjmp	.+26     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 81a:	23 2d       	mov	r18, r3
 81c:	2e 7f       	andi	r18, 0xFE	; 254
 81e:	a2 2e       	mov	r10, r18
 820:	89 14       	cp	r8, r9
 822:	58 f4       	brcc	.+22     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 824:	34 fe       	sbrs	r3, 4
 826:	0b c0       	rjmp	.+22     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 828:	32 fc       	sbrc	r3, 2
 82a:	09 c0       	rjmp	.+18     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 82c:	83 2d       	mov	r24, r3
 82e:	8e 7e       	andi	r24, 0xEE	; 238
 830:	a8 2e       	mov	r10, r24
 832:	05 c0       	rjmp	.+10     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 834:	b8 2c       	mov	r11, r8
 836:	a3 2c       	mov	r10, r3
 838:	03 c0       	rjmp	.+6      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 83a:	b8 2c       	mov	r11, r8
 83c:	01 c0       	rjmp	.+2      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 83e:	b9 2c       	mov	r11, r9
 840:	a4 fe       	sbrs	r10, 4
 842:	0f c0       	rjmp	.+30     	; 0x862 <__DATA_REGION_LENGTH__+0x62>
 844:	fe 01       	movw	r30, r28
 846:	e8 0d       	add	r30, r8
 848:	f1 1d       	adc	r31, r1
 84a:	80 81       	ld	r24, Z
 84c:	80 33       	cpi	r24, 0x30	; 48
 84e:	21 f4       	brne	.+8      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 850:	9a 2d       	mov	r25, r10
 852:	99 7e       	andi	r25, 0xE9	; 233
 854:	a9 2e       	mov	r10, r25
 856:	09 c0       	rjmp	.+18     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 858:	a2 fe       	sbrs	r10, 2
 85a:	06 c0       	rjmp	.+12     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
 85c:	b3 94       	inc	r11
 85e:	b3 94       	inc	r11
 860:	04 c0       	rjmp	.+8      	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 862:	8a 2d       	mov	r24, r10
 864:	86 78       	andi	r24, 0x86	; 134
 866:	09 f0       	breq	.+2      	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 868:	b3 94       	inc	r11
 86a:	a3 fc       	sbrc	r10, 3
 86c:	11 c0       	rjmp	.+34     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
 86e:	a0 fe       	sbrs	r10, 0
 870:	06 c0       	rjmp	.+12     	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
 872:	b2 14       	cp	r11, r2
 874:	88 f4       	brcc	.+34     	; 0x898 <__DATA_REGION_LENGTH__+0x98>
 876:	28 0c       	add	r2, r8
 878:	92 2c       	mov	r9, r2
 87a:	9b 18       	sub	r9, r11
 87c:	0e c0       	rjmp	.+28     	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
 87e:	b2 14       	cp	r11, r2
 880:	60 f4       	brcc	.+24     	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
 882:	b6 01       	movw	r22, r12
 884:	80 e2       	ldi	r24, 0x20	; 32
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	0e 94 ac 04 	call	0x958	; 0x958 <fputc>
 88c:	b3 94       	inc	r11
 88e:	f7 cf       	rjmp	.-18     	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
 890:	b2 14       	cp	r11, r2
 892:	18 f4       	brcc	.+6      	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
 894:	2b 18       	sub	r2, r11
 896:	02 c0       	rjmp	.+4      	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
 898:	98 2c       	mov	r9, r8
 89a:	21 2c       	mov	r2, r1
 89c:	a4 fe       	sbrs	r10, 4
 89e:	10 c0       	rjmp	.+32     	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
 8a0:	b6 01       	movw	r22, r12
 8a2:	80 e3       	ldi	r24, 0x30	; 48
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	0e 94 ac 04 	call	0x958	; 0x958 <fputc>
 8aa:	a2 fe       	sbrs	r10, 2
 8ac:	17 c0       	rjmp	.+46     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
 8ae:	a1 fc       	sbrc	r10, 1
 8b0:	03 c0       	rjmp	.+6      	; 0x8b8 <__DATA_REGION_LENGTH__+0xb8>
 8b2:	88 e7       	ldi	r24, 0x78	; 120
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <__DATA_REGION_LENGTH__+0xbc>
 8b8:	88 e5       	ldi	r24, 0x58	; 88
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	b6 01       	movw	r22, r12
 8be:	0c c0       	rjmp	.+24     	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
 8c0:	8a 2d       	mov	r24, r10
 8c2:	86 78       	andi	r24, 0x86	; 134
 8c4:	59 f0       	breq	.+22     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
 8c6:	a1 fe       	sbrs	r10, 1
 8c8:	02 c0       	rjmp	.+4      	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 8ca:	8b e2       	ldi	r24, 0x2B	; 43
 8cc:	01 c0       	rjmp	.+2      	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
 8ce:	80 e2       	ldi	r24, 0x20	; 32
 8d0:	a7 fc       	sbrc	r10, 7
 8d2:	8d e2       	ldi	r24, 0x2D	; 45
 8d4:	b6 01       	movw	r22, r12
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	0e 94 ac 04 	call	0x958	; 0x958 <fputc>
 8dc:	89 14       	cp	r8, r9
 8de:	38 f4       	brcc	.+14     	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
 8e0:	b6 01       	movw	r22, r12
 8e2:	80 e3       	ldi	r24, 0x30	; 48
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	0e 94 ac 04 	call	0x958	; 0x958 <fputc>
 8ea:	9a 94       	dec	r9
 8ec:	f7 cf       	rjmp	.-18     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
 8ee:	8a 94       	dec	r8
 8f0:	f3 01       	movw	r30, r6
 8f2:	e8 0d       	add	r30, r8
 8f4:	f1 1d       	adc	r31, r1
 8f6:	80 81       	ld	r24, Z
 8f8:	b6 01       	movw	r22, r12
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	0e 94 ac 04 	call	0x958	; 0x958 <fputc>
 900:	81 10       	cpse	r8, r1
 902:	f5 cf       	rjmp	.-22     	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
 904:	22 20       	and	r2, r2
 906:	09 f4       	brne	.+2      	; 0x90a <__stack+0xb>
 908:	42 ce       	rjmp	.-892    	; 0x58e <vfprintf+0x24>
 90a:	b6 01       	movw	r22, r12
 90c:	80 e2       	ldi	r24, 0x20	; 32
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	0e 94 ac 04 	call	0x958	; 0x958 <fputc>
 914:	2a 94       	dec	r2
 916:	f6 cf       	rjmp	.-20     	; 0x904 <__stack+0x5>
 918:	f6 01       	movw	r30, r12
 91a:	86 81       	ldd	r24, Z+6	; 0x06
 91c:	97 81       	ldd	r25, Z+7	; 0x07
 91e:	02 c0       	rjmp	.+4      	; 0x924 <__stack+0x25>
 920:	8f ef       	ldi	r24, 0xFF	; 255
 922:	9f ef       	ldi	r25, 0xFF	; 255
 924:	2b 96       	adiw	r28, 0x0b	; 11
 926:	e2 e1       	ldi	r30, 0x12	; 18
 928:	0c 94 62 05 	jmp	0xac4	; 0xac4 <__epilogue_restores__>

0000092c <strnlen_P>:
 92c:	fc 01       	movw	r30, r24
 92e:	05 90       	lpm	r0, Z+
 930:	61 50       	subi	r22, 0x01	; 1
 932:	70 40       	sbci	r23, 0x00	; 0
 934:	01 10       	cpse	r0, r1
 936:	d8 f7       	brcc	.-10     	; 0x92e <strnlen_P+0x2>
 938:	80 95       	com	r24
 93a:	90 95       	com	r25
 93c:	8e 0f       	add	r24, r30
 93e:	9f 1f       	adc	r25, r31
 940:	08 95       	ret

00000942 <strnlen>:
 942:	fc 01       	movw	r30, r24
 944:	61 50       	subi	r22, 0x01	; 1
 946:	70 40       	sbci	r23, 0x00	; 0
 948:	01 90       	ld	r0, Z+
 94a:	01 10       	cpse	r0, r1
 94c:	d8 f7       	brcc	.-10     	; 0x944 <strnlen+0x2>
 94e:	80 95       	com	r24
 950:	90 95       	com	r25
 952:	8e 0f       	add	r24, r30
 954:	9f 1f       	adc	r25, r31
 956:	08 95       	ret

00000958 <fputc>:
 958:	0f 93       	push	r16
 95a:	1f 93       	push	r17
 95c:	cf 93       	push	r28
 95e:	df 93       	push	r29
 960:	fb 01       	movw	r30, r22
 962:	23 81       	ldd	r18, Z+3	; 0x03
 964:	21 fd       	sbrc	r18, 1
 966:	03 c0       	rjmp	.+6      	; 0x96e <fputc+0x16>
 968:	8f ef       	ldi	r24, 0xFF	; 255
 96a:	9f ef       	ldi	r25, 0xFF	; 255
 96c:	2c c0       	rjmp	.+88     	; 0x9c6 <fputc+0x6e>
 96e:	22 ff       	sbrs	r18, 2
 970:	16 c0       	rjmp	.+44     	; 0x99e <fputc+0x46>
 972:	46 81       	ldd	r20, Z+6	; 0x06
 974:	57 81       	ldd	r21, Z+7	; 0x07
 976:	24 81       	ldd	r18, Z+4	; 0x04
 978:	35 81       	ldd	r19, Z+5	; 0x05
 97a:	42 17       	cp	r20, r18
 97c:	53 07       	cpc	r21, r19
 97e:	44 f4       	brge	.+16     	; 0x990 <fputc+0x38>
 980:	a0 81       	ld	r26, Z
 982:	b1 81       	ldd	r27, Z+1	; 0x01
 984:	9d 01       	movw	r18, r26
 986:	2f 5f       	subi	r18, 0xFF	; 255
 988:	3f 4f       	sbci	r19, 0xFF	; 255
 98a:	31 83       	std	Z+1, r19	; 0x01
 98c:	20 83       	st	Z, r18
 98e:	8c 93       	st	X, r24
 990:	26 81       	ldd	r18, Z+6	; 0x06
 992:	37 81       	ldd	r19, Z+7	; 0x07
 994:	2f 5f       	subi	r18, 0xFF	; 255
 996:	3f 4f       	sbci	r19, 0xFF	; 255
 998:	37 83       	std	Z+7, r19	; 0x07
 99a:	26 83       	std	Z+6, r18	; 0x06
 99c:	14 c0       	rjmp	.+40     	; 0x9c6 <fputc+0x6e>
 99e:	8b 01       	movw	r16, r22
 9a0:	ec 01       	movw	r28, r24
 9a2:	fb 01       	movw	r30, r22
 9a4:	00 84       	ldd	r0, Z+8	; 0x08
 9a6:	f1 85       	ldd	r31, Z+9	; 0x09
 9a8:	e0 2d       	mov	r30, r0
 9aa:	09 95       	icall
 9ac:	89 2b       	or	r24, r25
 9ae:	e1 f6       	brne	.-72     	; 0x968 <fputc+0x10>
 9b0:	d8 01       	movw	r26, r16
 9b2:	16 96       	adiw	r26, 0x06	; 6
 9b4:	8d 91       	ld	r24, X+
 9b6:	9c 91       	ld	r25, X
 9b8:	17 97       	sbiw	r26, 0x07	; 7
 9ba:	01 96       	adiw	r24, 0x01	; 1
 9bc:	17 96       	adiw	r26, 0x07	; 7
 9be:	9c 93       	st	X, r25
 9c0:	8e 93       	st	-X, r24
 9c2:	16 97       	sbiw	r26, 0x06	; 6
 9c4:	ce 01       	movw	r24, r28
 9c6:	df 91       	pop	r29
 9c8:	cf 91       	pop	r28
 9ca:	1f 91       	pop	r17
 9cc:	0f 91       	pop	r16
 9ce:	08 95       	ret

000009d0 <__ultoa_invert>:
 9d0:	fa 01       	movw	r30, r20
 9d2:	aa 27       	eor	r26, r26
 9d4:	28 30       	cpi	r18, 0x08	; 8
 9d6:	51 f1       	breq	.+84     	; 0xa2c <__ultoa_invert+0x5c>
 9d8:	20 31       	cpi	r18, 0x10	; 16
 9da:	81 f1       	breq	.+96     	; 0xa3c <__ultoa_invert+0x6c>
 9dc:	e8 94       	clt
 9de:	6f 93       	push	r22
 9e0:	6e 7f       	andi	r22, 0xFE	; 254
 9e2:	6e 5f       	subi	r22, 0xFE	; 254
 9e4:	7f 4f       	sbci	r23, 0xFF	; 255
 9e6:	8f 4f       	sbci	r24, 0xFF	; 255
 9e8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ea:	af 4f       	sbci	r26, 0xFF	; 255
 9ec:	b1 e0       	ldi	r27, 0x01	; 1
 9ee:	3e d0       	rcall	.+124    	; 0xa6c <__ultoa_invert+0x9c>
 9f0:	b4 e0       	ldi	r27, 0x04	; 4
 9f2:	3c d0       	rcall	.+120    	; 0xa6c <__ultoa_invert+0x9c>
 9f4:	67 0f       	add	r22, r23
 9f6:	78 1f       	adc	r23, r24
 9f8:	89 1f       	adc	r24, r25
 9fa:	9a 1f       	adc	r25, r26
 9fc:	a1 1d       	adc	r26, r1
 9fe:	68 0f       	add	r22, r24
 a00:	79 1f       	adc	r23, r25
 a02:	8a 1f       	adc	r24, r26
 a04:	91 1d       	adc	r25, r1
 a06:	a1 1d       	adc	r26, r1
 a08:	6a 0f       	add	r22, r26
 a0a:	71 1d       	adc	r23, r1
 a0c:	81 1d       	adc	r24, r1
 a0e:	91 1d       	adc	r25, r1
 a10:	a1 1d       	adc	r26, r1
 a12:	20 d0       	rcall	.+64     	; 0xa54 <__ultoa_invert+0x84>
 a14:	09 f4       	brne	.+2      	; 0xa18 <__ultoa_invert+0x48>
 a16:	68 94       	set
 a18:	3f 91       	pop	r19
 a1a:	2a e0       	ldi	r18, 0x0A	; 10
 a1c:	26 9f       	mul	r18, r22
 a1e:	11 24       	eor	r1, r1
 a20:	30 19       	sub	r19, r0
 a22:	30 5d       	subi	r19, 0xD0	; 208
 a24:	31 93       	st	Z+, r19
 a26:	de f6       	brtc	.-74     	; 0x9de <__ultoa_invert+0xe>
 a28:	cf 01       	movw	r24, r30
 a2a:	08 95       	ret
 a2c:	46 2f       	mov	r20, r22
 a2e:	47 70       	andi	r20, 0x07	; 7
 a30:	40 5d       	subi	r20, 0xD0	; 208
 a32:	41 93       	st	Z+, r20
 a34:	b3 e0       	ldi	r27, 0x03	; 3
 a36:	0f d0       	rcall	.+30     	; 0xa56 <__ultoa_invert+0x86>
 a38:	c9 f7       	brne	.-14     	; 0xa2c <__ultoa_invert+0x5c>
 a3a:	f6 cf       	rjmp	.-20     	; 0xa28 <__ultoa_invert+0x58>
 a3c:	46 2f       	mov	r20, r22
 a3e:	4f 70       	andi	r20, 0x0F	; 15
 a40:	40 5d       	subi	r20, 0xD0	; 208
 a42:	4a 33       	cpi	r20, 0x3A	; 58
 a44:	18 f0       	brcs	.+6      	; 0xa4c <__ultoa_invert+0x7c>
 a46:	49 5d       	subi	r20, 0xD9	; 217
 a48:	31 fd       	sbrc	r19, 1
 a4a:	40 52       	subi	r20, 0x20	; 32
 a4c:	41 93       	st	Z+, r20
 a4e:	02 d0       	rcall	.+4      	; 0xa54 <__ultoa_invert+0x84>
 a50:	a9 f7       	brne	.-22     	; 0xa3c <__ultoa_invert+0x6c>
 a52:	ea cf       	rjmp	.-44     	; 0xa28 <__ultoa_invert+0x58>
 a54:	b4 e0       	ldi	r27, 0x04	; 4
 a56:	a6 95       	lsr	r26
 a58:	97 95       	ror	r25
 a5a:	87 95       	ror	r24
 a5c:	77 95       	ror	r23
 a5e:	67 95       	ror	r22
 a60:	ba 95       	dec	r27
 a62:	c9 f7       	brne	.-14     	; 0xa56 <__ultoa_invert+0x86>
 a64:	00 97       	sbiw	r24, 0x00	; 0
 a66:	61 05       	cpc	r22, r1
 a68:	71 05       	cpc	r23, r1
 a6a:	08 95       	ret
 a6c:	9b 01       	movw	r18, r22
 a6e:	ac 01       	movw	r20, r24
 a70:	0a 2e       	mov	r0, r26
 a72:	06 94       	lsr	r0
 a74:	57 95       	ror	r21
 a76:	47 95       	ror	r20
 a78:	37 95       	ror	r19
 a7a:	27 95       	ror	r18
 a7c:	ba 95       	dec	r27
 a7e:	c9 f7       	brne	.-14     	; 0xa72 <__ultoa_invert+0xa2>
 a80:	62 0f       	add	r22, r18
 a82:	73 1f       	adc	r23, r19
 a84:	84 1f       	adc	r24, r20
 a86:	95 1f       	adc	r25, r21
 a88:	a0 1d       	adc	r26, r0
 a8a:	08 95       	ret

00000a8c <__prologue_saves__>:
 a8c:	2f 92       	push	r2
 a8e:	3f 92       	push	r3
 a90:	4f 92       	push	r4
 a92:	5f 92       	push	r5
 a94:	6f 92       	push	r6
 a96:	7f 92       	push	r7
 a98:	8f 92       	push	r8
 a9a:	9f 92       	push	r9
 a9c:	af 92       	push	r10
 a9e:	bf 92       	push	r11
 aa0:	cf 92       	push	r12
 aa2:	df 92       	push	r13
 aa4:	ef 92       	push	r14
 aa6:	ff 92       	push	r15
 aa8:	0f 93       	push	r16
 aaa:	1f 93       	push	r17
 aac:	cf 93       	push	r28
 aae:	df 93       	push	r29
 ab0:	cd b7       	in	r28, 0x3d	; 61
 ab2:	de b7       	in	r29, 0x3e	; 62
 ab4:	ca 1b       	sub	r28, r26
 ab6:	db 0b       	sbc	r29, r27
 ab8:	0f b6       	in	r0, 0x3f	; 63
 aba:	f8 94       	cli
 abc:	de bf       	out	0x3e, r29	; 62
 abe:	0f be       	out	0x3f, r0	; 63
 ac0:	cd bf       	out	0x3d, r28	; 61
 ac2:	09 94       	ijmp

00000ac4 <__epilogue_restores__>:
 ac4:	2a 88       	ldd	r2, Y+18	; 0x12
 ac6:	39 88       	ldd	r3, Y+17	; 0x11
 ac8:	48 88       	ldd	r4, Y+16	; 0x10
 aca:	5f 84       	ldd	r5, Y+15	; 0x0f
 acc:	6e 84       	ldd	r6, Y+14	; 0x0e
 ace:	7d 84       	ldd	r7, Y+13	; 0x0d
 ad0:	8c 84       	ldd	r8, Y+12	; 0x0c
 ad2:	9b 84       	ldd	r9, Y+11	; 0x0b
 ad4:	aa 84       	ldd	r10, Y+10	; 0x0a
 ad6:	b9 84       	ldd	r11, Y+9	; 0x09
 ad8:	c8 84       	ldd	r12, Y+8	; 0x08
 ada:	df 80       	ldd	r13, Y+7	; 0x07
 adc:	ee 80       	ldd	r14, Y+6	; 0x06
 ade:	fd 80       	ldd	r15, Y+5	; 0x05
 ae0:	0c 81       	ldd	r16, Y+4	; 0x04
 ae2:	1b 81       	ldd	r17, Y+3	; 0x03
 ae4:	aa 81       	ldd	r26, Y+2	; 0x02
 ae6:	b9 81       	ldd	r27, Y+1	; 0x01
 ae8:	ce 0f       	add	r28, r30
 aea:	d1 1d       	adc	r29, r1
 aec:	0f b6       	in	r0, 0x3f	; 63
 aee:	f8 94       	cli
 af0:	de bf       	out	0x3e, r29	; 62
 af2:	0f be       	out	0x3f, r0	; 63
 af4:	cd bf       	out	0x3d, r28	; 61
 af6:	ed 01       	movw	r28, r26
 af8:	08 95       	ret

00000afa <_exit>:
 afa:	f8 94       	cli

00000afc <__stop_program>:
 afc:	ff cf       	rjmp	.-2      	; 0xafc <__stop_program>
