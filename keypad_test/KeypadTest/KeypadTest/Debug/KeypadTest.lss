
KeypadTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  00000b66  00000bfa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800192  00800192  00000c8c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c8c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ce8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e3d  00000000  00000000  00000d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087b  00000000  00000000  00001bc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006c3  00000000  00000000  00002440  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00002b04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a3  00000000  00000000  00002b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000556  00000000  00000000  0000303f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00003595  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 39       	cpi	r26, 0x92	; 146
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e9       	ldi	r26, 0x92	; 146
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 39       	cpi	r26, 0x98	; 152
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 90 00 	call	0x120	; 0x120 <main>
  9e:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <led_test>:

#define BITMASK_D 0b11000000
#define BITMASK_B 0b00111111

void led_test(void){
    PORTD &= ~(1 << PD3);
  a6:	8b b1       	in	r24, 0x0b	; 11
  a8:	87 7f       	andi	r24, 0xF7	; 247
  aa:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	83 ed       	ldi	r24, 0xD3	; 211
  b0:	90 e3       	ldi	r25, 0x30	; 48
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <led_test+0xc>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <led_test+0x16>
  bc:	00 00       	nop
    _delay_ms(1000);
    PORTD |= (1 << PD3);
  be:	8b b1       	in	r24, 0x0b	; 11
  c0:	88 60       	ori	r24, 0x08	; 8
  c2:	8b b9       	out	0x0b, r24	; 11
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	83 ed       	ldi	r24, 0xD3	; 211
  c8:	90 e3       	ldi	r25, 0x30	; 48
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <led_test+0x24>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <led_test+0x2e>
  d4:	00 00       	nop
    _delay_ms(1000);
    PORTD &= ~(1 << PD3);
  d6:	8b b1       	in	r24, 0x0b	; 11
  d8:	87 7f       	andi	r24, 0xF7	; 247
  da:	8b b9       	out	0x0b, r24	; 11
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	83 ed       	ldi	r24, 0xD3	; 211
  e0:	90 e3       	ldi	r25, 0x30	; 48
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <led_test+0x3c>
  ea:	00 c0       	rjmp	.+0      	; 0xec <led_test+0x46>
  ec:	00 00       	nop
  ee:	08 95       	ret

000000f0 <compare>:
    _delay_ms(1000);
}

int compare(char *password, char *given_password){
    if (strcmp(password, given_password) != 0) {
  f0:	0e 94 ca 02 	call	0x594	; 0x594 <strcmp>
  f4:	89 2b       	or	r24, r25
  f6:	89 f0       	breq	.+34     	; 0x11a <compare+0x2a>
        led_test();
  f8:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
 104:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
 108:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
 10c:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
 110:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        return 0;
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	08 95       	ret
    }
    else {
        return 1;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
    }
}
 11e:	08 95       	ret

00000120 <main>:

int main(void)
{
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	6c 97       	sbiw	r28, 0x1c	; 28
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	f8 94       	cli
 12e:	de bf       	out	0x3e, r29	; 62
 130:	0f be       	out	0x3f, r0	; 63
 132:	cd bf       	out	0x3d, r28	; 61
    /********************testing****************************/
    
    char input;
    FILE uart_output = FDEV_SETUP_STREAM(USART_transmit, NULL, _FDEV_SETUP_WRITE);
 134:	8e e0       	ldi	r24, 0x0E	; 14
 136:	9e 01       	movw	r18, r28
 138:	2f 5f       	subi	r18, 0xFF	; 255
 13a:	3f 4f       	sbci	r19, 0xFF	; 255
 13c:	79 01       	movw	r14, r18
 13e:	f9 01       	movw	r30, r18
 140:	28 2f       	mov	r18, r24
 142:	11 92       	st	Z+, r1
 144:	2a 95       	dec	r18
 146:	e9 f7       	brne	.-6      	; 0x142 <main+0x22>
 148:	92 e0       	ldi	r25, 0x02	; 2
 14a:	9c 83       	std	Y+4, r25	; 0x04
 14c:	2c eb       	ldi	r18, 0xBC	; 188
 14e:	32 e0       	ldi	r19, 0x02	; 2
 150:	3a 87       	std	Y+10, r19	; 0x0a
 152:	29 87       	std	Y+9, r18	; 0x09
    FILE uart_input = FDEV_SETUP_STREAM(NULL, USART_receive, _FDEV_SETUP_READ);
 154:	8e 01       	movw	r16, r28
 156:	01 5f       	subi	r16, 0xF1	; 241
 158:	1f 4f       	sbci	r17, 0xFF	; 255
 15a:	f8 01       	movw	r30, r16
 15c:	11 92       	st	Z+, r1
 15e:	8a 95       	dec	r24
 160:	e9 f7       	brne	.-6      	; 0x15c <main+0x3c>
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	8a 8b       	std	Y+18, r24	; 0x12
 166:	83 ec       	ldi	r24, 0xC3	; 195
 168:	92 e0       	ldi	r25, 0x02	; 2
 16a:	9a 8f       	std	Y+26, r25	; 0x1a
 16c:	89 8f       	std	Y+25, r24	; 0x19
        
    USART_init(UBRR);
 16e:	87 e6       	ldi	r24, 0x67	; 103
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 b1 02 	call	0x562	; 0x562 <USART_init>
        
    stdout = &uart_output;
 176:	e2 e9       	ldi	r30, 0x92	; 146
 178:	f1 e0       	ldi	r31, 0x01	; 1
 17a:	f3 82       	std	Z+3, r15	; 0x03
 17c:	e2 82       	std	Z+2, r14	; 0x02
    stdin = &uart_input;
 17e:	11 83       	std	Z+1, r17	; 0x01
 180:	00 83       	st	Z, r16
    char* password = "0123";
    char* given_password = "xxxx";
    int idx = 0;
    
    // Set digital pins 6-9 (rows) as input and 10-13 (columns) as output
    DDRD &= 0b00111111;
 182:	8a b1       	in	r24, 0x0a	; 10
 184:	8f 73       	andi	r24, 0x3F	; 63
 186:	8a b9       	out	0x0a, r24	; 10
    DDRB &= 0b11111100;
 188:	84 b1       	in	r24, 0x04	; 4
 18a:	8c 7f       	andi	r24, 0xFC	; 252
 18c:	84 b9       	out	0x04, r24	; 4
    DDRB |= 0b00111100;
 18e:	84 b1       	in	r24, 0x04	; 4
 190:	8c 63       	ori	r24, 0x3C	; 60
 192:	84 b9       	out	0x04, r24	; 4
 194:	8f e3       	ldi	r24, 0x3F	; 63
 196:	9c e9       	ldi	r25, 0x9C	; 156
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <main+0x78>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x7e>
 19e:	00 00       	nop
    _delay_ms(10);
    
    // Power the row pins
    PORTD |= 0b11000000;
 1a0:	8b b1       	in	r24, 0x0b	; 11
 1a2:	80 6c       	ori	r24, 0xC0	; 192
 1a4:	8b b9       	out	0x0b, r24	; 11
    PORTB |= 0b00000011;
 1a6:	85 b1       	in	r24, 0x05	; 5
 1a8:	83 60       	ori	r24, 0x03	; 3
 1aa:	85 b9       	out	0x05, r24	; 5
 1ac:	ef e3       	ldi	r30, 0x3F	; 63
 1ae:	fc e9       	ldi	r31, 0x9C	; 156
 1b0:	31 97       	sbiw	r30, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <main+0x90>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0x96>
 1b6:	00 00       	nop
    stdin = &uart_input;
    /******************************************************/
    
    char* password = "0123";
    char* given_password = "xxxx";
    int idx = 0;
 1b8:	c1 2c       	mov	r12, r1
 1ba:	d1 2c       	mov	r13, r1
 1bc:	ff ef       	ldi	r31, 0xFF	; 255
 1be:	21 ee       	ldi	r18, 0xE1	; 225
 1c0:	34 e0       	ldi	r19, 0x04	; 4
 1c2:	f1 50       	subi	r31, 0x01	; 1
 1c4:	20 40       	sbci	r18, 0x00	; 0
 1c6:	30 40       	sbci	r19, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <main+0xa2>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <main+0xac>
 1cc:	00 00       	nop
    uint8_t portd_vals;
    
    while (1) 
    { 
        _delay_ms(100);
        portd_vals = ((PIND & BITMASK_D) >> 6);
 1ce:	e9 b0       	in	r14, 0x09	; 9
 1d0:	e6 94       	lsr	r14
 1d2:	e6 94       	lsr	r14
 1d4:	e6 94       	lsr	r14
 1d6:	e6 94       	lsr	r14
 1d8:	e6 94       	lsr	r14
 1da:	e6 94       	lsr	r14
        portb_vals = ((PINB & BITMASK_B) << 2);
 1dc:	03 b1       	in	r16, 0x03	; 3
 1de:	10 e0       	ldi	r17, 0x00	; 0
 1e0:	00 0f       	add	r16, r16
 1e2:	11 1f       	adc	r17, r17
 1e4:	00 0f       	add	r16, r16
 1e6:	11 1f       	adc	r17, r17
        keypad_vals = portd_vals | portb_vals;
 1e8:	fe 2c       	mov	r15, r14
 1ea:	f0 2a       	or	r15, r16
        
        printf("Keypad_vals %d", keypad_vals);
 1ec:	1f 92       	push	r1
 1ee:	ff 92       	push	r15
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	91 e0       	ldi	r25, 0x01	; 1
 1f4:	9f 93       	push	r25
 1f6:	8f 93       	push	r24
 1f8:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <printf>
        keypad_vals &= 0b00001111;
 1fc:	8f 2d       	mov	r24, r15
 1fe:	8f 70       	andi	r24, 0x0F	; 15
 200:	f8 2e       	mov	r15, r24
        printf("kp_vals: %d  portd_vals: %d  portb_vals: %d  PINB: %d\n\r", keypad_vals, portd_vals, portb_vals, PINB);
 202:	83 b1       	in	r24, 0x03	; 3
 204:	b1 2c       	mov	r11, r1
 206:	1f 92       	push	r1
 208:	8f 93       	push	r24
 20a:	11 27       	eor	r17, r17
 20c:	1f 93       	push	r17
 20e:	0f 93       	push	r16
 210:	1f 92       	push	r1
 212:	ef 92       	push	r14
 214:	1f 92       	push	r1
 216:	ff 92       	push	r15
 218:	8f e0       	ldi	r24, 0x0F	; 15
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	9f 93       	push	r25
 21e:	8f 93       	push	r24
 220:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <printf>
        
        if (keypad_vals != 0b00001111) {     // If any of column pins goes high
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	f8 94       	cli
 228:	de bf       	out	0x3e, r29	; 62
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	cd bf       	out	0x3d, r28	; 61
 22e:	ff e0       	ldi	r31, 0x0F	; 15
 230:	ff 16       	cp	r15, r31
 232:	21 f2       	breq	.-120    	; 0x1bc <main+0x9c>
            printf("if\n\r");
 234:	87 e4       	ldi	r24, 0x47	; 71
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	9f 93       	push	r25
 23a:	8f 93       	push	r24
 23c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <printf>
 240:	8f e3       	ldi	r24, 0x3F	; 63
 242:	9c e9       	ldi	r25, 0x9C	; 156
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <main+0x124>
 248:	00 c0       	rjmp	.+0      	; 0x24a <main+0x12a>
 24a:	00 00       	nop
            key_pressed = keypad_vals;
            _delay_ms(10);
   
            
            // Make rows as output and columns as input
            DDRD |= 0b11000000;
 24c:	8a b1       	in	r24, 0x0a	; 10
 24e:	80 6c       	ori	r24, 0xC0	; 192
 250:	8a b9       	out	0x0a, r24	; 10
            DDRB = 0b00000011;
 252:	83 e0       	ldi	r24, 0x03	; 3
 254:	84 b9       	out	0x04, r24	; 4
 256:	ef e3       	ldi	r30, 0x3F	; 63
 258:	fc e9       	ldi	r31, 0x9C	; 156
 25a:	31 97       	sbiw	r30, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <main+0x13a>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0x140>
 260:	00 00       	nop
            _delay_ms(10);
            
            // Power the column pins
            PORTB |= 0b00111100;
 262:	85 b1       	in	r24, 0x05	; 5
 264:	8c 63       	ori	r24, 0x3C	; 60
 266:	85 b9       	out	0x05, r24	; 5
            PORTB &= 0b00111100;
 268:	85 b1       	in	r24, 0x05	; 5
 26a:	8c 73       	andi	r24, 0x3C	; 60
 26c:	85 b9       	out	0x05, r24	; 5
            PORTD &= 0b00111111;
 26e:	8b b1       	in	r24, 0x0b	; 11
 270:	8f 73       	andi	r24, 0x3F	; 63
 272:	8b b9       	out	0x0b, r24	; 11
 274:	ff ef       	ldi	r31, 0xFF	; 255
 276:	21 ee       	ldi	r18, 0xE1	; 225
 278:	34 e0       	ldi	r19, 0x04	; 4
 27a:	f1 50       	subi	r31, 0x01	; 1
 27c:	20 40       	sbci	r18, 0x00	; 0
 27e:	30 40       	sbci	r19, 0x00	; 0
 280:	e1 f7       	brne	.-8      	; 0x27a <main+0x15a>
 282:	00 c0       	rjmp	.+0      	; 0x284 <main+0x164>
 284:	00 00       	nop
            _delay_ms(100);
            
            portd_vals = ((PIND & BITMASK_D) >> 6);
 286:	89 b1       	in	r24, 0x09	; 9
 288:	82 95       	swap	r24
 28a:	86 95       	lsr	r24
 28c:	86 95       	lsr	r24
 28e:	83 70       	andi	r24, 0x03	; 3
            portb_vals = ((PINB & BITMASK_B) << 2);
 290:	03 b1       	in	r16, 0x03	; 3
 292:	10 e0       	ldi	r17, 0x00	; 0
 294:	00 0f       	add	r16, r16
 296:	11 1f       	adc	r17, r17
 298:	00 0f       	add	r16, r16
 29a:	11 1f       	adc	r17, r17
            printf("portb_vals %d   portd_vals %d ", portb_vals, portd_vals);
 29c:	1f 92       	push	r1
 29e:	8f 93       	push	r24
 2a0:	c8 01       	movw	r24, r16
 2a2:	99 27       	eor	r25, r25
 2a4:	9f 93       	push	r25
 2a6:	8f 93       	push	r24
 2a8:	8c e4       	ldi	r24, 0x4C	; 76
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	9f 93       	push	r25
 2ae:	8f 93       	push	r24
 2b0:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <printf>
 2b4:	8f e3       	ldi	r24, 0x3F	; 63
 2b6:	9c e9       	ldi	r25, 0x9C	; 156
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <main+0x198>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <main+0x19e>
 2be:	00 00       	nop
            
            _delay_ms(10);
            keypad_vals = portd_vals | portb_vals;
            keypad_vals &= 0b11110000;
 2c0:	00 7f       	andi	r16, 0xF0	; 240
            
            printf("PINB %d   ", PINB);
 2c2:	83 b1       	in	r24, 0x03	; 3
 2c4:	1f 92       	push	r1
 2c6:	8f 93       	push	r24
 2c8:	8b e6       	ldi	r24, 0x6B	; 107
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	9f 93       	push	r25
 2ce:	8f 93       	push	r24
 2d0:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <printf>
            printf("Key pressed %d   ", key_pressed);
 2d4:	bf 92       	push	r11
 2d6:	ff 92       	push	r15
 2d8:	86 e7       	ldi	r24, 0x76	; 118
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	9f 93       	push	r25
 2de:	8f 93       	push	r24
 2e0:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <printf>
 2e4:	ef e3       	ldi	r30, 0x3F	; 63
 2e6:	fc e9       	ldi	r31, 0x9C	; 156
 2e8:	31 97       	sbiw	r30, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <main+0x1c8>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <main+0x1ce>
 2ee:	00 00       	nop
            _delay_ms(10);
            key_pressed |= keypad_vals;    // The variable has now both row and column values
 2f0:	0f 29       	or	r16, r15
            printf("%d\n\r", key_pressed);
 2f2:	1f 92       	push	r1
 2f4:	0f 93       	push	r16
 2f6:	82 e4       	ldi	r24, 0x42	; 66
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	9f 93       	push	r25
 2fc:	8f 93       	push	r24
 2fe:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <printf>
            
            if (key_pressed == 0b01110111) {
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	f8 94       	cli
 306:	de bf       	out	0x3e, r29	; 62
 308:	0f be       	out	0x3f, r0	; 63
 30a:	cd bf       	out	0x3d, r28	; 61
 30c:	07 37       	cpi	r16, 0x77	; 119
 30e:	79 f4       	brne	.+30     	; 0x32e <main+0x20e>
                // Key 1 pressed
                given_password[idx] = '1';
 310:	81 e3       	ldi	r24, 0x31	; 49
 312:	f6 01       	movw	r30, r12
 314:	e8 57       	subi	r30, 0x78	; 120
 316:	fe 4f       	sbci	r31, 0xFE	; 254
 318:	80 83       	st	Z, r24
                if (password[idx] == '1') {
 31a:	f6 01       	movw	r30, r12
 31c:	e3 57       	subi	r30, 0x73	; 115
 31e:	fe 4f       	sbci	r31, 0xFE	; 254
 320:	80 81       	ld	r24, Z
 322:	81 33       	cpi	r24, 0x31	; 49
 324:	09 f0       	breq	.+2      	; 0x328 <main+0x208>
 326:	f5 c0       	rjmp	.+490    	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
                    led_test();
 328:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 32c:	f2 c0       	rjmp	.+484    	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b01111011) {
 32e:	0b 37       	cpi	r16, 0x7B	; 123
 330:	79 f4       	brne	.+30     	; 0x350 <main+0x230>
                // Key 2 pressed
                given_password[idx] = '2';
 332:	82 e3       	ldi	r24, 0x32	; 50
 334:	f6 01       	movw	r30, r12
 336:	e8 57       	subi	r30, 0x78	; 120
 338:	fe 4f       	sbci	r31, 0xFE	; 254
 33a:	80 83       	st	Z, r24
                if (password[idx] == '2') {
 33c:	f6 01       	movw	r30, r12
 33e:	e3 57       	subi	r30, 0x73	; 115
 340:	fe 4f       	sbci	r31, 0xFE	; 254
 342:	80 81       	ld	r24, Z
 344:	82 33       	cpi	r24, 0x32	; 50
 346:	09 f0       	breq	.+2      	; 0x34a <main+0x22a>
 348:	e4 c0       	rjmp	.+456    	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
                    led_test();
 34a:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 34e:	e1 c0       	rjmp	.+450    	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b01111101) {
 350:	0d 37       	cpi	r16, 0x7D	; 125
 352:	79 f4       	brne	.+30     	; 0x372 <main+0x252>
                // Key 3 pressed
                given_password[idx] = '3';
 354:	83 e3       	ldi	r24, 0x33	; 51
 356:	f6 01       	movw	r30, r12
 358:	e8 57       	subi	r30, 0x78	; 120
 35a:	fe 4f       	sbci	r31, 0xFE	; 254
 35c:	80 83       	st	Z, r24
                if (password[idx] == '3') {
 35e:	f6 01       	movw	r30, r12
 360:	e3 57       	subi	r30, 0x73	; 115
 362:	fe 4f       	sbci	r31, 0xFE	; 254
 364:	80 81       	ld	r24, Z
 366:	83 33       	cpi	r24, 0x33	; 51
 368:	09 f0       	breq	.+2      	; 0x36c <main+0x24c>
 36a:	d3 c0       	rjmp	.+422    	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
                    led_test();
 36c:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 370:	d0 c0       	rjmp	.+416    	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b01111110) {
 372:	0e 37       	cpi	r16, 0x7E	; 126
 374:	79 f4       	brne	.+30     	; 0x394 <main+0x274>
                // A
                given_password[idx] = 'A';
 376:	81 e4       	ldi	r24, 0x41	; 65
 378:	f6 01       	movw	r30, r12
 37a:	e8 57       	subi	r30, 0x78	; 120
 37c:	fe 4f       	sbci	r31, 0xFE	; 254
 37e:	80 83       	st	Z, r24
                if (password[idx] == 'A') {
 380:	f6 01       	movw	r30, r12
 382:	e3 57       	subi	r30, 0x73	; 115
 384:	fe 4f       	sbci	r31, 0xFE	; 254
 386:	80 81       	ld	r24, Z
 388:	81 34       	cpi	r24, 0x41	; 65
 38a:	09 f0       	breq	.+2      	; 0x38e <main+0x26e>
 38c:	c2 c0       	rjmp	.+388    	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
                    led_test();
 38e:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 392:	bf c0       	rjmp	.+382    	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b10110111) {
 394:	07 3b       	cpi	r16, 0xB7	; 183
 396:	79 f4       	brne	.+30     	; 0x3b6 <main+0x296>
                // 4
                given_password[idx] = '4';
 398:	84 e3       	ldi	r24, 0x34	; 52
 39a:	f6 01       	movw	r30, r12
 39c:	e8 57       	subi	r30, 0x78	; 120
 39e:	fe 4f       	sbci	r31, 0xFE	; 254
 3a0:	80 83       	st	Z, r24
                if (password[idx] == '4') {
 3a2:	f6 01       	movw	r30, r12
 3a4:	e3 57       	subi	r30, 0x73	; 115
 3a6:	fe 4f       	sbci	r31, 0xFE	; 254
 3a8:	80 81       	ld	r24, Z
 3aa:	84 33       	cpi	r24, 0x34	; 52
 3ac:	09 f0       	breq	.+2      	; 0x3b0 <main+0x290>
 3ae:	b1 c0       	rjmp	.+354    	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
                    led_test();
 3b0:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 3b4:	ae c0       	rjmp	.+348    	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b10111011) {
 3b6:	0b 3b       	cpi	r16, 0xBB	; 187
 3b8:	79 f4       	brne	.+30     	; 0x3d8 <main+0x2b8>
                // 5
                given_password[idx] = '5';
 3ba:	85 e3       	ldi	r24, 0x35	; 53
 3bc:	f6 01       	movw	r30, r12
 3be:	e8 57       	subi	r30, 0x78	; 120
 3c0:	fe 4f       	sbci	r31, 0xFE	; 254
 3c2:	80 83       	st	Z, r24
                if (password[idx] == '5') {
 3c4:	f6 01       	movw	r30, r12
 3c6:	e3 57       	subi	r30, 0x73	; 115
 3c8:	fe 4f       	sbci	r31, 0xFE	; 254
 3ca:	80 81       	ld	r24, Z
 3cc:	85 33       	cpi	r24, 0x35	; 53
 3ce:	09 f0       	breq	.+2      	; 0x3d2 <main+0x2b2>
 3d0:	a0 c0       	rjmp	.+320    	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
                    led_test();
 3d2:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 3d6:	9d c0       	rjmp	.+314    	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b10111101) {
 3d8:	0d 3b       	cpi	r16, 0xBD	; 189
 3da:	79 f4       	brne	.+30     	; 0x3fa <main+0x2da>
                // 6
                given_password[idx] = '6';
 3dc:	86 e3       	ldi	r24, 0x36	; 54
 3de:	f6 01       	movw	r30, r12
 3e0:	e8 57       	subi	r30, 0x78	; 120
 3e2:	fe 4f       	sbci	r31, 0xFE	; 254
 3e4:	80 83       	st	Z, r24
                if (password[idx] == '6') {
 3e6:	f6 01       	movw	r30, r12
 3e8:	e3 57       	subi	r30, 0x73	; 115
 3ea:	fe 4f       	sbci	r31, 0xFE	; 254
 3ec:	80 81       	ld	r24, Z
 3ee:	86 33       	cpi	r24, 0x36	; 54
 3f0:	09 f0       	breq	.+2      	; 0x3f4 <main+0x2d4>
 3f2:	8f c0       	rjmp	.+286    	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
                    led_test();
 3f4:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 3f8:	8c c0       	rjmp	.+280    	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b10111110) {
 3fa:	0e 3b       	cpi	r16, 0xBE	; 190
 3fc:	79 f4       	brne	.+30     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
                // B
                given_password[idx] = 'B';
 3fe:	82 e4       	ldi	r24, 0x42	; 66
 400:	f6 01       	movw	r30, r12
 402:	e8 57       	subi	r30, 0x78	; 120
 404:	fe 4f       	sbci	r31, 0xFE	; 254
 406:	80 83       	st	Z, r24
                if (password[idx] == 'B') {
 408:	f6 01       	movw	r30, r12
 40a:	e3 57       	subi	r30, 0x73	; 115
 40c:	fe 4f       	sbci	r31, 0xFE	; 254
 40e:	80 81       	ld	r24, Z
 410:	82 34       	cpi	r24, 0x42	; 66
 412:	09 f0       	breq	.+2      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 414:	7e c0       	rjmp	.+252    	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
                    led_test();
 416:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 41a:	7b c0       	rjmp	.+246    	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11010111) {
 41c:	07 3d       	cpi	r16, 0xD7	; 215
 41e:	79 f4       	brne	.+30     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
                // 7
                given_password[idx] = '7';
 420:	87 e3       	ldi	r24, 0x37	; 55
 422:	f6 01       	movw	r30, r12
 424:	e8 57       	subi	r30, 0x78	; 120
 426:	fe 4f       	sbci	r31, 0xFE	; 254
 428:	80 83       	st	Z, r24
                if (password[idx] == '7') {
 42a:	f6 01       	movw	r30, r12
 42c:	e3 57       	subi	r30, 0x73	; 115
 42e:	fe 4f       	sbci	r31, 0xFE	; 254
 430:	80 81       	ld	r24, Z
 432:	87 33       	cpi	r24, 0x37	; 55
 434:	09 f0       	breq	.+2      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 436:	6d c0       	rjmp	.+218    	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
                    led_test();
 438:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 43c:	6a c0       	rjmp	.+212    	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11011011) {
 43e:	0b 3d       	cpi	r16, 0xDB	; 219
 440:	79 f4       	brne	.+30     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
                // 8
                given_password[idx] = '8';
 442:	88 e3       	ldi	r24, 0x38	; 56
 444:	f6 01       	movw	r30, r12
 446:	e8 57       	subi	r30, 0x78	; 120
 448:	fe 4f       	sbci	r31, 0xFE	; 254
 44a:	80 83       	st	Z, r24
                if (password[idx] == '8') {
 44c:	f6 01       	movw	r30, r12
 44e:	e3 57       	subi	r30, 0x73	; 115
 450:	fe 4f       	sbci	r31, 0xFE	; 254
 452:	80 81       	ld	r24, Z
 454:	88 33       	cpi	r24, 0x38	; 56
 456:	09 f0       	breq	.+2      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 458:	5c c0       	rjmp	.+184    	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
                    led_test();
 45a:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 45e:	59 c0       	rjmp	.+178    	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11011101) {
 460:	0d 3d       	cpi	r16, 0xDD	; 221
 462:	79 f4       	brne	.+30     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
                // 9
                given_password[idx] = '9';
 464:	89 e3       	ldi	r24, 0x39	; 57
 466:	f6 01       	movw	r30, r12
 468:	e8 57       	subi	r30, 0x78	; 120
 46a:	fe 4f       	sbci	r31, 0xFE	; 254
 46c:	80 83       	st	Z, r24
                if (password[idx] == '9') {
 46e:	f6 01       	movw	r30, r12
 470:	e3 57       	subi	r30, 0x73	; 115
 472:	fe 4f       	sbci	r31, 0xFE	; 254
 474:	80 81       	ld	r24, Z
 476:	89 33       	cpi	r24, 0x39	; 57
 478:	09 f0       	breq	.+2      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 47a:	4b c0       	rjmp	.+150    	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
                    led_test();
 47c:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 480:	48 c0       	rjmp	.+144    	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11011110) {
 482:	0e 3d       	cpi	r16, 0xDE	; 222
 484:	71 f4       	brne	.+28     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
                // C
                given_password[idx] = 'C';
 486:	83 e4       	ldi	r24, 0x43	; 67
 488:	f6 01       	movw	r30, r12
 48a:	e8 57       	subi	r30, 0x78	; 120
 48c:	fe 4f       	sbci	r31, 0xFE	; 254
 48e:	80 83       	st	Z, r24
                if (password[idx] == 'C') {
 490:	f6 01       	movw	r30, r12
 492:	e3 57       	subi	r30, 0x73	; 115
 494:	fe 4f       	sbci	r31, 0xFE	; 254
 496:	80 81       	ld	r24, Z
 498:	83 34       	cpi	r24, 0x43	; 67
 49a:	d9 f5       	brne	.+118    	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
                    led_test();
 49c:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 4a0:	38 c0       	rjmp	.+112    	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11100111) {
 4a2:	07 3e       	cpi	r16, 0xE7	; 231
 4a4:	71 f4       	brne	.+28     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
                // *
                // TODO: make this the backspace button
                given_password[idx] = '*';
 4a6:	8a e2       	ldi	r24, 0x2A	; 42
 4a8:	f6 01       	movw	r30, r12
 4aa:	e8 57       	subi	r30, 0x78	; 120
 4ac:	fe 4f       	sbci	r31, 0xFE	; 254
 4ae:	80 83       	st	Z, r24
                if (password[idx] == '*') {
 4b0:	f6 01       	movw	r30, r12
 4b2:	e3 57       	subi	r30, 0x73	; 115
 4b4:	fe 4f       	sbci	r31, 0xFE	; 254
 4b6:	80 81       	ld	r24, Z
 4b8:	8a 32       	cpi	r24, 0x2A	; 42
 4ba:	59 f5       	brne	.+86     	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
                    led_test();
 4bc:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 4c0:	28 c0       	rjmp	.+80     	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11101011) {
 4c2:	0b 3e       	cpi	r16, 0xEB	; 235
 4c4:	71 f4       	brne	.+28     	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
                // 0
                given_password[idx] = '0';
 4c6:	80 e3       	ldi	r24, 0x30	; 48
 4c8:	f6 01       	movw	r30, r12
 4ca:	e8 57       	subi	r30, 0x78	; 120
 4cc:	fe 4f       	sbci	r31, 0xFE	; 254
 4ce:	80 83       	st	Z, r24
                if (password[idx] == '0') {
 4d0:	f6 01       	movw	r30, r12
 4d2:	e3 57       	subi	r30, 0x73	; 115
 4d4:	fe 4f       	sbci	r31, 0xFE	; 254
 4d6:	80 81       	ld	r24, Z
 4d8:	80 33       	cpi	r24, 0x30	; 48
 4da:	d9 f4       	brne	.+54     	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
                    led_test();
 4dc:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 4e0:	18 c0       	rjmp	.+48     	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11101101) {
 4e2:	0d 3e       	cpi	r16, 0xED	; 237
 4e4:	39 f4       	brne	.+14     	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
                // #
                compare(password, given_password);
 4e6:	68 e8       	ldi	r22, 0x88	; 136
 4e8:	71 e0       	ldi	r23, 0x01	; 1
 4ea:	8d e8       	ldi	r24, 0x8D	; 141
 4ec:	91 e0       	ldi	r25, 0x01	; 1
 4ee:	0e 94 78 00 	call	0xf0	; 0xf0 <compare>
 4f2:	0f c0       	rjmp	.+30     	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
                //printf("#");
                //given_password[idx] = '#';
                //led_test();
            }
            else if (key_pressed == 0b11101110) {
 4f4:	0e 3e       	cpi	r16, 0xEE	; 238
 4f6:	69 f4       	brne	.+26     	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
                // D
                given_password[idx] = 'D';
 4f8:	84 e4       	ldi	r24, 0x44	; 68
 4fa:	f6 01       	movw	r30, r12
 4fc:	e8 57       	subi	r30, 0x78	; 120
 4fe:	fe 4f       	sbci	r31, 0xFE	; 254
 500:	80 83       	st	Z, r24
                if (password[idx] == 'D') {
 502:	f6 01       	movw	r30, r12
 504:	e3 57       	subi	r30, 0x73	; 115
 506:	fe 4f       	sbci	r31, 0xFE	; 254
 508:	80 81       	ld	r24, Z
 50a:	84 34       	cpi	r24, 0x44	; 68
 50c:	11 f4       	brne	.+4      	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
                    led_test();
 50e:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
                }
            }
            
            /* Initialization for new loop */
            // Set digital pins 6-9 (rows) as input and 10-13 (columns) as output
            DDRD &= 0b00111111;
 512:	8a b1       	in	r24, 0x0a	; 10
 514:	8f 73       	andi	r24, 0x3F	; 63
 516:	8a b9       	out	0x0a, r24	; 10
            DDRB &= 0b11111100;
 518:	84 b1       	in	r24, 0x04	; 4
 51a:	8c 7f       	andi	r24, 0xFC	; 252
 51c:	84 b9       	out	0x04, r24	; 4
            DDRB |= 0b00111100;
 51e:	84 b1       	in	r24, 0x04	; 4
 520:	8c 63       	ori	r24, 0x3C	; 60
 522:	84 b9       	out	0x04, r24	; 4
 524:	8f e3       	ldi	r24, 0x3F	; 63
 526:	9c e9       	ldi	r25, 0x9C	; 156
 528:	01 97       	sbiw	r24, 0x01	; 1
 52a:	f1 f7       	brne	.-4      	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
 52c:	00 c0       	rjmp	.+0      	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
 52e:	00 00       	nop
            _delay_ms(10);
    
            // Power the row pins
            PORTD |= 0b11000000;
 530:	8b b1       	in	r24, 0x0b	; 11
 532:	80 6c       	ori	r24, 0xC0	; 192
 534:	8b b9       	out	0x0b, r24	; 11
            PORTB |= 0b00000011;
 536:	85 b1       	in	r24, 0x05	; 5
 538:	83 60       	ori	r24, 0x03	; 3
 53a:	85 b9       	out	0x05, r24	; 5
            PORTB &= 0b11000011;
 53c:	85 b1       	in	r24, 0x05	; 5
 53e:	83 7c       	andi	r24, 0xC3	; 195
 540:	85 b9       	out	0x05, r24	; 5
 542:	ef e3       	ldi	r30, 0x3F	; 63
 544:	fc e9       	ldi	r31, 0x9C	; 156
 546:	31 97       	sbiw	r30, 0x01	; 1
 548:	f1 f7       	brne	.-4      	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
 54a:	00 c0       	rjmp	.+0      	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
 54c:	00 00       	nop
            _delay_ms(10);

            
            key_pressed = 0;
            idx +=1;
 54e:	ff ef       	ldi	r31, 0xFF	; 255
 550:	cf 1a       	sub	r12, r31
 552:	df 0a       	sbc	r13, r31
 554:	8f e3       	ldi	r24, 0x3F	; 63
 556:	9c e9       	ldi	r25, 0x9C	; 156
 558:	01 97       	sbiw	r24, 0x01	; 1
 55a:	f1 f7       	brne	.-4      	; 0x558 <__EEPROM_REGION_LENGTH__+0x158>
 55c:	00 c0       	rjmp	.+0      	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
 55e:	00 00       	nop
 560:	2d ce       	rjmp	.-934    	; 0x1bc <main+0x9c>

00000562 <USART_init>:
#include <stdio.h>


void USART_init(unsigned int ubrr) {
	// Set baud rate
	UBRR0H = (unsigned char) (ubrr>>8);
 562:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char) ubrr;
 566:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 56a:	88 e1       	ldi	r24, 0x18	; 24
 56c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	// Set frame format: 8data, 2stop bit
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);
 570:	8e e0       	ldi	r24, 0x0E	; 14
 572:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 576:	08 95       	ret

00000578 <USART_transmit>:
}

void USART_transmit(unsigned char data) {
	// Wait for empty transmit buffer
	while(!(UCSR0A & (1<<UDRE0)));
 578:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 57c:	95 ff       	sbrs	r25, 5
 57e:	fc cf       	rjmp	.-8      	; 0x578 <USART_transmit>
    
	// Put data into buffer, send the data
	UDR0 = data;
 580:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 584:	08 95       	ret

00000586 <USART_receive>:
}

unsigned char USART_receive(void) {
	// Wait for data to be received
	while(!(UCSR0A & (1<<RXC0)));
 586:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 58a:	88 23       	and	r24, r24
 58c:	e4 f7       	brge	.-8      	; 0x586 <USART_receive>
	
	// Get and return received data from buffer
	return UDR0;
 58e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 592:	08 95       	ret

00000594 <strcmp>:
 594:	fb 01       	movw	r30, r22
 596:	dc 01       	movw	r26, r24
 598:	8d 91       	ld	r24, X+
 59a:	01 90       	ld	r0, Z+
 59c:	80 19       	sub	r24, r0
 59e:	01 10       	cpse	r0, r1
 5a0:	d9 f3       	breq	.-10     	; 0x598 <strcmp+0x4>
 5a2:	99 0b       	sbc	r25, r25
 5a4:	08 95       	ret

000005a6 <printf>:
 5a6:	a0 e0       	ldi	r26, 0x00	; 0
 5a8:	b0 e0       	ldi	r27, 0x00	; 0
 5aa:	e9 ed       	ldi	r30, 0xD9	; 217
 5ac:	f2 e0       	ldi	r31, 0x02	; 2
 5ae:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__prologue_saves__+0x20>
 5b2:	ae 01       	movw	r20, r28
 5b4:	4b 5f       	subi	r20, 0xFB	; 251
 5b6:	5f 4f       	sbci	r21, 0xFF	; 255
 5b8:	fa 01       	movw	r30, r20
 5ba:	61 91       	ld	r22, Z+
 5bc:	71 91       	ld	r23, Z+
 5be:	af 01       	movw	r20, r30
 5c0:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <__data_end+0x2>
 5c4:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <__data_end+0x3>
 5c8:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <vfprintf>
 5cc:	e2 e0       	ldi	r30, 0x02	; 2
 5ce:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <__epilogue_restores__+0x20>

000005d2 <vfprintf>:
 5d2:	ab e0       	ldi	r26, 0x0B	; 11
 5d4:	b0 e0       	ldi	r27, 0x00	; 0
 5d6:	ef ee       	ldi	r30, 0xEF	; 239
 5d8:	f2 e0       	ldi	r31, 0x02	; 2
 5da:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <__prologue_saves__>
 5de:	6c 01       	movw	r12, r24
 5e0:	7b 01       	movw	r14, r22
 5e2:	8a 01       	movw	r16, r20
 5e4:	fc 01       	movw	r30, r24
 5e6:	17 82       	std	Z+7, r1	; 0x07
 5e8:	16 82       	std	Z+6, r1	; 0x06
 5ea:	83 81       	ldd	r24, Z+3	; 0x03
 5ec:	81 ff       	sbrs	r24, 1
 5ee:	cc c1       	rjmp	.+920    	; 0x988 <__stack+0x89>
 5f0:	ce 01       	movw	r24, r28
 5f2:	01 96       	adiw	r24, 0x01	; 1
 5f4:	3c 01       	movw	r6, r24
 5f6:	f6 01       	movw	r30, r12
 5f8:	93 81       	ldd	r25, Z+3	; 0x03
 5fa:	f7 01       	movw	r30, r14
 5fc:	93 fd       	sbrc	r25, 3
 5fe:	85 91       	lpm	r24, Z+
 600:	93 ff       	sbrs	r25, 3
 602:	81 91       	ld	r24, Z+
 604:	7f 01       	movw	r14, r30
 606:	88 23       	and	r24, r24
 608:	09 f4       	brne	.+2      	; 0x60c <vfprintf+0x3a>
 60a:	ba c1       	rjmp	.+884    	; 0x980 <__stack+0x81>
 60c:	85 32       	cpi	r24, 0x25	; 37
 60e:	39 f4       	brne	.+14     	; 0x61e <vfprintf+0x4c>
 610:	93 fd       	sbrc	r25, 3
 612:	85 91       	lpm	r24, Z+
 614:	93 ff       	sbrs	r25, 3
 616:	81 91       	ld	r24, Z+
 618:	7f 01       	movw	r14, r30
 61a:	85 32       	cpi	r24, 0x25	; 37
 61c:	29 f4       	brne	.+10     	; 0x628 <vfprintf+0x56>
 61e:	b6 01       	movw	r22, r12
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <fputc>
 626:	e7 cf       	rjmp	.-50     	; 0x5f6 <vfprintf+0x24>
 628:	91 2c       	mov	r9, r1
 62a:	21 2c       	mov	r2, r1
 62c:	31 2c       	mov	r3, r1
 62e:	ff e1       	ldi	r31, 0x1F	; 31
 630:	f3 15       	cp	r31, r3
 632:	d8 f0       	brcs	.+54     	; 0x66a <vfprintf+0x98>
 634:	8b 32       	cpi	r24, 0x2B	; 43
 636:	79 f0       	breq	.+30     	; 0x656 <vfprintf+0x84>
 638:	38 f4       	brcc	.+14     	; 0x648 <vfprintf+0x76>
 63a:	80 32       	cpi	r24, 0x20	; 32
 63c:	79 f0       	breq	.+30     	; 0x65c <vfprintf+0x8a>
 63e:	83 32       	cpi	r24, 0x23	; 35
 640:	a1 f4       	brne	.+40     	; 0x66a <vfprintf+0x98>
 642:	23 2d       	mov	r18, r3
 644:	20 61       	ori	r18, 0x10	; 16
 646:	1d c0       	rjmp	.+58     	; 0x682 <vfprintf+0xb0>
 648:	8d 32       	cpi	r24, 0x2D	; 45
 64a:	61 f0       	breq	.+24     	; 0x664 <vfprintf+0x92>
 64c:	80 33       	cpi	r24, 0x30	; 48
 64e:	69 f4       	brne	.+26     	; 0x66a <vfprintf+0x98>
 650:	23 2d       	mov	r18, r3
 652:	21 60       	ori	r18, 0x01	; 1
 654:	16 c0       	rjmp	.+44     	; 0x682 <vfprintf+0xb0>
 656:	83 2d       	mov	r24, r3
 658:	82 60       	ori	r24, 0x02	; 2
 65a:	38 2e       	mov	r3, r24
 65c:	e3 2d       	mov	r30, r3
 65e:	e4 60       	ori	r30, 0x04	; 4
 660:	3e 2e       	mov	r3, r30
 662:	2a c0       	rjmp	.+84     	; 0x6b8 <vfprintf+0xe6>
 664:	f3 2d       	mov	r31, r3
 666:	f8 60       	ori	r31, 0x08	; 8
 668:	1d c0       	rjmp	.+58     	; 0x6a4 <vfprintf+0xd2>
 66a:	37 fc       	sbrc	r3, 7
 66c:	2d c0       	rjmp	.+90     	; 0x6c8 <vfprintf+0xf6>
 66e:	20 ed       	ldi	r18, 0xD0	; 208
 670:	28 0f       	add	r18, r24
 672:	2a 30       	cpi	r18, 0x0A	; 10
 674:	40 f0       	brcs	.+16     	; 0x686 <vfprintf+0xb4>
 676:	8e 32       	cpi	r24, 0x2E	; 46
 678:	b9 f4       	brne	.+46     	; 0x6a8 <vfprintf+0xd6>
 67a:	36 fc       	sbrc	r3, 6
 67c:	81 c1       	rjmp	.+770    	; 0x980 <__stack+0x81>
 67e:	23 2d       	mov	r18, r3
 680:	20 64       	ori	r18, 0x40	; 64
 682:	32 2e       	mov	r3, r18
 684:	19 c0       	rjmp	.+50     	; 0x6b8 <vfprintf+0xe6>
 686:	36 fe       	sbrs	r3, 6
 688:	06 c0       	rjmp	.+12     	; 0x696 <vfprintf+0xc4>
 68a:	8a e0       	ldi	r24, 0x0A	; 10
 68c:	98 9e       	mul	r9, r24
 68e:	20 0d       	add	r18, r0
 690:	11 24       	eor	r1, r1
 692:	92 2e       	mov	r9, r18
 694:	11 c0       	rjmp	.+34     	; 0x6b8 <vfprintf+0xe6>
 696:	ea e0       	ldi	r30, 0x0A	; 10
 698:	2e 9e       	mul	r2, r30
 69a:	20 0d       	add	r18, r0
 69c:	11 24       	eor	r1, r1
 69e:	22 2e       	mov	r2, r18
 6a0:	f3 2d       	mov	r31, r3
 6a2:	f0 62       	ori	r31, 0x20	; 32
 6a4:	3f 2e       	mov	r3, r31
 6a6:	08 c0       	rjmp	.+16     	; 0x6b8 <vfprintf+0xe6>
 6a8:	8c 36       	cpi	r24, 0x6C	; 108
 6aa:	21 f4       	brne	.+8      	; 0x6b4 <vfprintf+0xe2>
 6ac:	83 2d       	mov	r24, r3
 6ae:	80 68       	ori	r24, 0x80	; 128
 6b0:	38 2e       	mov	r3, r24
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <vfprintf+0xe6>
 6b4:	88 36       	cpi	r24, 0x68	; 104
 6b6:	41 f4       	brne	.+16     	; 0x6c8 <vfprintf+0xf6>
 6b8:	f7 01       	movw	r30, r14
 6ba:	93 fd       	sbrc	r25, 3
 6bc:	85 91       	lpm	r24, Z+
 6be:	93 ff       	sbrs	r25, 3
 6c0:	81 91       	ld	r24, Z+
 6c2:	7f 01       	movw	r14, r30
 6c4:	81 11       	cpse	r24, r1
 6c6:	b3 cf       	rjmp	.-154    	; 0x62e <vfprintf+0x5c>
 6c8:	98 2f       	mov	r25, r24
 6ca:	9f 7d       	andi	r25, 0xDF	; 223
 6cc:	95 54       	subi	r25, 0x45	; 69
 6ce:	93 30       	cpi	r25, 0x03	; 3
 6d0:	28 f4       	brcc	.+10     	; 0x6dc <vfprintf+0x10a>
 6d2:	0c 5f       	subi	r16, 0xFC	; 252
 6d4:	1f 4f       	sbci	r17, 0xFF	; 255
 6d6:	9f e3       	ldi	r25, 0x3F	; 63
 6d8:	99 83       	std	Y+1, r25	; 0x01
 6da:	0d c0       	rjmp	.+26     	; 0x6f6 <vfprintf+0x124>
 6dc:	83 36       	cpi	r24, 0x63	; 99
 6de:	31 f0       	breq	.+12     	; 0x6ec <vfprintf+0x11a>
 6e0:	83 37       	cpi	r24, 0x73	; 115
 6e2:	71 f0       	breq	.+28     	; 0x700 <vfprintf+0x12e>
 6e4:	83 35       	cpi	r24, 0x53	; 83
 6e6:	09 f0       	breq	.+2      	; 0x6ea <vfprintf+0x118>
 6e8:	59 c0       	rjmp	.+178    	; 0x79c <vfprintf+0x1ca>
 6ea:	21 c0       	rjmp	.+66     	; 0x72e <vfprintf+0x15c>
 6ec:	f8 01       	movw	r30, r16
 6ee:	80 81       	ld	r24, Z
 6f0:	89 83       	std	Y+1, r24	; 0x01
 6f2:	0e 5f       	subi	r16, 0xFE	; 254
 6f4:	1f 4f       	sbci	r17, 0xFF	; 255
 6f6:	88 24       	eor	r8, r8
 6f8:	83 94       	inc	r8
 6fa:	91 2c       	mov	r9, r1
 6fc:	53 01       	movw	r10, r6
 6fe:	13 c0       	rjmp	.+38     	; 0x726 <vfprintf+0x154>
 700:	28 01       	movw	r4, r16
 702:	f2 e0       	ldi	r31, 0x02	; 2
 704:	4f 0e       	add	r4, r31
 706:	51 1c       	adc	r5, r1
 708:	f8 01       	movw	r30, r16
 70a:	a0 80       	ld	r10, Z
 70c:	b1 80       	ldd	r11, Z+1	; 0x01
 70e:	36 fe       	sbrs	r3, 6
 710:	03 c0       	rjmp	.+6      	; 0x718 <vfprintf+0x146>
 712:	69 2d       	mov	r22, r9
 714:	70 e0       	ldi	r23, 0x00	; 0
 716:	02 c0       	rjmp	.+4      	; 0x71c <vfprintf+0x14a>
 718:	6f ef       	ldi	r22, 0xFF	; 255
 71a:	7f ef       	ldi	r23, 0xFF	; 255
 71c:	c5 01       	movw	r24, r10
 71e:	0e 94 d5 04 	call	0x9aa	; 0x9aa <strnlen>
 722:	4c 01       	movw	r8, r24
 724:	82 01       	movw	r16, r4
 726:	f3 2d       	mov	r31, r3
 728:	ff 77       	andi	r31, 0x7F	; 127
 72a:	3f 2e       	mov	r3, r31
 72c:	16 c0       	rjmp	.+44     	; 0x75a <vfprintf+0x188>
 72e:	28 01       	movw	r4, r16
 730:	22 e0       	ldi	r18, 0x02	; 2
 732:	42 0e       	add	r4, r18
 734:	51 1c       	adc	r5, r1
 736:	f8 01       	movw	r30, r16
 738:	a0 80       	ld	r10, Z
 73a:	b1 80       	ldd	r11, Z+1	; 0x01
 73c:	36 fe       	sbrs	r3, 6
 73e:	03 c0       	rjmp	.+6      	; 0x746 <vfprintf+0x174>
 740:	69 2d       	mov	r22, r9
 742:	70 e0       	ldi	r23, 0x00	; 0
 744:	02 c0       	rjmp	.+4      	; 0x74a <vfprintf+0x178>
 746:	6f ef       	ldi	r22, 0xFF	; 255
 748:	7f ef       	ldi	r23, 0xFF	; 255
 74a:	c5 01       	movw	r24, r10
 74c:	0e 94 ca 04 	call	0x994	; 0x994 <strnlen_P>
 750:	4c 01       	movw	r8, r24
 752:	f3 2d       	mov	r31, r3
 754:	f0 68       	ori	r31, 0x80	; 128
 756:	3f 2e       	mov	r3, r31
 758:	82 01       	movw	r16, r4
 75a:	33 fc       	sbrc	r3, 3
 75c:	1b c0       	rjmp	.+54     	; 0x794 <vfprintf+0x1c2>
 75e:	82 2d       	mov	r24, r2
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	88 16       	cp	r8, r24
 764:	99 06       	cpc	r9, r25
 766:	b0 f4       	brcc	.+44     	; 0x794 <vfprintf+0x1c2>
 768:	b6 01       	movw	r22, r12
 76a:	80 e2       	ldi	r24, 0x20	; 32
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <fputc>
 772:	2a 94       	dec	r2
 774:	f4 cf       	rjmp	.-24     	; 0x75e <vfprintf+0x18c>
 776:	f5 01       	movw	r30, r10
 778:	37 fc       	sbrc	r3, 7
 77a:	85 91       	lpm	r24, Z+
 77c:	37 fe       	sbrs	r3, 7
 77e:	81 91       	ld	r24, Z+
 780:	5f 01       	movw	r10, r30
 782:	b6 01       	movw	r22, r12
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <fputc>
 78a:	21 10       	cpse	r2, r1
 78c:	2a 94       	dec	r2
 78e:	21 e0       	ldi	r18, 0x01	; 1
 790:	82 1a       	sub	r8, r18
 792:	91 08       	sbc	r9, r1
 794:	81 14       	cp	r8, r1
 796:	91 04       	cpc	r9, r1
 798:	71 f7       	brne	.-36     	; 0x776 <vfprintf+0x1a4>
 79a:	e8 c0       	rjmp	.+464    	; 0x96c <__stack+0x6d>
 79c:	84 36       	cpi	r24, 0x64	; 100
 79e:	11 f0       	breq	.+4      	; 0x7a4 <vfprintf+0x1d2>
 7a0:	89 36       	cpi	r24, 0x69	; 105
 7a2:	41 f5       	brne	.+80     	; 0x7f4 <vfprintf+0x222>
 7a4:	f8 01       	movw	r30, r16
 7a6:	37 fe       	sbrs	r3, 7
 7a8:	07 c0       	rjmp	.+14     	; 0x7b8 <vfprintf+0x1e6>
 7aa:	60 81       	ld	r22, Z
 7ac:	71 81       	ldd	r23, Z+1	; 0x01
 7ae:	82 81       	ldd	r24, Z+2	; 0x02
 7b0:	93 81       	ldd	r25, Z+3	; 0x03
 7b2:	0c 5f       	subi	r16, 0xFC	; 252
 7b4:	1f 4f       	sbci	r17, 0xFF	; 255
 7b6:	08 c0       	rjmp	.+16     	; 0x7c8 <vfprintf+0x1f6>
 7b8:	60 81       	ld	r22, Z
 7ba:	71 81       	ldd	r23, Z+1	; 0x01
 7bc:	07 2e       	mov	r0, r23
 7be:	00 0c       	add	r0, r0
 7c0:	88 0b       	sbc	r24, r24
 7c2:	99 0b       	sbc	r25, r25
 7c4:	0e 5f       	subi	r16, 0xFE	; 254
 7c6:	1f 4f       	sbci	r17, 0xFF	; 255
 7c8:	f3 2d       	mov	r31, r3
 7ca:	ff 76       	andi	r31, 0x6F	; 111
 7cc:	3f 2e       	mov	r3, r31
 7ce:	97 ff       	sbrs	r25, 7
 7d0:	09 c0       	rjmp	.+18     	; 0x7e4 <vfprintf+0x212>
 7d2:	90 95       	com	r25
 7d4:	80 95       	com	r24
 7d6:	70 95       	com	r23
 7d8:	61 95       	neg	r22
 7da:	7f 4f       	sbci	r23, 0xFF	; 255
 7dc:	8f 4f       	sbci	r24, 0xFF	; 255
 7de:	9f 4f       	sbci	r25, 0xFF	; 255
 7e0:	f0 68       	ori	r31, 0x80	; 128
 7e2:	3f 2e       	mov	r3, r31
 7e4:	2a e0       	ldi	r18, 0x0A	; 10
 7e6:	30 e0       	ldi	r19, 0x00	; 0
 7e8:	a3 01       	movw	r20, r6
 7ea:	0e 94 1c 05 	call	0xa38	; 0xa38 <__ultoa_invert>
 7ee:	88 2e       	mov	r8, r24
 7f0:	86 18       	sub	r8, r6
 7f2:	45 c0       	rjmp	.+138    	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
 7f4:	85 37       	cpi	r24, 0x75	; 117
 7f6:	31 f4       	brne	.+12     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7f8:	23 2d       	mov	r18, r3
 7fa:	2f 7e       	andi	r18, 0xEF	; 239
 7fc:	b2 2e       	mov	r11, r18
 7fe:	2a e0       	ldi	r18, 0x0A	; 10
 800:	30 e0       	ldi	r19, 0x00	; 0
 802:	25 c0       	rjmp	.+74     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 804:	93 2d       	mov	r25, r3
 806:	99 7f       	andi	r25, 0xF9	; 249
 808:	b9 2e       	mov	r11, r25
 80a:	8f 36       	cpi	r24, 0x6F	; 111
 80c:	c1 f0       	breq	.+48     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 80e:	18 f4       	brcc	.+6      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 810:	88 35       	cpi	r24, 0x58	; 88
 812:	79 f0       	breq	.+30     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 814:	b5 c0       	rjmp	.+362    	; 0x980 <__stack+0x81>
 816:	80 37       	cpi	r24, 0x70	; 112
 818:	19 f0       	breq	.+6      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 81a:	88 37       	cpi	r24, 0x78	; 120
 81c:	21 f0       	breq	.+8      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 81e:	b0 c0       	rjmp	.+352    	; 0x980 <__stack+0x81>
 820:	e9 2f       	mov	r30, r25
 822:	e0 61       	ori	r30, 0x10	; 16
 824:	be 2e       	mov	r11, r30
 826:	b4 fe       	sbrs	r11, 4
 828:	0d c0       	rjmp	.+26     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 82a:	fb 2d       	mov	r31, r11
 82c:	f4 60       	ori	r31, 0x04	; 4
 82e:	bf 2e       	mov	r11, r31
 830:	09 c0       	rjmp	.+18     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 832:	34 fe       	sbrs	r3, 4
 834:	0a c0       	rjmp	.+20     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 836:	29 2f       	mov	r18, r25
 838:	26 60       	ori	r18, 0x06	; 6
 83a:	b2 2e       	mov	r11, r18
 83c:	06 c0       	rjmp	.+12     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 83e:	28 e0       	ldi	r18, 0x08	; 8
 840:	30 e0       	ldi	r19, 0x00	; 0
 842:	05 c0       	rjmp	.+10     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 844:	20 e1       	ldi	r18, 0x10	; 16
 846:	30 e0       	ldi	r19, 0x00	; 0
 848:	02 c0       	rjmp	.+4      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 84a:	20 e1       	ldi	r18, 0x10	; 16
 84c:	32 e0       	ldi	r19, 0x02	; 2
 84e:	f8 01       	movw	r30, r16
 850:	b7 fe       	sbrs	r11, 7
 852:	07 c0       	rjmp	.+14     	; 0x862 <__DATA_REGION_LENGTH__+0x62>
 854:	60 81       	ld	r22, Z
 856:	71 81       	ldd	r23, Z+1	; 0x01
 858:	82 81       	ldd	r24, Z+2	; 0x02
 85a:	93 81       	ldd	r25, Z+3	; 0x03
 85c:	0c 5f       	subi	r16, 0xFC	; 252
 85e:	1f 4f       	sbci	r17, 0xFF	; 255
 860:	06 c0       	rjmp	.+12     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 862:	60 81       	ld	r22, Z
 864:	71 81       	ldd	r23, Z+1	; 0x01
 866:	80 e0       	ldi	r24, 0x00	; 0
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	0e 5f       	subi	r16, 0xFE	; 254
 86c:	1f 4f       	sbci	r17, 0xFF	; 255
 86e:	a3 01       	movw	r20, r6
 870:	0e 94 1c 05 	call	0xa38	; 0xa38 <__ultoa_invert>
 874:	88 2e       	mov	r8, r24
 876:	86 18       	sub	r8, r6
 878:	fb 2d       	mov	r31, r11
 87a:	ff 77       	andi	r31, 0x7F	; 127
 87c:	3f 2e       	mov	r3, r31
 87e:	36 fe       	sbrs	r3, 6
 880:	0d c0       	rjmp	.+26     	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
 882:	23 2d       	mov	r18, r3
 884:	2e 7f       	andi	r18, 0xFE	; 254
 886:	a2 2e       	mov	r10, r18
 888:	89 14       	cp	r8, r9
 88a:	58 f4       	brcc	.+22     	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
 88c:	34 fe       	sbrs	r3, 4
 88e:	0b c0       	rjmp	.+22     	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
 890:	32 fc       	sbrc	r3, 2
 892:	09 c0       	rjmp	.+18     	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
 894:	83 2d       	mov	r24, r3
 896:	8e 7e       	andi	r24, 0xEE	; 238
 898:	a8 2e       	mov	r10, r24
 89a:	05 c0       	rjmp	.+10     	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
 89c:	b8 2c       	mov	r11, r8
 89e:	a3 2c       	mov	r10, r3
 8a0:	03 c0       	rjmp	.+6      	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 8a2:	b8 2c       	mov	r11, r8
 8a4:	01 c0       	rjmp	.+2      	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 8a6:	b9 2c       	mov	r11, r9
 8a8:	a4 fe       	sbrs	r10, 4
 8aa:	0f c0       	rjmp	.+30     	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 8ac:	fe 01       	movw	r30, r28
 8ae:	e8 0d       	add	r30, r8
 8b0:	f1 1d       	adc	r31, r1
 8b2:	80 81       	ld	r24, Z
 8b4:	80 33       	cpi	r24, 0x30	; 48
 8b6:	21 f4       	brne	.+8      	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
 8b8:	9a 2d       	mov	r25, r10
 8ba:	99 7e       	andi	r25, 0xE9	; 233
 8bc:	a9 2e       	mov	r10, r25
 8be:	09 c0       	rjmp	.+18     	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
 8c0:	a2 fe       	sbrs	r10, 2
 8c2:	06 c0       	rjmp	.+12     	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
 8c4:	b3 94       	inc	r11
 8c6:	b3 94       	inc	r11
 8c8:	04 c0       	rjmp	.+8      	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
 8ca:	8a 2d       	mov	r24, r10
 8cc:	86 78       	andi	r24, 0x86	; 134
 8ce:	09 f0       	breq	.+2      	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
 8d0:	b3 94       	inc	r11
 8d2:	a3 fc       	sbrc	r10, 3
 8d4:	11 c0       	rjmp	.+34     	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
 8d6:	a0 fe       	sbrs	r10, 0
 8d8:	06 c0       	rjmp	.+12     	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
 8da:	b2 14       	cp	r11, r2
 8dc:	88 f4       	brcc	.+34     	; 0x900 <__stack+0x1>
 8de:	28 0c       	add	r2, r8
 8e0:	92 2c       	mov	r9, r2
 8e2:	9b 18       	sub	r9, r11
 8e4:	0e c0       	rjmp	.+28     	; 0x902 <__stack+0x3>
 8e6:	b2 14       	cp	r11, r2
 8e8:	60 f4       	brcc	.+24     	; 0x902 <__stack+0x3>
 8ea:	b6 01       	movw	r22, r12
 8ec:	80 e2       	ldi	r24, 0x20	; 32
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <fputc>
 8f4:	b3 94       	inc	r11
 8f6:	f7 cf       	rjmp	.-18     	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
 8f8:	b2 14       	cp	r11, r2
 8fa:	18 f4       	brcc	.+6      	; 0x902 <__stack+0x3>
 8fc:	2b 18       	sub	r2, r11
 8fe:	02 c0       	rjmp	.+4      	; 0x904 <__stack+0x5>
 900:	98 2c       	mov	r9, r8
 902:	21 2c       	mov	r2, r1
 904:	a4 fe       	sbrs	r10, 4
 906:	10 c0       	rjmp	.+32     	; 0x928 <__stack+0x29>
 908:	b6 01       	movw	r22, r12
 90a:	80 e3       	ldi	r24, 0x30	; 48
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <fputc>
 912:	a2 fe       	sbrs	r10, 2
 914:	17 c0       	rjmp	.+46     	; 0x944 <__stack+0x45>
 916:	a1 fc       	sbrc	r10, 1
 918:	03 c0       	rjmp	.+6      	; 0x920 <__stack+0x21>
 91a:	88 e7       	ldi	r24, 0x78	; 120
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	02 c0       	rjmp	.+4      	; 0x924 <__stack+0x25>
 920:	88 e5       	ldi	r24, 0x58	; 88
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	b6 01       	movw	r22, r12
 926:	0c c0       	rjmp	.+24     	; 0x940 <__stack+0x41>
 928:	8a 2d       	mov	r24, r10
 92a:	86 78       	andi	r24, 0x86	; 134
 92c:	59 f0       	breq	.+22     	; 0x944 <__stack+0x45>
 92e:	a1 fe       	sbrs	r10, 1
 930:	02 c0       	rjmp	.+4      	; 0x936 <__stack+0x37>
 932:	8b e2       	ldi	r24, 0x2B	; 43
 934:	01 c0       	rjmp	.+2      	; 0x938 <__stack+0x39>
 936:	80 e2       	ldi	r24, 0x20	; 32
 938:	a7 fc       	sbrc	r10, 7
 93a:	8d e2       	ldi	r24, 0x2D	; 45
 93c:	b6 01       	movw	r22, r12
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <fputc>
 944:	89 14       	cp	r8, r9
 946:	38 f4       	brcc	.+14     	; 0x956 <__stack+0x57>
 948:	b6 01       	movw	r22, r12
 94a:	80 e3       	ldi	r24, 0x30	; 48
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <fputc>
 952:	9a 94       	dec	r9
 954:	f7 cf       	rjmp	.-18     	; 0x944 <__stack+0x45>
 956:	8a 94       	dec	r8
 958:	f3 01       	movw	r30, r6
 95a:	e8 0d       	add	r30, r8
 95c:	f1 1d       	adc	r31, r1
 95e:	80 81       	ld	r24, Z
 960:	b6 01       	movw	r22, r12
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <fputc>
 968:	81 10       	cpse	r8, r1
 96a:	f5 cf       	rjmp	.-22     	; 0x956 <__stack+0x57>
 96c:	22 20       	and	r2, r2
 96e:	09 f4       	brne	.+2      	; 0x972 <__stack+0x73>
 970:	42 ce       	rjmp	.-892    	; 0x5f6 <vfprintf+0x24>
 972:	b6 01       	movw	r22, r12
 974:	80 e2       	ldi	r24, 0x20	; 32
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <fputc>
 97c:	2a 94       	dec	r2
 97e:	f6 cf       	rjmp	.-20     	; 0x96c <__stack+0x6d>
 980:	f6 01       	movw	r30, r12
 982:	86 81       	ldd	r24, Z+6	; 0x06
 984:	97 81       	ldd	r25, Z+7	; 0x07
 986:	02 c0       	rjmp	.+4      	; 0x98c <__stack+0x8d>
 988:	8f ef       	ldi	r24, 0xFF	; 255
 98a:	9f ef       	ldi	r25, 0xFF	; 255
 98c:	2b 96       	adiw	r28, 0x0b	; 11
 98e:	e2 e1       	ldi	r30, 0x12	; 18
 990:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <__epilogue_restores__>

00000994 <strnlen_P>:
 994:	fc 01       	movw	r30, r24
 996:	05 90       	lpm	r0, Z+
 998:	61 50       	subi	r22, 0x01	; 1
 99a:	70 40       	sbci	r23, 0x00	; 0
 99c:	01 10       	cpse	r0, r1
 99e:	d8 f7       	brcc	.-10     	; 0x996 <strnlen_P+0x2>
 9a0:	80 95       	com	r24
 9a2:	90 95       	com	r25
 9a4:	8e 0f       	add	r24, r30
 9a6:	9f 1f       	adc	r25, r31
 9a8:	08 95       	ret

000009aa <strnlen>:
 9aa:	fc 01       	movw	r30, r24
 9ac:	61 50       	subi	r22, 0x01	; 1
 9ae:	70 40       	sbci	r23, 0x00	; 0
 9b0:	01 90       	ld	r0, Z+
 9b2:	01 10       	cpse	r0, r1
 9b4:	d8 f7       	brcc	.-10     	; 0x9ac <strnlen+0x2>
 9b6:	80 95       	com	r24
 9b8:	90 95       	com	r25
 9ba:	8e 0f       	add	r24, r30
 9bc:	9f 1f       	adc	r25, r31
 9be:	08 95       	ret

000009c0 <fputc>:
 9c0:	0f 93       	push	r16
 9c2:	1f 93       	push	r17
 9c4:	cf 93       	push	r28
 9c6:	df 93       	push	r29
 9c8:	fb 01       	movw	r30, r22
 9ca:	23 81       	ldd	r18, Z+3	; 0x03
 9cc:	21 fd       	sbrc	r18, 1
 9ce:	03 c0       	rjmp	.+6      	; 0x9d6 <fputc+0x16>
 9d0:	8f ef       	ldi	r24, 0xFF	; 255
 9d2:	9f ef       	ldi	r25, 0xFF	; 255
 9d4:	2c c0       	rjmp	.+88     	; 0xa2e <fputc+0x6e>
 9d6:	22 ff       	sbrs	r18, 2
 9d8:	16 c0       	rjmp	.+44     	; 0xa06 <fputc+0x46>
 9da:	46 81       	ldd	r20, Z+6	; 0x06
 9dc:	57 81       	ldd	r21, Z+7	; 0x07
 9de:	24 81       	ldd	r18, Z+4	; 0x04
 9e0:	35 81       	ldd	r19, Z+5	; 0x05
 9e2:	42 17       	cp	r20, r18
 9e4:	53 07       	cpc	r21, r19
 9e6:	44 f4       	brge	.+16     	; 0x9f8 <fputc+0x38>
 9e8:	a0 81       	ld	r26, Z
 9ea:	b1 81       	ldd	r27, Z+1	; 0x01
 9ec:	9d 01       	movw	r18, r26
 9ee:	2f 5f       	subi	r18, 0xFF	; 255
 9f0:	3f 4f       	sbci	r19, 0xFF	; 255
 9f2:	31 83       	std	Z+1, r19	; 0x01
 9f4:	20 83       	st	Z, r18
 9f6:	8c 93       	st	X, r24
 9f8:	26 81       	ldd	r18, Z+6	; 0x06
 9fa:	37 81       	ldd	r19, Z+7	; 0x07
 9fc:	2f 5f       	subi	r18, 0xFF	; 255
 9fe:	3f 4f       	sbci	r19, 0xFF	; 255
 a00:	37 83       	std	Z+7, r19	; 0x07
 a02:	26 83       	std	Z+6, r18	; 0x06
 a04:	14 c0       	rjmp	.+40     	; 0xa2e <fputc+0x6e>
 a06:	8b 01       	movw	r16, r22
 a08:	ec 01       	movw	r28, r24
 a0a:	fb 01       	movw	r30, r22
 a0c:	00 84       	ldd	r0, Z+8	; 0x08
 a0e:	f1 85       	ldd	r31, Z+9	; 0x09
 a10:	e0 2d       	mov	r30, r0
 a12:	09 95       	icall
 a14:	89 2b       	or	r24, r25
 a16:	e1 f6       	brne	.-72     	; 0x9d0 <fputc+0x10>
 a18:	d8 01       	movw	r26, r16
 a1a:	16 96       	adiw	r26, 0x06	; 6
 a1c:	8d 91       	ld	r24, X+
 a1e:	9c 91       	ld	r25, X
 a20:	17 97       	sbiw	r26, 0x07	; 7
 a22:	01 96       	adiw	r24, 0x01	; 1
 a24:	17 96       	adiw	r26, 0x07	; 7
 a26:	9c 93       	st	X, r25
 a28:	8e 93       	st	-X, r24
 a2a:	16 97       	sbiw	r26, 0x06	; 6
 a2c:	ce 01       	movw	r24, r28
 a2e:	df 91       	pop	r29
 a30:	cf 91       	pop	r28
 a32:	1f 91       	pop	r17
 a34:	0f 91       	pop	r16
 a36:	08 95       	ret

00000a38 <__ultoa_invert>:
 a38:	fa 01       	movw	r30, r20
 a3a:	aa 27       	eor	r26, r26
 a3c:	28 30       	cpi	r18, 0x08	; 8
 a3e:	51 f1       	breq	.+84     	; 0xa94 <__ultoa_invert+0x5c>
 a40:	20 31       	cpi	r18, 0x10	; 16
 a42:	81 f1       	breq	.+96     	; 0xaa4 <__ultoa_invert+0x6c>
 a44:	e8 94       	clt
 a46:	6f 93       	push	r22
 a48:	6e 7f       	andi	r22, 0xFE	; 254
 a4a:	6e 5f       	subi	r22, 0xFE	; 254
 a4c:	7f 4f       	sbci	r23, 0xFF	; 255
 a4e:	8f 4f       	sbci	r24, 0xFF	; 255
 a50:	9f 4f       	sbci	r25, 0xFF	; 255
 a52:	af 4f       	sbci	r26, 0xFF	; 255
 a54:	b1 e0       	ldi	r27, 0x01	; 1
 a56:	3e d0       	rcall	.+124    	; 0xad4 <__ultoa_invert+0x9c>
 a58:	b4 e0       	ldi	r27, 0x04	; 4
 a5a:	3c d0       	rcall	.+120    	; 0xad4 <__ultoa_invert+0x9c>
 a5c:	67 0f       	add	r22, r23
 a5e:	78 1f       	adc	r23, r24
 a60:	89 1f       	adc	r24, r25
 a62:	9a 1f       	adc	r25, r26
 a64:	a1 1d       	adc	r26, r1
 a66:	68 0f       	add	r22, r24
 a68:	79 1f       	adc	r23, r25
 a6a:	8a 1f       	adc	r24, r26
 a6c:	91 1d       	adc	r25, r1
 a6e:	a1 1d       	adc	r26, r1
 a70:	6a 0f       	add	r22, r26
 a72:	71 1d       	adc	r23, r1
 a74:	81 1d       	adc	r24, r1
 a76:	91 1d       	adc	r25, r1
 a78:	a1 1d       	adc	r26, r1
 a7a:	20 d0       	rcall	.+64     	; 0xabc <__ultoa_invert+0x84>
 a7c:	09 f4       	brne	.+2      	; 0xa80 <__ultoa_invert+0x48>
 a7e:	68 94       	set
 a80:	3f 91       	pop	r19
 a82:	2a e0       	ldi	r18, 0x0A	; 10
 a84:	26 9f       	mul	r18, r22
 a86:	11 24       	eor	r1, r1
 a88:	30 19       	sub	r19, r0
 a8a:	30 5d       	subi	r19, 0xD0	; 208
 a8c:	31 93       	st	Z+, r19
 a8e:	de f6       	brtc	.-74     	; 0xa46 <__ultoa_invert+0xe>
 a90:	cf 01       	movw	r24, r30
 a92:	08 95       	ret
 a94:	46 2f       	mov	r20, r22
 a96:	47 70       	andi	r20, 0x07	; 7
 a98:	40 5d       	subi	r20, 0xD0	; 208
 a9a:	41 93       	st	Z+, r20
 a9c:	b3 e0       	ldi	r27, 0x03	; 3
 a9e:	0f d0       	rcall	.+30     	; 0xabe <__ultoa_invert+0x86>
 aa0:	c9 f7       	brne	.-14     	; 0xa94 <__ultoa_invert+0x5c>
 aa2:	f6 cf       	rjmp	.-20     	; 0xa90 <__ultoa_invert+0x58>
 aa4:	46 2f       	mov	r20, r22
 aa6:	4f 70       	andi	r20, 0x0F	; 15
 aa8:	40 5d       	subi	r20, 0xD0	; 208
 aaa:	4a 33       	cpi	r20, 0x3A	; 58
 aac:	18 f0       	brcs	.+6      	; 0xab4 <__ultoa_invert+0x7c>
 aae:	49 5d       	subi	r20, 0xD9	; 217
 ab0:	31 fd       	sbrc	r19, 1
 ab2:	40 52       	subi	r20, 0x20	; 32
 ab4:	41 93       	st	Z+, r20
 ab6:	02 d0       	rcall	.+4      	; 0xabc <__ultoa_invert+0x84>
 ab8:	a9 f7       	brne	.-22     	; 0xaa4 <__ultoa_invert+0x6c>
 aba:	ea cf       	rjmp	.-44     	; 0xa90 <__ultoa_invert+0x58>
 abc:	b4 e0       	ldi	r27, 0x04	; 4
 abe:	a6 95       	lsr	r26
 ac0:	97 95       	ror	r25
 ac2:	87 95       	ror	r24
 ac4:	77 95       	ror	r23
 ac6:	67 95       	ror	r22
 ac8:	ba 95       	dec	r27
 aca:	c9 f7       	brne	.-14     	; 0xabe <__ultoa_invert+0x86>
 acc:	00 97       	sbiw	r24, 0x00	; 0
 ace:	61 05       	cpc	r22, r1
 ad0:	71 05       	cpc	r23, r1
 ad2:	08 95       	ret
 ad4:	9b 01       	movw	r18, r22
 ad6:	ac 01       	movw	r20, r24
 ad8:	0a 2e       	mov	r0, r26
 ada:	06 94       	lsr	r0
 adc:	57 95       	ror	r21
 ade:	47 95       	ror	r20
 ae0:	37 95       	ror	r19
 ae2:	27 95       	ror	r18
 ae4:	ba 95       	dec	r27
 ae6:	c9 f7       	brne	.-14     	; 0xada <__ultoa_invert+0xa2>
 ae8:	62 0f       	add	r22, r18
 aea:	73 1f       	adc	r23, r19
 aec:	84 1f       	adc	r24, r20
 aee:	95 1f       	adc	r25, r21
 af0:	a0 1d       	adc	r26, r0
 af2:	08 95       	ret

00000af4 <__prologue_saves__>:
 af4:	2f 92       	push	r2
 af6:	3f 92       	push	r3
 af8:	4f 92       	push	r4
 afa:	5f 92       	push	r5
 afc:	6f 92       	push	r6
 afe:	7f 92       	push	r7
 b00:	8f 92       	push	r8
 b02:	9f 92       	push	r9
 b04:	af 92       	push	r10
 b06:	bf 92       	push	r11
 b08:	cf 92       	push	r12
 b0a:	df 92       	push	r13
 b0c:	ef 92       	push	r14
 b0e:	ff 92       	push	r15
 b10:	0f 93       	push	r16
 b12:	1f 93       	push	r17
 b14:	cf 93       	push	r28
 b16:	df 93       	push	r29
 b18:	cd b7       	in	r28, 0x3d	; 61
 b1a:	de b7       	in	r29, 0x3e	; 62
 b1c:	ca 1b       	sub	r28, r26
 b1e:	db 0b       	sbc	r29, r27
 b20:	0f b6       	in	r0, 0x3f	; 63
 b22:	f8 94       	cli
 b24:	de bf       	out	0x3e, r29	; 62
 b26:	0f be       	out	0x3f, r0	; 63
 b28:	cd bf       	out	0x3d, r28	; 61
 b2a:	09 94       	ijmp

00000b2c <__epilogue_restores__>:
 b2c:	2a 88       	ldd	r2, Y+18	; 0x12
 b2e:	39 88       	ldd	r3, Y+17	; 0x11
 b30:	48 88       	ldd	r4, Y+16	; 0x10
 b32:	5f 84       	ldd	r5, Y+15	; 0x0f
 b34:	6e 84       	ldd	r6, Y+14	; 0x0e
 b36:	7d 84       	ldd	r7, Y+13	; 0x0d
 b38:	8c 84       	ldd	r8, Y+12	; 0x0c
 b3a:	9b 84       	ldd	r9, Y+11	; 0x0b
 b3c:	aa 84       	ldd	r10, Y+10	; 0x0a
 b3e:	b9 84       	ldd	r11, Y+9	; 0x09
 b40:	c8 84       	ldd	r12, Y+8	; 0x08
 b42:	df 80       	ldd	r13, Y+7	; 0x07
 b44:	ee 80       	ldd	r14, Y+6	; 0x06
 b46:	fd 80       	ldd	r15, Y+5	; 0x05
 b48:	0c 81       	ldd	r16, Y+4	; 0x04
 b4a:	1b 81       	ldd	r17, Y+3	; 0x03
 b4c:	aa 81       	ldd	r26, Y+2	; 0x02
 b4e:	b9 81       	ldd	r27, Y+1	; 0x01
 b50:	ce 0f       	add	r28, r30
 b52:	d1 1d       	adc	r29, r1
 b54:	0f b6       	in	r0, 0x3f	; 63
 b56:	f8 94       	cli
 b58:	de bf       	out	0x3e, r29	; 62
 b5a:	0f be       	out	0x3f, r0	; 63
 b5c:	cd bf       	out	0x3d, r28	; 61
 b5e:	ed 01       	movw	r28, r26
 b60:	08 95       	ret

00000b62 <_exit>:
 b62:	f8 94       	cli

00000b64 <__stop_program>:
 b64:	ff cf       	rjmp	.-2      	; 0xb64 <__stop_program>
