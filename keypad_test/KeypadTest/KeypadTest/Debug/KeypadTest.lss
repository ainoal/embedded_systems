
KeypadTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000031a  0000038e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000031a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bb8  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000706  00000000  00000000  00000fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000440  00000000  00000000  000016ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ec  00000000  00000000  00001b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000038c  00000000  00000000  00001f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000022d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e1       	ldi	r30, 0x1A	; 26
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  8e:	0c 94 8b 01 	jmp	0x316	; 0x316 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <led_test>:
        }
    }    
}

void led_test(){
    PORTB &= ~(1 << PB0);
  96:	85 b1       	in	r24, 0x05	; 5
  98:	8e 7f       	andi	r24, 0xFE	; 254
  9a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	2f e3       	ldi	r18, 0x3F	; 63
  9e:	8d e0       	ldi	r24, 0x0D	; 13
  a0:	93 e0       	ldi	r25, 0x03	; 3
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <led_test+0xc>
  aa:	00 c0       	rjmp	.+0      	; 0xac <led_test+0x16>
  ac:	00 00       	nop
    _delay_ms(1000);
    PORTB |= (1 << PB0);
  ae:	85 b1       	in	r24, 0x05	; 5
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	85 b9       	out	0x05, r24	; 5
  b4:	2f e3       	ldi	r18, 0x3F	; 63
  b6:	8d e0       	ldi	r24, 0x0D	; 13
  b8:	93 e0       	ldi	r25, 0x03	; 3
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <led_test+0x24>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <led_test+0x2e>
  c4:	00 00       	nop
    _delay_ms(1000);
    PORTB &= ~(1 << PB0);
  c6:	85 b1       	in	r24, 0x05	; 5
  c8:	8e 7f       	andi	r24, 0xFE	; 254
  ca:	85 b9       	out	0x05, r24	; 5
  cc:	2f e3       	ldi	r18, 0x3F	; 63
  ce:	8d e0       	ldi	r24, 0x0D	; 13
  d0:	93 e0       	ldi	r25, 0x03	; 3
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <led_test+0x3c>
  da:	00 c0       	rjmp	.+0      	; 0xdc <led_test+0x46>
  dc:	00 00       	nop
  de:	08 95       	ret

000000e0 <main>:


int main(void)
{
    /********************testing****************************/
    DDRB |= (1 << PB0);
  e0:	84 b1       	in	r24, 0x04	; 4
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	84 b9       	out	0x04, r24	; 4
    DDRB |= (1 << PB1);
  e6:	84 b1       	in	r24, 0x04	; 4
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	84 b9       	out	0x04, r24	; 4
    DDRB |= (1 << PB2);
  ec:	84 b1       	in	r24, 0x04	; 4
  ee:	84 60       	ori	r24, 0x04	; 4
  f0:	84 b9       	out	0x04, r24	; 4
    DDRB |= (1 << PB3);
  f2:	84 b1       	in	r24, 0x04	; 4
  f4:	88 60       	ori	r24, 0x08	; 8
  f6:	84 b9       	out	0x04, r24	; 4
    
    char *password = "0123";
    int idx = 0;
    
    // Set digital pins 0-3 (rows) as output and 4-7 (columns) as input
    DDRD |= 0b00001111;
  f8:	8a b1       	in	r24, 0x0a	; 10
  fa:	8f 60       	ori	r24, 0x0F	; 15
  fc:	8a b9       	out	0x0a, r24	; 10
  fe:	89 ef       	ldi	r24, 0xF9	; 249
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <main+0x22>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x28>
 108:	00 00       	nop
    _delay_ms(1);
    
    PORTD = 0b11110000;    // Power the row pins
 10a:	80 ef       	ldi	r24, 0xF0	; 240
 10c:	8b b9       	out	0x0b, r24	; 11
    DDRB |= (1 << PB2);
    DDRB |= (1 << PB3);
    /******************************************************/
    
    char *password = "0123";
    int idx = 0;
 10e:	c0 e0       	ldi	r28, 0x00	; 0
 110:	d0 e0       	ldi	r29, 0x00	; 0
    
    int key_pressed = 0;
    
    while (1) 
    {           
        if (PIND != 0b11110000) {     // If any of row pins goes low (!??)
 112:	89 b1       	in	r24, 0x09	; 9
 114:	80 3f       	cpi	r24, 0xF0	; 240
 116:	e9 f3       	breq	.-6      	; 0x112 <main+0x32>
            key_pressed = PIND;
 118:	29 b1       	in	r18, 0x09	; 9
 11a:	83 ec       	ldi	r24, 0xC3	; 195
 11c:	99 e0       	ldi	r25, 0x09	; 9
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0x3e>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x44>
 124:	00 00       	nop
            _delay_ms(10);
            DDRD ^= 0b11111111;      // Make rows as inputs and columns as outputs
 126:	9a b1       	in	r25, 0x0a	; 10
 128:	90 95       	com	r25
 12a:	9a b9       	out	0x0a, r25	; 10
 12c:	89 ef       	ldi	r24, 0xF9	; 249
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <main+0x50>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x56>
 136:	00 00       	nop
            _delay_ms(1);
             PORTD ^= 0b11111111;        // Power the columns
 138:	9b b1       	in	r25, 0x0b	; 11
 13a:	90 95       	com	r25
 13c:	9b b9       	out	0x0b, r25	; 11
 13e:	87 ea       	ldi	r24, 0xA7	; 167
 140:	91 e6       	ldi	r25, 0x61	; 97
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <main+0x62>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0x68>
 148:	00 00       	nop
            _delay_ms(100);
            
            key_pressed |= PIND;    // The variable has now both row and column values as 0, others as 1
 14a:	89 b1       	in	r24, 0x09	; 9
 14c:	82 2b       	or	r24, r18
 14e:	90 e0       	ldi	r25, 0x00	; 0
            
            if (key_pressed == 0b01110111) {
 150:	87 37       	cpi	r24, 0x77	; 119
 152:	91 05       	cpc	r25, r1
 154:	51 f4       	brne	.+20     	; 0x16a <main+0x8a>
                // Key 1 pressed
                if (password[idx] == '1') {
 156:	fe 01       	movw	r30, r28
 158:	e0 50       	subi	r30, 0x00	; 0
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	80 81       	ld	r24, Z
 15e:	81 33       	cpi	r24, 0x31	; 49
 160:	09 f0       	breq	.+2      	; 0x164 <main+0x84>
 162:	bf c0       	rjmp	.+382    	; 0x2e2 <main+0x202>
                    led_test();
 164:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
 168:	bc c0       	rjmp	.+376    	; 0x2e2 <main+0x202>
                }
                else {                
                    ;
                }                    
            } 
            else if (key_pressed == 0b01111011) {
 16a:	8b 37       	cpi	r24, 0x7B	; 123
 16c:	91 05       	cpc	r25, r1
 16e:	51 f4       	brne	.+20     	; 0x184 <main+0xa4>
                // Key 2 pressed
                if (password[idx] == '2') {
 170:	fe 01       	movw	r30, r28
 172:	e0 50       	subi	r30, 0x00	; 0
 174:	ff 4f       	sbci	r31, 0xFF	; 255
 176:	80 81       	ld	r24, Z
 178:	82 33       	cpi	r24, 0x32	; 50
 17a:	09 f0       	breq	.+2      	; 0x17e <main+0x9e>
 17c:	b2 c0       	rjmp	.+356    	; 0x2e2 <main+0x202>
                    led_test();
 17e:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
 182:	af c0       	rjmp	.+350    	; 0x2e2 <main+0x202>
                }
                else {
                    ;
                }
            } 
            else if (key_pressed == 0b01111101) {
 184:	8d 37       	cpi	r24, 0x7D	; 125
 186:	91 05       	cpc	r25, r1
 188:	51 f4       	brne	.+20     	; 0x19e <main+0xbe>
                // Key 3 pressed
                if (password[idx] == '3') {
 18a:	fe 01       	movw	r30, r28
 18c:	e0 50       	subi	r30, 0x00	; 0
 18e:	ff 4f       	sbci	r31, 0xFF	; 255
 190:	80 81       	ld	r24, Z
 192:	83 33       	cpi	r24, 0x33	; 51
 194:	09 f0       	breq	.+2      	; 0x198 <main+0xb8>
 196:	a5 c0       	rjmp	.+330    	; 0x2e2 <main+0x202>
                    led_test();
 198:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
 19c:	a2 c0       	rjmp	.+324    	; 0x2e2 <main+0x202>
                }
                else {
                    ;
                }
            } 
            else if (key_pressed == 0b01111110) {
 19e:	8e 37       	cpi	r24, 0x7E	; 126
 1a0:	91 05       	cpc	r25, r1
 1a2:	51 f4       	brne	.+20     	; 0x1b8 <main+0xd8>
                // A
                if (password[idx] == 'A') {
 1a4:	fe 01       	movw	r30, r28
 1a6:	e0 50       	subi	r30, 0x00	; 0
 1a8:	ff 4f       	sbci	r31, 0xFF	; 255
 1aa:	80 81       	ld	r24, Z
 1ac:	81 34       	cpi	r24, 0x41	; 65
 1ae:	09 f0       	breq	.+2      	; 0x1b2 <main+0xd2>
 1b0:	98 c0       	rjmp	.+304    	; 0x2e2 <main+0x202>
                    led_test();
 1b2:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
 1b6:	95 c0       	rjmp	.+298    	; 0x2e2 <main+0x202>
                }
                else {
                    ;
                }
            } 
            else if (key_pressed == 0b10110111) {
 1b8:	87 3b       	cpi	r24, 0xB7	; 183
 1ba:	91 05       	cpc	r25, r1
 1bc:	51 f4       	brne	.+20     	; 0x1d2 <main+0xf2>
                // 4
                if (password[idx] == '4') {
 1be:	fe 01       	movw	r30, r28
 1c0:	e0 50       	subi	r30, 0x00	; 0
 1c2:	ff 4f       	sbci	r31, 0xFF	; 255
 1c4:	80 81       	ld	r24, Z
 1c6:	84 33       	cpi	r24, 0x34	; 52
 1c8:	09 f0       	breq	.+2      	; 0x1cc <main+0xec>
 1ca:	8b c0       	rjmp	.+278    	; 0x2e2 <main+0x202>
                    led_test();
 1cc:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
 1d0:	88 c0       	rjmp	.+272    	; 0x2e2 <main+0x202>
                }
                else {
                    ;
                }
            } 
            else if (key_pressed == 0b10111011) {
 1d2:	8b 3b       	cpi	r24, 0xBB	; 187
 1d4:	91 05       	cpc	r25, r1
 1d6:	51 f4       	brne	.+20     	; 0x1ec <main+0x10c>
                // 5
                if (password[idx] == '5') {
 1d8:	fe 01       	movw	r30, r28
 1da:	e0 50       	subi	r30, 0x00	; 0
 1dc:	ff 4f       	sbci	r31, 0xFF	; 255
 1de:	80 81       	ld	r24, Z
 1e0:	85 33       	cpi	r24, 0x35	; 53
 1e2:	09 f0       	breq	.+2      	; 0x1e6 <main+0x106>
 1e4:	7e c0       	rjmp	.+252    	; 0x2e2 <main+0x202>
                    led_test();
 1e6:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
 1ea:	7b c0       	rjmp	.+246    	; 0x2e2 <main+0x202>
                }
                else {
                    ;
                }
            } 
            else if (key_pressed == 0b10111101) {
 1ec:	8d 3b       	cpi	r24, 0xBD	; 189
 1ee:	91 05       	cpc	r25, r1
 1f0:	51 f4       	brne	.+20     	; 0x206 <main+0x126>
                // 6
                if (password[idx] == '6') {
 1f2:	fe 01       	movw	r30, r28
 1f4:	e0 50       	subi	r30, 0x00	; 0
 1f6:	ff 4f       	sbci	r31, 0xFF	; 255
 1f8:	80 81       	ld	r24, Z
 1fa:	86 33       	cpi	r24, 0x36	; 54
 1fc:	09 f0       	breq	.+2      	; 0x200 <main+0x120>
 1fe:	71 c0       	rjmp	.+226    	; 0x2e2 <main+0x202>
                    led_test();
 200:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
 204:	6e c0       	rjmp	.+220    	; 0x2e2 <main+0x202>
                }
                else {
                    ;
                }
            } 
            else if (key_pressed == 0b10111110) {
 206:	8e 3b       	cpi	r24, 0xBE	; 190
 208:	91 05       	cpc	r25, r1
 20a:	51 f4       	brne	.+20     	; 0x220 <main+0x140>
                // B
                if (password[idx] == 'B') {
 20c:	fe 01       	movw	r30, r28
 20e:	e0 50       	subi	r30, 0x00	; 0
 210:	ff 4f       	sbci	r31, 0xFF	; 255
 212:	80 81       	ld	r24, Z
 214:	82 34       	cpi	r24, 0x42	; 66
 216:	09 f0       	breq	.+2      	; 0x21a <main+0x13a>
 218:	64 c0       	rjmp	.+200    	; 0x2e2 <main+0x202>
                    led_test();
 21a:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
 21e:	61 c0       	rjmp	.+194    	; 0x2e2 <main+0x202>
                }
                else {
                    ;
                }
            } 
            else if (key_pressed == 0b11010111) {
 220:	87 3d       	cpi	r24, 0xD7	; 215
 222:	91 05       	cpc	r25, r1
 224:	51 f4       	brne	.+20     	; 0x23a <main+0x15a>
                // 7
                if (password[idx] == '7') {
 226:	fe 01       	movw	r30, r28
 228:	e0 50       	subi	r30, 0x00	; 0
 22a:	ff 4f       	sbci	r31, 0xFF	; 255
 22c:	80 81       	ld	r24, Z
 22e:	87 33       	cpi	r24, 0x37	; 55
 230:	09 f0       	breq	.+2      	; 0x234 <main+0x154>
 232:	57 c0       	rjmp	.+174    	; 0x2e2 <main+0x202>
                    led_test();
 234:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
 238:	54 c0       	rjmp	.+168    	; 0x2e2 <main+0x202>
                }
                else {
                    ;
                }
            } 
            else if (key_pressed == 0b11011011) {
 23a:	8b 3d       	cpi	r24, 0xDB	; 219
 23c:	91 05       	cpc	r25, r1
 23e:	51 f4       	brne	.+20     	; 0x254 <main+0x174>
                // 8
                if (password[idx] == '8') {
 240:	fe 01       	movw	r30, r28
 242:	e0 50       	subi	r30, 0x00	; 0
 244:	ff 4f       	sbci	r31, 0xFF	; 255
 246:	80 81       	ld	r24, Z
 248:	88 33       	cpi	r24, 0x38	; 56
 24a:	09 f0       	breq	.+2      	; 0x24e <main+0x16e>
 24c:	4a c0       	rjmp	.+148    	; 0x2e2 <main+0x202>
                    led_test();
 24e:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
 252:	47 c0       	rjmp	.+142    	; 0x2e2 <main+0x202>
                }
                else {
                    ;
                }
            } 
            else if (key_pressed == 0b11011101) {
 254:	8d 3d       	cpi	r24, 0xDD	; 221
 256:	91 05       	cpc	r25, r1
 258:	49 f4       	brne	.+18     	; 0x26c <main+0x18c>
                // 9
                if (password[idx] == '9') {
 25a:	fe 01       	movw	r30, r28
 25c:	e0 50       	subi	r30, 0x00	; 0
 25e:	ff 4f       	sbci	r31, 0xFF	; 255
 260:	80 81       	ld	r24, Z
 262:	89 33       	cpi	r24, 0x39	; 57
 264:	f1 f5       	brne	.+124    	; 0x2e2 <main+0x202>
                    led_test();
 266:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
 26a:	3b c0       	rjmp	.+118    	; 0x2e2 <main+0x202>
                }
                else {
                    ;
                }
            } 
            else if (key_pressed == 0b11011110) {
 26c:	8e 3d       	cpi	r24, 0xDE	; 222
 26e:	91 05       	cpc	r25, r1
 270:	49 f4       	brne	.+18     	; 0x284 <main+0x1a4>
                // C
                if (password[idx] == 'C') {
 272:	fe 01       	movw	r30, r28
 274:	e0 50       	subi	r30, 0x00	; 0
 276:	ff 4f       	sbci	r31, 0xFF	; 255
 278:	80 81       	ld	r24, Z
 27a:	83 34       	cpi	r24, 0x43	; 67
 27c:	91 f5       	brne	.+100    	; 0x2e2 <main+0x202>
                    led_test();
 27e:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
 282:	2f c0       	rjmp	.+94     	; 0x2e2 <main+0x202>
                }
                else {
                    ;
                }
            } 
            else if (key_pressed == 0b11100111) {
 284:	87 3e       	cpi	r24, 0xE7	; 231
 286:	91 05       	cpc	r25, r1
 288:	49 f4       	brne	.+18     	; 0x29c <main+0x1bc>
                // *
                if (password[idx] == '*') {
 28a:	fe 01       	movw	r30, r28
 28c:	e0 50       	subi	r30, 0x00	; 0
 28e:	ff 4f       	sbci	r31, 0xFF	; 255
 290:	80 81       	ld	r24, Z
 292:	8a 32       	cpi	r24, 0x2A	; 42
 294:	31 f5       	brne	.+76     	; 0x2e2 <main+0x202>
                    led_test();
 296:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
 29a:	23 c0       	rjmp	.+70     	; 0x2e2 <main+0x202>
                }
                else {
                    ;
                }
            } 
            else if (key_pressed == 0b11101011) {
 29c:	8b 3e       	cpi	r24, 0xEB	; 235
 29e:	91 05       	cpc	r25, r1
 2a0:	49 f4       	brne	.+18     	; 0x2b4 <main+0x1d4>
                // 0
                if (password[idx] == '0') {
 2a2:	fe 01       	movw	r30, r28
 2a4:	e0 50       	subi	r30, 0x00	; 0
 2a6:	ff 4f       	sbci	r31, 0xFF	; 255
 2a8:	80 81       	ld	r24, Z
 2aa:	80 33       	cpi	r24, 0x30	; 48
 2ac:	d1 f4       	brne	.+52     	; 0x2e2 <main+0x202>
                    led_test();
 2ae:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
 2b2:	17 c0       	rjmp	.+46     	; 0x2e2 <main+0x202>
                }
                else {
                    ;
                }
            } 
            else if (key_pressed == 0b11101101) {
 2b4:	8d 3e       	cpi	r24, 0xED	; 237
 2b6:	91 05       	cpc	r25, r1
 2b8:	49 f4       	brne	.+18     	; 0x2cc <main+0x1ec>
                // #
                if (password[idx] == '#') {
 2ba:	fe 01       	movw	r30, r28
 2bc:	e0 50       	subi	r30, 0x00	; 0
 2be:	ff 4f       	sbci	r31, 0xFF	; 255
 2c0:	80 81       	ld	r24, Z
 2c2:	83 32       	cpi	r24, 0x23	; 35
 2c4:	71 f4       	brne	.+28     	; 0x2e2 <main+0x202>
                    led_test();
 2c6:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
 2ca:	0b c0       	rjmp	.+22     	; 0x2e2 <main+0x202>
                }
                else {
                    ;
                }
            } 
            else if (key_pressed == 0b11101110) {
 2cc:	8e 3e       	cpi	r24, 0xEE	; 238
 2ce:	91 05       	cpc	r25, r1
 2d0:	41 f4       	brne	.+16     	; 0x2e2 <main+0x202>
                // D
                if (password[idx] == 'D') {
 2d2:	fe 01       	movw	r30, r28
 2d4:	e0 50       	subi	r30, 0x00	; 0
 2d6:	ff 4f       	sbci	r31, 0xFF	; 255
 2d8:	80 81       	ld	r24, Z
 2da:	84 34       	cpi	r24, 0x44	; 68
 2dc:	11 f4       	brne	.+4      	; 0x2e2 <main+0x202>
                    led_test();
 2de:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
                else {
                    ;
                }
            }
            
            if (PIND != 0b11110000) {
 2e2:	89 b1       	in	r24, 0x09	; 9
 2e4:	80 3f       	cpi	r24, 0xF0	; 240
 2e6:	19 f0       	breq	.+6      	; 0x2ee <main+0x20e>
                
                while (PIND != 0b00001111){
 2e8:	89 b1       	in	r24, 0x09	; 9
 2ea:	8f 30       	cpi	r24, 0x0F	; 15
 2ec:	e9 f7       	brne	.-6      	; 0x2e8 <main+0x208>
                ;
                //wait
                //led_test();
            }*/
            
            DDRD ^= 0b11111111;
 2ee:	8a b1       	in	r24, 0x0a	; 10
 2f0:	80 95       	com	r24
 2f2:	8a b9       	out	0x0a, r24	; 10
 2f4:	89 ef       	ldi	r24, 0xF9	; 249
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <main+0x218>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <main+0x21e>
 2fe:	00 00       	nop
            _delay_ms(1);
            PORTD ^= 0b11111111;
 300:	8b b1       	in	r24, 0x0b	; 11
 302:	80 95       	com	r24
 304:	8b b9       	out	0x0b, r24	; 11
            key_pressed = 0;
            idx +=1;
 306:	21 96       	adiw	r28, 0x01	; 1
 308:	83 ec       	ldi	r24, 0xC3	; 195
 30a:	99 e0       	ldi	r25, 0x09	; 9
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <main+0x22c>
 310:	00 c0       	rjmp	.+0      	; 0x312 <main+0x232>
 312:	00 00       	nop
 314:	fe ce       	rjmp	.-516    	; 0x112 <main+0x32>

00000316 <_exit>:
 316:	f8 94       	cli

00000318 <__stop_program>:
 318:	ff cf       	rjmp	.-2      	; 0x318 <__stop_program>
