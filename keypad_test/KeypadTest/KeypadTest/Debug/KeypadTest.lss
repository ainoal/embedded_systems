
KeypadTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  00000b06  00000b9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800158  00800158  00000bf2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000bf2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000db0  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087b  00000000  00000000  00001aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000681  00000000  00000000  0000231b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  0000299c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a3  00000000  00000000  00002a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000499  00000000  00000000  00002ed7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00003370  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e0       	ldi	r30, 0x06	; 6
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 35       	cpi	r26, 0x58	; 88
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e5       	ldi	r26, 0x58	; 88
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 35       	cpi	r26, 0x5E	; 94
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 90 00 	call	0x120	; 0x120 <main>
  9e:	0c 94 81 05 	jmp	0xb02	; 0xb02 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <led_test>:

#define BITMASK_D 0b11000000
#define BITMASK_B 0b00111111

void led_test(void){
    PORTD &= ~(1 << PD3);
  a6:	8b b1       	in	r24, 0x0b	; 11
  a8:	87 7f       	andi	r24, 0xF7	; 247
  aa:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	83 ed       	ldi	r24, 0xD3	; 211
  b0:	90 e3       	ldi	r25, 0x30	; 48
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <led_test+0xc>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <led_test+0x16>
  bc:	00 00       	nop
    _delay_ms(1000);
    PORTD |= (1 << PD3);
  be:	8b b1       	in	r24, 0x0b	; 11
  c0:	88 60       	ori	r24, 0x08	; 8
  c2:	8b b9       	out	0x0b, r24	; 11
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	83 ed       	ldi	r24, 0xD3	; 211
  c8:	90 e3       	ldi	r25, 0x30	; 48
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <led_test+0x24>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <led_test+0x2e>
  d4:	00 00       	nop
    _delay_ms(1000);
    PORTD &= ~(1 << PD3);
  d6:	8b b1       	in	r24, 0x0b	; 11
  d8:	87 7f       	andi	r24, 0xF7	; 247
  da:	8b b9       	out	0x0b, r24	; 11
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	83 ed       	ldi	r24, 0xD3	; 211
  e0:	90 e3       	ldi	r25, 0x30	; 48
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <led_test+0x3c>
  ea:	00 c0       	rjmp	.+0      	; 0xec <led_test+0x46>
  ec:	00 00       	nop
  ee:	08 95       	ret

000000f0 <compare>:
    _delay_ms(1000);
}

int compare(char *password, char *given_password){
    if (strcmp(password, given_password) != 0) {
  f0:	0e 94 9a 02 	call	0x534	; 0x534 <strcmp>
  f4:	89 2b       	or	r24, r25
  f6:	89 f0       	breq	.+34     	; 0x11a <compare+0x2a>
        led_test();
  f8:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
 104:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
 108:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
 10c:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
 110:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        return 0;
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	08 95       	ret
    }
    else {
        return 1;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
    }
}
 11e:	08 95       	ret

00000120 <main>:

int main(void)
{
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	6c 97       	sbiw	r28, 0x1c	; 28
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	f8 94       	cli
 12e:	de bf       	out	0x3e, r29	; 62
 130:	0f be       	out	0x3f, r0	; 63
 132:	cd bf       	out	0x3d, r28	; 61
    /********************testing****************************/
    
    char input;
    FILE uart_output = FDEV_SETUP_STREAM(USART_transmit, NULL, _FDEV_SETUP_WRITE);
 134:	8e e0       	ldi	r24, 0x0E	; 14
 136:	9e 01       	movw	r18, r28
 138:	2f 5f       	subi	r18, 0xFF	; 255
 13a:	3f 4f       	sbci	r19, 0xFF	; 255
 13c:	79 01       	movw	r14, r18
 13e:	f9 01       	movw	r30, r18
 140:	28 2f       	mov	r18, r24
 142:	11 92       	st	Z+, r1
 144:	2a 95       	dec	r18
 146:	e9 f7       	brne	.-6      	; 0x142 <main+0x22>
 148:	92 e0       	ldi	r25, 0x02	; 2
 14a:	9c 83       	std	Y+4, r25	; 0x04
 14c:	2c e8       	ldi	r18, 0x8C	; 140
 14e:	32 e0       	ldi	r19, 0x02	; 2
 150:	3a 87       	std	Y+10, r19	; 0x0a
 152:	29 87       	std	Y+9, r18	; 0x09
    FILE uart_input = FDEV_SETUP_STREAM(NULL, USART_receive, _FDEV_SETUP_READ);
 154:	8e 01       	movw	r16, r28
 156:	01 5f       	subi	r16, 0xF1	; 241
 158:	1f 4f       	sbci	r17, 0xFF	; 255
 15a:	f8 01       	movw	r30, r16
 15c:	11 92       	st	Z+, r1
 15e:	8a 95       	dec	r24
 160:	e9 f7       	brne	.-6      	; 0x15c <main+0x3c>
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	8a 8b       	std	Y+18, r24	; 0x12
 166:	83 e9       	ldi	r24, 0x93	; 147
 168:	92 e0       	ldi	r25, 0x02	; 2
 16a:	9a 8f       	std	Y+26, r25	; 0x1a
 16c:	89 8f       	std	Y+25, r24	; 0x19
        
    USART_init(UBRR);
 16e:	87 e6       	ldi	r24, 0x67	; 103
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 81 02 	call	0x502	; 0x502 <USART_init>
        
    stdout = &uart_output;
 176:	e8 e5       	ldi	r30, 0x58	; 88
 178:	f1 e0       	ldi	r31, 0x01	; 1
 17a:	f3 82       	std	Z+3, r15	; 0x03
 17c:	e2 82       	std	Z+2, r14	; 0x02
    stdin = &uart_input;
 17e:	11 83       	std	Z+1, r17	; 0x01
 180:	00 83       	st	Z, r16
    char* password = "0123";
    char* given_password = "xxxx";
    int idx = 0;
    
    // Set digital pins 6-9 (rows) as output and 10-13 (columns) as input
    DDRD &= 0b00111111;
 182:	8a b1       	in	r24, 0x0a	; 10
 184:	8f 73       	andi	r24, 0x3F	; 63
 186:	8a b9       	out	0x0a, r24	; 10
    DDRB &= 0b11111100;
 188:	84 b1       	in	r24, 0x04	; 4
 18a:	8c 7f       	andi	r24, 0xFC	; 252
 18c:	84 b9       	out	0x04, r24	; 4
    DDRB |= 0b00111100;
 18e:	84 b1       	in	r24, 0x04	; 4
 190:	8c 63       	ori	r24, 0x3C	; 60
 192:	84 b9       	out	0x04, r24	; 4
 194:	ff ef       	ldi	r31, 0xFF	; 255
 196:	21 ee       	ldi	r18, 0xE1	; 225
 198:	34 e0       	ldi	r19, 0x04	; 4
 19a:	f1 50       	subi	r31, 0x01	; 1
 19c:	20 40       	sbci	r18, 0x00	; 0
 19e:	30 40       	sbci	r19, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <main+0x7a>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <main+0x84>
 1a4:	00 00       	nop
    _delay_ms(100);
    
    // Power the row pins
    PORTD |= 0b11000000;
 1a6:	8b b1       	in	r24, 0x0b	; 11
 1a8:	80 6c       	ori	r24, 0xC0	; 192
 1aa:	8b b9       	out	0x0b, r24	; 11
    PORTB |= 0b00000011;
 1ac:	85 b1       	in	r24, 0x05	; 5
 1ae:	83 60       	ori	r24, 0x03	; 3
 1b0:	85 b9       	out	0x05, r24	; 5
 1b2:	8f ef       	ldi	r24, 0xFF	; 255
 1b4:	91 ee       	ldi	r25, 0xE1	; 225
 1b6:	e4 e0       	ldi	r30, 0x04	; 4
 1b8:	81 50       	subi	r24, 0x01	; 1
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	e0 40       	sbci	r30, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <main+0x98>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0xa2>
 1c2:	00 00       	nop
    stdin = &uart_input;
    /******************************************************/
    
    char* password = "0123";
    char* given_password = "xxxx";
    int idx = 0;
 1c4:	c1 2c       	mov	r12, r1
 1c6:	d1 2c       	mov	r13, r1
 1c8:	ff ef       	ldi	r31, 0xFF	; 255
 1ca:	21 ee       	ldi	r18, 0xE1	; 225
 1cc:	34 e0       	ldi	r19, 0x04	; 4
 1ce:	f1 50       	subi	r31, 0x01	; 1
 1d0:	20 40       	sbci	r18, 0x00	; 0
 1d2:	30 40       	sbci	r19, 0x00	; 0
 1d4:	e1 f7       	brne	.-8      	; 0x1ce <main+0xae>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <main+0xb8>
 1d8:	00 00       	nop
    uint8_t portd_vals;
    
    while (1) 
    { 
        _delay_ms(100);
        portd_vals = ((PIND & BITMASK_D) >> 6);
 1da:	f9 b0       	in	r15, 0x09	; 9
 1dc:	f6 94       	lsr	r15
 1de:	f6 94       	lsr	r15
 1e0:	f6 94       	lsr	r15
 1e2:	f6 94       	lsr	r15
 1e4:	f6 94       	lsr	r15
 1e6:	f6 94       	lsr	r15
        portb_vals = ((PINB & BITMASK_B) << 2);
 1e8:	03 b1       	in	r16, 0x03	; 3
 1ea:	10 e0       	ldi	r17, 0x00	; 0
 1ec:	00 0f       	add	r16, r16
 1ee:	11 1f       	adc	r17, r17
 1f0:	00 0f       	add	r16, r16
 1f2:	11 1f       	adc	r17, r17
        keypad_vals = portd_vals | portb_vals;
 1f4:	ef 2c       	mov	r14, r15
 1f6:	e0 2a       	or	r14, r16
        
        printf("Keypad_vals %d", keypad_vals);
 1f8:	1f 92       	push	r1
 1fa:	ef 92       	push	r14
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	9f 93       	push	r25
 202:	8f 93       	push	r24
 204:	0e 94 a3 02 	call	0x546	; 0x546 <printf>
        //keypad_vals &= 0b00001111;
        printf("kp_vals: %d  portd_vals: %d  portb_vals: %d  PIND: %d\n\r", keypad_vals, portd_vals, portb_vals, PIND);
 208:	89 b1       	in	r24, 0x09	; 9
 20a:	1f 92       	push	r1
 20c:	8f 93       	push	r24
 20e:	11 27       	eor	r17, r17
 210:	1f 93       	push	r17
 212:	0f 93       	push	r16
 214:	1f 92       	push	r1
 216:	ff 92       	push	r15
 218:	1f 92       	push	r1
 21a:	ef 92       	push	r14
 21c:	8f e0       	ldi	r24, 0x0F	; 15
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	9f 93       	push	r25
 222:	8f 93       	push	r24
 224:	0e 94 a3 02 	call	0x546	; 0x546 <printf>
        if (keypad_vals != 0b00001111) {     // If any of column pins goes high
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	f8 94       	cli
 22c:	de bf       	out	0x3e, r29	; 62
 22e:	0f be       	out	0x3f, r0	; 63
 230:	cd bf       	out	0x3d, r28	; 61
 232:	9f e0       	ldi	r25, 0x0F	; 15
 234:	e9 16       	cp	r14, r25
 236:	41 f2       	breq	.-112    	; 0x1c8 <main+0xa8>
            printf("loop\n\r");
 238:	87 e4       	ldi	r24, 0x47	; 71
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	9f 93       	push	r25
 23e:	8f 93       	push	r24
 240:	0e 94 a3 02 	call	0x546	; 0x546 <printf>
 244:	ef e3       	ldi	r30, 0x3F	; 63
 246:	fc e9       	ldi	r31, 0x9C	; 156
 248:	31 97       	sbiw	r30, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <main+0x128>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <main+0x12e>
 24e:	00 00       	nop
            key_pressed = keypad_vals;
            _delay_ms(10);
            
            // Make rows as inputs and columns as outputs
            DDRD ^= 0b00000011;
 250:	9a b1       	in	r25, 0x0a	; 10
 252:	83 e0       	ldi	r24, 0x03	; 3
 254:	89 27       	eor	r24, r25
 256:	8a b9       	out	0x0a, r24	; 10
            DDRB ^= 0b00111111;
 258:	94 b1       	in	r25, 0x04	; 4
 25a:	8f e3       	ldi	r24, 0x3F	; 63
 25c:	89 27       	eor	r24, r25
 25e:	84 b9       	out	0x04, r24	; 4
 260:	8f e9       	ldi	r24, 0x9F	; 159
 262:	9f e0       	ldi	r25, 0x0F	; 15
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <main+0x144>
 268:	00 c0       	rjmp	.+0      	; 0x26a <main+0x14a>
 26a:	00 00       	nop
            
            _delay_ms(1);
             PORTB ^= 0b00001111;        // Power the columns
 26c:	95 b1       	in	r25, 0x05	; 5
 26e:	8f e0       	ldi	r24, 0x0F	; 15
 270:	89 27       	eor	r24, r25
 272:	85 b9       	out	0x05, r24	; 5
 274:	9f ef       	ldi	r25, 0xFF	; 255
 276:	e1 ee       	ldi	r30, 0xE1	; 225
 278:	f4 e0       	ldi	r31, 0x04	; 4
 27a:	91 50       	subi	r25, 0x01	; 1
 27c:	e0 40       	sbci	r30, 0x00	; 0
 27e:	f0 40       	sbci	r31, 0x00	; 0
 280:	e1 f7       	brne	.-8      	; 0x27a <main+0x15a>
 282:	00 c0       	rjmp	.+0      	; 0x284 <main+0x164>
 284:	00 00       	nop
            _delay_ms(100);
            
            portd_vals = ((PIND & BITMASK_D) << 6);
 286:	89 b1       	in	r24, 0x09	; 9
            portb_vals = PINB & BITMASK_B;
 288:	13 b1       	in	r17, 0x03	; 3
            keypad_vals = portd_vals | portb_vals;
            keypad_vals &= 0b11110000;
 28a:	10 73       	andi	r17, 0x30	; 48
            
            key_pressed |= keypad_vals;    // The variable has now both row and column values as 0, others as 1
 28c:	1e 29       	or	r17, r14
            printf("%d\n\r", key_pressed);
 28e:	1f 92       	push	r1
 290:	1f 93       	push	r17
 292:	82 e4       	ldi	r24, 0x42	; 66
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	9f 93       	push	r25
 298:	8f 93       	push	r24
 29a:	0e 94 a3 02 	call	0x546	; 0x546 <printf>
            
            if (key_pressed == 0b01110111) {
 29e:	0f 90       	pop	r0
 2a0:	0f 90       	pop	r0
 2a2:	0f 90       	pop	r0
 2a4:	0f 90       	pop	r0
 2a6:	0f 90       	pop	r0
 2a8:	0f 90       	pop	r0
 2aa:	17 37       	cpi	r17, 0x77	; 119
 2ac:	79 f4       	brne	.+30     	; 0x2cc <main+0x1ac>
                // Key 1 pressed
                given_password[idx] = '1';
 2ae:	81 e3       	ldi	r24, 0x31	; 49
 2b0:	f6 01       	movw	r30, r12
 2b2:	e2 5b       	subi	r30, 0xB2	; 178
 2b4:	fe 4f       	sbci	r31, 0xFE	; 254
 2b6:	80 83       	st	Z, r24
                if (password[idx] == '1') {
 2b8:	f6 01       	movw	r30, r12
 2ba:	ed 5a       	subi	r30, 0xAD	; 173
 2bc:	fe 4f       	sbci	r31, 0xFE	; 254
 2be:	80 81       	ld	r24, Z
 2c0:	81 33       	cpi	r24, 0x31	; 49
 2c2:	09 f0       	breq	.+2      	; 0x2c6 <main+0x1a6>
 2c4:	f5 c0       	rjmp	.+490    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
                    led_test();
 2c6:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 2ca:	f2 c0       	rjmp	.+484    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b01111011) {
 2cc:	1b 37       	cpi	r17, 0x7B	; 123
 2ce:	79 f4       	brne	.+30     	; 0x2ee <main+0x1ce>
                // Key 2 pressed
                given_password[idx] = '2';
 2d0:	82 e3       	ldi	r24, 0x32	; 50
 2d2:	f6 01       	movw	r30, r12
 2d4:	e2 5b       	subi	r30, 0xB2	; 178
 2d6:	fe 4f       	sbci	r31, 0xFE	; 254
 2d8:	80 83       	st	Z, r24
                if (password[idx] == '2') {
 2da:	f6 01       	movw	r30, r12
 2dc:	ed 5a       	subi	r30, 0xAD	; 173
 2de:	fe 4f       	sbci	r31, 0xFE	; 254
 2e0:	80 81       	ld	r24, Z
 2e2:	82 33       	cpi	r24, 0x32	; 50
 2e4:	09 f0       	breq	.+2      	; 0x2e8 <main+0x1c8>
 2e6:	e4 c0       	rjmp	.+456    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
                    led_test();
 2e8:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 2ec:	e1 c0       	rjmp	.+450    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b01111101) {
 2ee:	1d 37       	cpi	r17, 0x7D	; 125
 2f0:	79 f4       	brne	.+30     	; 0x310 <main+0x1f0>
                // Key 3 pressed
                given_password[idx] = '3';
 2f2:	83 e3       	ldi	r24, 0x33	; 51
 2f4:	f6 01       	movw	r30, r12
 2f6:	e2 5b       	subi	r30, 0xB2	; 178
 2f8:	fe 4f       	sbci	r31, 0xFE	; 254
 2fa:	80 83       	st	Z, r24
                if (password[idx] == '3') {
 2fc:	f6 01       	movw	r30, r12
 2fe:	ed 5a       	subi	r30, 0xAD	; 173
 300:	fe 4f       	sbci	r31, 0xFE	; 254
 302:	80 81       	ld	r24, Z
 304:	83 33       	cpi	r24, 0x33	; 51
 306:	09 f0       	breq	.+2      	; 0x30a <main+0x1ea>
 308:	d3 c0       	rjmp	.+422    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
                    led_test();
 30a:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 30e:	d0 c0       	rjmp	.+416    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b01111110) {
 310:	1e 37       	cpi	r17, 0x7E	; 126
 312:	79 f4       	brne	.+30     	; 0x332 <main+0x212>
                // A
                given_password[idx] = 'A';
 314:	81 e4       	ldi	r24, 0x41	; 65
 316:	f6 01       	movw	r30, r12
 318:	e2 5b       	subi	r30, 0xB2	; 178
 31a:	fe 4f       	sbci	r31, 0xFE	; 254
 31c:	80 83       	st	Z, r24
                if (password[idx] == 'A') {
 31e:	f6 01       	movw	r30, r12
 320:	ed 5a       	subi	r30, 0xAD	; 173
 322:	fe 4f       	sbci	r31, 0xFE	; 254
 324:	80 81       	ld	r24, Z
 326:	81 34       	cpi	r24, 0x41	; 65
 328:	09 f0       	breq	.+2      	; 0x32c <main+0x20c>
 32a:	c2 c0       	rjmp	.+388    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
                    led_test();
 32c:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 330:	bf c0       	rjmp	.+382    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b10110111) {
 332:	17 3b       	cpi	r17, 0xB7	; 183
 334:	79 f4       	brne	.+30     	; 0x354 <main+0x234>
                // 4
                given_password[idx] = '4';
 336:	84 e3       	ldi	r24, 0x34	; 52
 338:	f6 01       	movw	r30, r12
 33a:	e2 5b       	subi	r30, 0xB2	; 178
 33c:	fe 4f       	sbci	r31, 0xFE	; 254
 33e:	80 83       	st	Z, r24
                if (password[idx] == '4') {
 340:	f6 01       	movw	r30, r12
 342:	ed 5a       	subi	r30, 0xAD	; 173
 344:	fe 4f       	sbci	r31, 0xFE	; 254
 346:	80 81       	ld	r24, Z
 348:	84 33       	cpi	r24, 0x34	; 52
 34a:	09 f0       	breq	.+2      	; 0x34e <main+0x22e>
 34c:	b1 c0       	rjmp	.+354    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
                    led_test();
 34e:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 352:	ae c0       	rjmp	.+348    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b10111011) {
 354:	1b 3b       	cpi	r17, 0xBB	; 187
 356:	79 f4       	brne	.+30     	; 0x376 <main+0x256>
                // 5
                given_password[idx] = '5';
 358:	85 e3       	ldi	r24, 0x35	; 53
 35a:	f6 01       	movw	r30, r12
 35c:	e2 5b       	subi	r30, 0xB2	; 178
 35e:	fe 4f       	sbci	r31, 0xFE	; 254
 360:	80 83       	st	Z, r24
                if (password[idx] == '5') {
 362:	f6 01       	movw	r30, r12
 364:	ed 5a       	subi	r30, 0xAD	; 173
 366:	fe 4f       	sbci	r31, 0xFE	; 254
 368:	80 81       	ld	r24, Z
 36a:	85 33       	cpi	r24, 0x35	; 53
 36c:	09 f0       	breq	.+2      	; 0x370 <main+0x250>
 36e:	a0 c0       	rjmp	.+320    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
                    led_test();
 370:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 374:	9d c0       	rjmp	.+314    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b10111101) {
 376:	1d 3b       	cpi	r17, 0xBD	; 189
 378:	79 f4       	brne	.+30     	; 0x398 <main+0x278>
                // 6
                given_password[idx] = '6';
 37a:	86 e3       	ldi	r24, 0x36	; 54
 37c:	f6 01       	movw	r30, r12
 37e:	e2 5b       	subi	r30, 0xB2	; 178
 380:	fe 4f       	sbci	r31, 0xFE	; 254
 382:	80 83       	st	Z, r24
                if (password[idx] == '6') {
 384:	f6 01       	movw	r30, r12
 386:	ed 5a       	subi	r30, 0xAD	; 173
 388:	fe 4f       	sbci	r31, 0xFE	; 254
 38a:	80 81       	ld	r24, Z
 38c:	86 33       	cpi	r24, 0x36	; 54
 38e:	09 f0       	breq	.+2      	; 0x392 <main+0x272>
 390:	8f c0       	rjmp	.+286    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
                    led_test();
 392:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 396:	8c c0       	rjmp	.+280    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b10111110) {
 398:	1e 3b       	cpi	r17, 0xBE	; 190
 39a:	79 f4       	brne	.+30     	; 0x3ba <main+0x29a>
                // B
                given_password[idx] = 'B';
 39c:	82 e4       	ldi	r24, 0x42	; 66
 39e:	f6 01       	movw	r30, r12
 3a0:	e2 5b       	subi	r30, 0xB2	; 178
 3a2:	fe 4f       	sbci	r31, 0xFE	; 254
 3a4:	80 83       	st	Z, r24
                if (password[idx] == 'B') {
 3a6:	f6 01       	movw	r30, r12
 3a8:	ed 5a       	subi	r30, 0xAD	; 173
 3aa:	fe 4f       	sbci	r31, 0xFE	; 254
 3ac:	80 81       	ld	r24, Z
 3ae:	82 34       	cpi	r24, 0x42	; 66
 3b0:	09 f0       	breq	.+2      	; 0x3b4 <main+0x294>
 3b2:	7e c0       	rjmp	.+252    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
                    led_test();
 3b4:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 3b8:	7b c0       	rjmp	.+246    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11010111) {
 3ba:	17 3d       	cpi	r17, 0xD7	; 215
 3bc:	79 f4       	brne	.+30     	; 0x3dc <main+0x2bc>
                // 7
                given_password[idx] = '7';
 3be:	87 e3       	ldi	r24, 0x37	; 55
 3c0:	f6 01       	movw	r30, r12
 3c2:	e2 5b       	subi	r30, 0xB2	; 178
 3c4:	fe 4f       	sbci	r31, 0xFE	; 254
 3c6:	80 83       	st	Z, r24
                if (password[idx] == '7') {
 3c8:	f6 01       	movw	r30, r12
 3ca:	ed 5a       	subi	r30, 0xAD	; 173
 3cc:	fe 4f       	sbci	r31, 0xFE	; 254
 3ce:	80 81       	ld	r24, Z
 3d0:	87 33       	cpi	r24, 0x37	; 55
 3d2:	09 f0       	breq	.+2      	; 0x3d6 <main+0x2b6>
 3d4:	6d c0       	rjmp	.+218    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
                    led_test();
 3d6:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 3da:	6a c0       	rjmp	.+212    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11011011) {
 3dc:	1b 3d       	cpi	r17, 0xDB	; 219
 3de:	79 f4       	brne	.+30     	; 0x3fe <main+0x2de>
                // 8
                given_password[idx] = '8';
 3e0:	88 e3       	ldi	r24, 0x38	; 56
 3e2:	f6 01       	movw	r30, r12
 3e4:	e2 5b       	subi	r30, 0xB2	; 178
 3e6:	fe 4f       	sbci	r31, 0xFE	; 254
 3e8:	80 83       	st	Z, r24
                if (password[idx] == '8') {
 3ea:	f6 01       	movw	r30, r12
 3ec:	ed 5a       	subi	r30, 0xAD	; 173
 3ee:	fe 4f       	sbci	r31, 0xFE	; 254
 3f0:	80 81       	ld	r24, Z
 3f2:	88 33       	cpi	r24, 0x38	; 56
 3f4:	09 f0       	breq	.+2      	; 0x3f8 <main+0x2d8>
 3f6:	5c c0       	rjmp	.+184    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
                    led_test();
 3f8:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 3fc:	59 c0       	rjmp	.+178    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11011101) {
 3fe:	1d 3d       	cpi	r17, 0xDD	; 221
 400:	79 f4       	brne	.+30     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
                // 9
                given_password[idx] = '9';
 402:	89 e3       	ldi	r24, 0x39	; 57
 404:	f6 01       	movw	r30, r12
 406:	e2 5b       	subi	r30, 0xB2	; 178
 408:	fe 4f       	sbci	r31, 0xFE	; 254
 40a:	80 83       	st	Z, r24
                if (password[idx] == '9') {
 40c:	f6 01       	movw	r30, r12
 40e:	ed 5a       	subi	r30, 0xAD	; 173
 410:	fe 4f       	sbci	r31, 0xFE	; 254
 412:	80 81       	ld	r24, Z
 414:	89 33       	cpi	r24, 0x39	; 57
 416:	09 f0       	breq	.+2      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 418:	4b c0       	rjmp	.+150    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
                    led_test();
 41a:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 41e:	48 c0       	rjmp	.+144    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11011110) {
 420:	1e 3d       	cpi	r17, 0xDE	; 222
 422:	71 f4       	brne	.+28     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
                // C
                given_password[idx] = 'C';
 424:	83 e4       	ldi	r24, 0x43	; 67
 426:	f6 01       	movw	r30, r12
 428:	e2 5b       	subi	r30, 0xB2	; 178
 42a:	fe 4f       	sbci	r31, 0xFE	; 254
 42c:	80 83       	st	Z, r24
                if (password[idx] == 'C') {
 42e:	f6 01       	movw	r30, r12
 430:	ed 5a       	subi	r30, 0xAD	; 173
 432:	fe 4f       	sbci	r31, 0xFE	; 254
 434:	80 81       	ld	r24, Z
 436:	83 34       	cpi	r24, 0x43	; 67
 438:	d9 f5       	brne	.+118    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
                    led_test();
 43a:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 43e:	38 c0       	rjmp	.+112    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11100111) {
 440:	17 3e       	cpi	r17, 0xE7	; 231
 442:	71 f4       	brne	.+28     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
                // *
                // TODO: make this the backspace button
                given_password[idx] = '*';
 444:	8a e2       	ldi	r24, 0x2A	; 42
 446:	f6 01       	movw	r30, r12
 448:	e2 5b       	subi	r30, 0xB2	; 178
 44a:	fe 4f       	sbci	r31, 0xFE	; 254
 44c:	80 83       	st	Z, r24
                if (password[idx] == '*') {
 44e:	f6 01       	movw	r30, r12
 450:	ed 5a       	subi	r30, 0xAD	; 173
 452:	fe 4f       	sbci	r31, 0xFE	; 254
 454:	80 81       	ld	r24, Z
 456:	8a 32       	cpi	r24, 0x2A	; 42
 458:	59 f5       	brne	.+86     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
                    led_test();
 45a:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 45e:	28 c0       	rjmp	.+80     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11101011) {
 460:	1b 3e       	cpi	r17, 0xEB	; 235
 462:	71 f4       	brne	.+28     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
                // 0
                given_password[idx] = '0';
 464:	80 e3       	ldi	r24, 0x30	; 48
 466:	f6 01       	movw	r30, r12
 468:	e2 5b       	subi	r30, 0xB2	; 178
 46a:	fe 4f       	sbci	r31, 0xFE	; 254
 46c:	80 83       	st	Z, r24
                if (password[idx] == '0') {
 46e:	f6 01       	movw	r30, r12
 470:	ed 5a       	subi	r30, 0xAD	; 173
 472:	fe 4f       	sbci	r31, 0xFE	; 254
 474:	80 81       	ld	r24, Z
 476:	80 33       	cpi	r24, 0x30	; 48
 478:	d9 f4       	brne	.+54     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
                    led_test();
 47a:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 47e:	18 c0       	rjmp	.+48     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11101101) {
 480:	1d 3e       	cpi	r17, 0xED	; 237
 482:	39 f4       	brne	.+14     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
                // #
                compare(password, given_password);
 484:	6e e4       	ldi	r22, 0x4E	; 78
 486:	71 e0       	ldi	r23, 0x01	; 1
 488:	83 e5       	ldi	r24, 0x53	; 83
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	0e 94 78 00 	call	0xf0	; 0xf0 <compare>
 490:	0f c0       	rjmp	.+30     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
                //printf("#");
                //given_password[idx] = '#';
                //led_test();
            }
            else if (key_pressed == 0b11101110) {
 492:	1e 3e       	cpi	r17, 0xEE	; 238
 494:	69 f4       	brne	.+26     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
                // D
                given_password[idx] = 'D';
 496:	84 e4       	ldi	r24, 0x44	; 68
 498:	f6 01       	movw	r30, r12
 49a:	e2 5b       	subi	r30, 0xB2	; 178
 49c:	fe 4f       	sbci	r31, 0xFE	; 254
 49e:	80 83       	st	Z, r24
                if (password[idx] == 'D') {
 4a0:	f6 01       	movw	r30, r12
 4a2:	ed 5a       	subi	r30, 0xAD	; 173
 4a4:	fe 4f       	sbci	r31, 0xFE	; 254
 4a6:	80 81       	ld	r24, Z
 4a8:	84 34       	cpi	r24, 0x44	; 68
 4aa:	11 f4       	brne	.+4      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
                    led_test();
 4ac:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
                    //wait
                }
            }*/
            
            // Set digital pins 6-9 (rows) as output and 10-13 (columns) as input
            DDRD &= 0b00111111;
 4b0:	8a b1       	in	r24, 0x0a	; 10
 4b2:	8f 73       	andi	r24, 0x3F	; 63
 4b4:	8a b9       	out	0x0a, r24	; 10
            DDRB &= 0b11111100;
 4b6:	84 b1       	in	r24, 0x04	; 4
 4b8:	8c 7f       	andi	r24, 0xFC	; 252
 4ba:	84 b9       	out	0x04, r24	; 4
            DDRB |= 0b00111100;
 4bc:	84 b1       	in	r24, 0x04	; 4
 4be:	8c 63       	ori	r24, 0x3C	; 60
 4c0:	84 b9       	out	0x04, r24	; 4
 4c2:	2f ef       	ldi	r18, 0xFF	; 255
 4c4:	31 ee       	ldi	r19, 0xE1	; 225
 4c6:	84 e0       	ldi	r24, 0x04	; 4
 4c8:	21 50       	subi	r18, 0x01	; 1
 4ca:	30 40       	sbci	r19, 0x00	; 0
 4cc:	80 40       	sbci	r24, 0x00	; 0
 4ce:	e1 f7       	brne	.-8      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4d2:	00 00       	nop
            _delay_ms(100);
    
            // Power the row pins
            PORTD = 0b11000000;
 4d4:	80 ec       	ldi	r24, 0xC0	; 192
 4d6:	8b b9       	out	0x0b, r24	; 11
            PORTB = 0b00000011;
 4d8:	83 e0       	ldi	r24, 0x03	; 3
 4da:	85 b9       	out	0x05, r24	; 5
 4dc:	9f ef       	ldi	r25, 0xFF	; 255
 4de:	e1 ee       	ldi	r30, 0xE1	; 225
 4e0:	f4 e0       	ldi	r31, 0x04	; 4
 4e2:	91 50       	subi	r25, 0x01	; 1
 4e4:	e0 40       	sbci	r30, 0x00	; 0
 4e6:	f0 40       	sbci	r31, 0x00	; 0
 4e8:	e1 f7       	brne	.-8      	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
 4ea:	00 c0       	rjmp	.+0      	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
 4ec:	00 00       	nop
            _delay_ms(100);
            
            key_pressed = 0;
            idx +=1;
 4ee:	2f ef       	ldi	r18, 0xFF	; 255
 4f0:	c2 1a       	sub	r12, r18
 4f2:	d2 0a       	sbc	r13, r18
 4f4:	8f e3       	ldi	r24, 0x3F	; 63
 4f6:	9c e9       	ldi	r25, 0x9C	; 156
 4f8:	01 97       	sbiw	r24, 0x01	; 1
 4fa:	f1 f7       	brne	.-4      	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 4fe:	00 00       	nop
 500:	63 ce       	rjmp	.-826    	; 0x1c8 <main+0xa8>

00000502 <USART_init>:
#include <stdio.h>


void USART_init(unsigned int ubrr) {
	// Set baud rate
	UBRR0H = (unsigned char) (ubrr>>8);
 502:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char) ubrr;
 506:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 50a:	88 e1       	ldi	r24, 0x18	; 24
 50c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	// Set frame format: 8data, 2stop bit
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);
 510:	8e e0       	ldi	r24, 0x0E	; 14
 512:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 516:	08 95       	ret

00000518 <USART_transmit>:
}

void USART_transmit(unsigned char data) {
	// Wait for empty transmit buffer
	while(!(UCSR0A & (1<<UDRE0)));
 518:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 51c:	95 ff       	sbrs	r25, 5
 51e:	fc cf       	rjmp	.-8      	; 0x518 <USART_transmit>
    
	// Put data into buffer, send the data
	UDR0 = data;
 520:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 524:	08 95       	ret

00000526 <USART_receive>:
}

unsigned char USART_receive(void) {
	// Wait for data to be received
	while(!(UCSR0A & (1<<RXC0)));
 526:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 52a:	88 23       	and	r24, r24
 52c:	e4 f7       	brge	.-8      	; 0x526 <USART_receive>
	
	// Get and return received data from buffer
	return UDR0;
 52e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 532:	08 95       	ret

00000534 <strcmp>:
 534:	fb 01       	movw	r30, r22
 536:	dc 01       	movw	r26, r24
 538:	8d 91       	ld	r24, X+
 53a:	01 90       	ld	r0, Z+
 53c:	80 19       	sub	r24, r0
 53e:	01 10       	cpse	r0, r1
 540:	d9 f3       	breq	.-10     	; 0x538 <strcmp+0x4>
 542:	99 0b       	sbc	r25, r25
 544:	08 95       	ret

00000546 <printf>:
 546:	a0 e0       	ldi	r26, 0x00	; 0
 548:	b0 e0       	ldi	r27, 0x00	; 0
 54a:	e9 ea       	ldi	r30, 0xA9	; 169
 54c:	f2 e0       	ldi	r31, 0x02	; 2
 54e:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__prologue_saves__+0x20>
 552:	ae 01       	movw	r20, r28
 554:	4b 5f       	subi	r20, 0xFB	; 251
 556:	5f 4f       	sbci	r21, 0xFF	; 255
 558:	fa 01       	movw	r30, r20
 55a:	61 91       	ld	r22, Z+
 55c:	71 91       	ld	r23, Z+
 55e:	af 01       	movw	r20, r30
 560:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <__data_end+0x2>
 564:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <__data_end+0x3>
 568:	0e 94 b9 02 	call	0x572	; 0x572 <vfprintf>
 56c:	e2 e0       	ldi	r30, 0x02	; 2
 56e:	0c 94 76 05 	jmp	0xaec	; 0xaec <__epilogue_restores__+0x20>

00000572 <vfprintf>:
 572:	ab e0       	ldi	r26, 0x0B	; 11
 574:	b0 e0       	ldi	r27, 0x00	; 0
 576:	ef eb       	ldi	r30, 0xBF	; 191
 578:	f2 e0       	ldi	r31, 0x02	; 2
 57a:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__prologue_saves__>
 57e:	6c 01       	movw	r12, r24
 580:	7b 01       	movw	r14, r22
 582:	8a 01       	movw	r16, r20
 584:	fc 01       	movw	r30, r24
 586:	17 82       	std	Z+7, r1	; 0x07
 588:	16 82       	std	Z+6, r1	; 0x06
 58a:	83 81       	ldd	r24, Z+3	; 0x03
 58c:	81 ff       	sbrs	r24, 1
 58e:	cc c1       	rjmp	.+920    	; 0x928 <__stack+0x29>
 590:	ce 01       	movw	r24, r28
 592:	01 96       	adiw	r24, 0x01	; 1
 594:	3c 01       	movw	r6, r24
 596:	f6 01       	movw	r30, r12
 598:	93 81       	ldd	r25, Z+3	; 0x03
 59a:	f7 01       	movw	r30, r14
 59c:	93 fd       	sbrc	r25, 3
 59e:	85 91       	lpm	r24, Z+
 5a0:	93 ff       	sbrs	r25, 3
 5a2:	81 91       	ld	r24, Z+
 5a4:	7f 01       	movw	r14, r30
 5a6:	88 23       	and	r24, r24
 5a8:	09 f4       	brne	.+2      	; 0x5ac <vfprintf+0x3a>
 5aa:	ba c1       	rjmp	.+884    	; 0x920 <__stack+0x21>
 5ac:	85 32       	cpi	r24, 0x25	; 37
 5ae:	39 f4       	brne	.+14     	; 0x5be <vfprintf+0x4c>
 5b0:	93 fd       	sbrc	r25, 3
 5b2:	85 91       	lpm	r24, Z+
 5b4:	93 ff       	sbrs	r25, 3
 5b6:	81 91       	ld	r24, Z+
 5b8:	7f 01       	movw	r14, r30
 5ba:	85 32       	cpi	r24, 0x25	; 37
 5bc:	29 f4       	brne	.+10     	; 0x5c8 <vfprintf+0x56>
 5be:	b6 01       	movw	r22, r12
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	0e 94 b0 04 	call	0x960	; 0x960 <fputc>
 5c6:	e7 cf       	rjmp	.-50     	; 0x596 <vfprintf+0x24>
 5c8:	91 2c       	mov	r9, r1
 5ca:	21 2c       	mov	r2, r1
 5cc:	31 2c       	mov	r3, r1
 5ce:	ff e1       	ldi	r31, 0x1F	; 31
 5d0:	f3 15       	cp	r31, r3
 5d2:	d8 f0       	brcs	.+54     	; 0x60a <vfprintf+0x98>
 5d4:	8b 32       	cpi	r24, 0x2B	; 43
 5d6:	79 f0       	breq	.+30     	; 0x5f6 <vfprintf+0x84>
 5d8:	38 f4       	brcc	.+14     	; 0x5e8 <vfprintf+0x76>
 5da:	80 32       	cpi	r24, 0x20	; 32
 5dc:	79 f0       	breq	.+30     	; 0x5fc <vfprintf+0x8a>
 5de:	83 32       	cpi	r24, 0x23	; 35
 5e0:	a1 f4       	brne	.+40     	; 0x60a <vfprintf+0x98>
 5e2:	23 2d       	mov	r18, r3
 5e4:	20 61       	ori	r18, 0x10	; 16
 5e6:	1d c0       	rjmp	.+58     	; 0x622 <vfprintf+0xb0>
 5e8:	8d 32       	cpi	r24, 0x2D	; 45
 5ea:	61 f0       	breq	.+24     	; 0x604 <vfprintf+0x92>
 5ec:	80 33       	cpi	r24, 0x30	; 48
 5ee:	69 f4       	brne	.+26     	; 0x60a <vfprintf+0x98>
 5f0:	23 2d       	mov	r18, r3
 5f2:	21 60       	ori	r18, 0x01	; 1
 5f4:	16 c0       	rjmp	.+44     	; 0x622 <vfprintf+0xb0>
 5f6:	83 2d       	mov	r24, r3
 5f8:	82 60       	ori	r24, 0x02	; 2
 5fa:	38 2e       	mov	r3, r24
 5fc:	e3 2d       	mov	r30, r3
 5fe:	e4 60       	ori	r30, 0x04	; 4
 600:	3e 2e       	mov	r3, r30
 602:	2a c0       	rjmp	.+84     	; 0x658 <vfprintf+0xe6>
 604:	f3 2d       	mov	r31, r3
 606:	f8 60       	ori	r31, 0x08	; 8
 608:	1d c0       	rjmp	.+58     	; 0x644 <vfprintf+0xd2>
 60a:	37 fc       	sbrc	r3, 7
 60c:	2d c0       	rjmp	.+90     	; 0x668 <vfprintf+0xf6>
 60e:	20 ed       	ldi	r18, 0xD0	; 208
 610:	28 0f       	add	r18, r24
 612:	2a 30       	cpi	r18, 0x0A	; 10
 614:	40 f0       	brcs	.+16     	; 0x626 <vfprintf+0xb4>
 616:	8e 32       	cpi	r24, 0x2E	; 46
 618:	b9 f4       	brne	.+46     	; 0x648 <vfprintf+0xd6>
 61a:	36 fc       	sbrc	r3, 6
 61c:	81 c1       	rjmp	.+770    	; 0x920 <__stack+0x21>
 61e:	23 2d       	mov	r18, r3
 620:	20 64       	ori	r18, 0x40	; 64
 622:	32 2e       	mov	r3, r18
 624:	19 c0       	rjmp	.+50     	; 0x658 <vfprintf+0xe6>
 626:	36 fe       	sbrs	r3, 6
 628:	06 c0       	rjmp	.+12     	; 0x636 <vfprintf+0xc4>
 62a:	8a e0       	ldi	r24, 0x0A	; 10
 62c:	98 9e       	mul	r9, r24
 62e:	20 0d       	add	r18, r0
 630:	11 24       	eor	r1, r1
 632:	92 2e       	mov	r9, r18
 634:	11 c0       	rjmp	.+34     	; 0x658 <vfprintf+0xe6>
 636:	ea e0       	ldi	r30, 0x0A	; 10
 638:	2e 9e       	mul	r2, r30
 63a:	20 0d       	add	r18, r0
 63c:	11 24       	eor	r1, r1
 63e:	22 2e       	mov	r2, r18
 640:	f3 2d       	mov	r31, r3
 642:	f0 62       	ori	r31, 0x20	; 32
 644:	3f 2e       	mov	r3, r31
 646:	08 c0       	rjmp	.+16     	; 0x658 <vfprintf+0xe6>
 648:	8c 36       	cpi	r24, 0x6C	; 108
 64a:	21 f4       	brne	.+8      	; 0x654 <vfprintf+0xe2>
 64c:	83 2d       	mov	r24, r3
 64e:	80 68       	ori	r24, 0x80	; 128
 650:	38 2e       	mov	r3, r24
 652:	02 c0       	rjmp	.+4      	; 0x658 <vfprintf+0xe6>
 654:	88 36       	cpi	r24, 0x68	; 104
 656:	41 f4       	brne	.+16     	; 0x668 <vfprintf+0xf6>
 658:	f7 01       	movw	r30, r14
 65a:	93 fd       	sbrc	r25, 3
 65c:	85 91       	lpm	r24, Z+
 65e:	93 ff       	sbrs	r25, 3
 660:	81 91       	ld	r24, Z+
 662:	7f 01       	movw	r14, r30
 664:	81 11       	cpse	r24, r1
 666:	b3 cf       	rjmp	.-154    	; 0x5ce <vfprintf+0x5c>
 668:	98 2f       	mov	r25, r24
 66a:	9f 7d       	andi	r25, 0xDF	; 223
 66c:	95 54       	subi	r25, 0x45	; 69
 66e:	93 30       	cpi	r25, 0x03	; 3
 670:	28 f4       	brcc	.+10     	; 0x67c <vfprintf+0x10a>
 672:	0c 5f       	subi	r16, 0xFC	; 252
 674:	1f 4f       	sbci	r17, 0xFF	; 255
 676:	9f e3       	ldi	r25, 0x3F	; 63
 678:	99 83       	std	Y+1, r25	; 0x01
 67a:	0d c0       	rjmp	.+26     	; 0x696 <vfprintf+0x124>
 67c:	83 36       	cpi	r24, 0x63	; 99
 67e:	31 f0       	breq	.+12     	; 0x68c <vfprintf+0x11a>
 680:	83 37       	cpi	r24, 0x73	; 115
 682:	71 f0       	breq	.+28     	; 0x6a0 <vfprintf+0x12e>
 684:	83 35       	cpi	r24, 0x53	; 83
 686:	09 f0       	breq	.+2      	; 0x68a <vfprintf+0x118>
 688:	59 c0       	rjmp	.+178    	; 0x73c <vfprintf+0x1ca>
 68a:	21 c0       	rjmp	.+66     	; 0x6ce <vfprintf+0x15c>
 68c:	f8 01       	movw	r30, r16
 68e:	80 81       	ld	r24, Z
 690:	89 83       	std	Y+1, r24	; 0x01
 692:	0e 5f       	subi	r16, 0xFE	; 254
 694:	1f 4f       	sbci	r17, 0xFF	; 255
 696:	88 24       	eor	r8, r8
 698:	83 94       	inc	r8
 69a:	91 2c       	mov	r9, r1
 69c:	53 01       	movw	r10, r6
 69e:	13 c0       	rjmp	.+38     	; 0x6c6 <vfprintf+0x154>
 6a0:	28 01       	movw	r4, r16
 6a2:	f2 e0       	ldi	r31, 0x02	; 2
 6a4:	4f 0e       	add	r4, r31
 6a6:	51 1c       	adc	r5, r1
 6a8:	f8 01       	movw	r30, r16
 6aa:	a0 80       	ld	r10, Z
 6ac:	b1 80       	ldd	r11, Z+1	; 0x01
 6ae:	36 fe       	sbrs	r3, 6
 6b0:	03 c0       	rjmp	.+6      	; 0x6b8 <vfprintf+0x146>
 6b2:	69 2d       	mov	r22, r9
 6b4:	70 e0       	ldi	r23, 0x00	; 0
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <vfprintf+0x14a>
 6b8:	6f ef       	ldi	r22, 0xFF	; 255
 6ba:	7f ef       	ldi	r23, 0xFF	; 255
 6bc:	c5 01       	movw	r24, r10
 6be:	0e 94 a5 04 	call	0x94a	; 0x94a <strnlen>
 6c2:	4c 01       	movw	r8, r24
 6c4:	82 01       	movw	r16, r4
 6c6:	f3 2d       	mov	r31, r3
 6c8:	ff 77       	andi	r31, 0x7F	; 127
 6ca:	3f 2e       	mov	r3, r31
 6cc:	16 c0       	rjmp	.+44     	; 0x6fa <vfprintf+0x188>
 6ce:	28 01       	movw	r4, r16
 6d0:	22 e0       	ldi	r18, 0x02	; 2
 6d2:	42 0e       	add	r4, r18
 6d4:	51 1c       	adc	r5, r1
 6d6:	f8 01       	movw	r30, r16
 6d8:	a0 80       	ld	r10, Z
 6da:	b1 80       	ldd	r11, Z+1	; 0x01
 6dc:	36 fe       	sbrs	r3, 6
 6de:	03 c0       	rjmp	.+6      	; 0x6e6 <vfprintf+0x174>
 6e0:	69 2d       	mov	r22, r9
 6e2:	70 e0       	ldi	r23, 0x00	; 0
 6e4:	02 c0       	rjmp	.+4      	; 0x6ea <vfprintf+0x178>
 6e6:	6f ef       	ldi	r22, 0xFF	; 255
 6e8:	7f ef       	ldi	r23, 0xFF	; 255
 6ea:	c5 01       	movw	r24, r10
 6ec:	0e 94 9a 04 	call	0x934	; 0x934 <strnlen_P>
 6f0:	4c 01       	movw	r8, r24
 6f2:	f3 2d       	mov	r31, r3
 6f4:	f0 68       	ori	r31, 0x80	; 128
 6f6:	3f 2e       	mov	r3, r31
 6f8:	82 01       	movw	r16, r4
 6fa:	33 fc       	sbrc	r3, 3
 6fc:	1b c0       	rjmp	.+54     	; 0x734 <vfprintf+0x1c2>
 6fe:	82 2d       	mov	r24, r2
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	88 16       	cp	r8, r24
 704:	99 06       	cpc	r9, r25
 706:	b0 f4       	brcc	.+44     	; 0x734 <vfprintf+0x1c2>
 708:	b6 01       	movw	r22, r12
 70a:	80 e2       	ldi	r24, 0x20	; 32
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	0e 94 b0 04 	call	0x960	; 0x960 <fputc>
 712:	2a 94       	dec	r2
 714:	f4 cf       	rjmp	.-24     	; 0x6fe <vfprintf+0x18c>
 716:	f5 01       	movw	r30, r10
 718:	37 fc       	sbrc	r3, 7
 71a:	85 91       	lpm	r24, Z+
 71c:	37 fe       	sbrs	r3, 7
 71e:	81 91       	ld	r24, Z+
 720:	5f 01       	movw	r10, r30
 722:	b6 01       	movw	r22, r12
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	0e 94 b0 04 	call	0x960	; 0x960 <fputc>
 72a:	21 10       	cpse	r2, r1
 72c:	2a 94       	dec	r2
 72e:	21 e0       	ldi	r18, 0x01	; 1
 730:	82 1a       	sub	r8, r18
 732:	91 08       	sbc	r9, r1
 734:	81 14       	cp	r8, r1
 736:	91 04       	cpc	r9, r1
 738:	71 f7       	brne	.-36     	; 0x716 <vfprintf+0x1a4>
 73a:	e8 c0       	rjmp	.+464    	; 0x90c <__stack+0xd>
 73c:	84 36       	cpi	r24, 0x64	; 100
 73e:	11 f0       	breq	.+4      	; 0x744 <vfprintf+0x1d2>
 740:	89 36       	cpi	r24, 0x69	; 105
 742:	41 f5       	brne	.+80     	; 0x794 <vfprintf+0x222>
 744:	f8 01       	movw	r30, r16
 746:	37 fe       	sbrs	r3, 7
 748:	07 c0       	rjmp	.+14     	; 0x758 <vfprintf+0x1e6>
 74a:	60 81       	ld	r22, Z
 74c:	71 81       	ldd	r23, Z+1	; 0x01
 74e:	82 81       	ldd	r24, Z+2	; 0x02
 750:	93 81       	ldd	r25, Z+3	; 0x03
 752:	0c 5f       	subi	r16, 0xFC	; 252
 754:	1f 4f       	sbci	r17, 0xFF	; 255
 756:	08 c0       	rjmp	.+16     	; 0x768 <vfprintf+0x1f6>
 758:	60 81       	ld	r22, Z
 75a:	71 81       	ldd	r23, Z+1	; 0x01
 75c:	07 2e       	mov	r0, r23
 75e:	00 0c       	add	r0, r0
 760:	88 0b       	sbc	r24, r24
 762:	99 0b       	sbc	r25, r25
 764:	0e 5f       	subi	r16, 0xFE	; 254
 766:	1f 4f       	sbci	r17, 0xFF	; 255
 768:	f3 2d       	mov	r31, r3
 76a:	ff 76       	andi	r31, 0x6F	; 111
 76c:	3f 2e       	mov	r3, r31
 76e:	97 ff       	sbrs	r25, 7
 770:	09 c0       	rjmp	.+18     	; 0x784 <vfprintf+0x212>
 772:	90 95       	com	r25
 774:	80 95       	com	r24
 776:	70 95       	com	r23
 778:	61 95       	neg	r22
 77a:	7f 4f       	sbci	r23, 0xFF	; 255
 77c:	8f 4f       	sbci	r24, 0xFF	; 255
 77e:	9f 4f       	sbci	r25, 0xFF	; 255
 780:	f0 68       	ori	r31, 0x80	; 128
 782:	3f 2e       	mov	r3, r31
 784:	2a e0       	ldi	r18, 0x0A	; 10
 786:	30 e0       	ldi	r19, 0x00	; 0
 788:	a3 01       	movw	r20, r6
 78a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__ultoa_invert>
 78e:	88 2e       	mov	r8, r24
 790:	86 18       	sub	r8, r6
 792:	45 c0       	rjmp	.+138    	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 794:	85 37       	cpi	r24, 0x75	; 117
 796:	31 f4       	brne	.+12     	; 0x7a4 <vfprintf+0x232>
 798:	23 2d       	mov	r18, r3
 79a:	2f 7e       	andi	r18, 0xEF	; 239
 79c:	b2 2e       	mov	r11, r18
 79e:	2a e0       	ldi	r18, 0x0A	; 10
 7a0:	30 e0       	ldi	r19, 0x00	; 0
 7a2:	25 c0       	rjmp	.+74     	; 0x7ee <vfprintf+0x27c>
 7a4:	93 2d       	mov	r25, r3
 7a6:	99 7f       	andi	r25, 0xF9	; 249
 7a8:	b9 2e       	mov	r11, r25
 7aa:	8f 36       	cpi	r24, 0x6F	; 111
 7ac:	c1 f0       	breq	.+48     	; 0x7de <vfprintf+0x26c>
 7ae:	18 f4       	brcc	.+6      	; 0x7b6 <vfprintf+0x244>
 7b0:	88 35       	cpi	r24, 0x58	; 88
 7b2:	79 f0       	breq	.+30     	; 0x7d2 <vfprintf+0x260>
 7b4:	b5 c0       	rjmp	.+362    	; 0x920 <__stack+0x21>
 7b6:	80 37       	cpi	r24, 0x70	; 112
 7b8:	19 f0       	breq	.+6      	; 0x7c0 <vfprintf+0x24e>
 7ba:	88 37       	cpi	r24, 0x78	; 120
 7bc:	21 f0       	breq	.+8      	; 0x7c6 <vfprintf+0x254>
 7be:	b0 c0       	rjmp	.+352    	; 0x920 <__stack+0x21>
 7c0:	e9 2f       	mov	r30, r25
 7c2:	e0 61       	ori	r30, 0x10	; 16
 7c4:	be 2e       	mov	r11, r30
 7c6:	b4 fe       	sbrs	r11, 4
 7c8:	0d c0       	rjmp	.+26     	; 0x7e4 <vfprintf+0x272>
 7ca:	fb 2d       	mov	r31, r11
 7cc:	f4 60       	ori	r31, 0x04	; 4
 7ce:	bf 2e       	mov	r11, r31
 7d0:	09 c0       	rjmp	.+18     	; 0x7e4 <vfprintf+0x272>
 7d2:	34 fe       	sbrs	r3, 4
 7d4:	0a c0       	rjmp	.+20     	; 0x7ea <vfprintf+0x278>
 7d6:	29 2f       	mov	r18, r25
 7d8:	26 60       	ori	r18, 0x06	; 6
 7da:	b2 2e       	mov	r11, r18
 7dc:	06 c0       	rjmp	.+12     	; 0x7ea <vfprintf+0x278>
 7de:	28 e0       	ldi	r18, 0x08	; 8
 7e0:	30 e0       	ldi	r19, 0x00	; 0
 7e2:	05 c0       	rjmp	.+10     	; 0x7ee <vfprintf+0x27c>
 7e4:	20 e1       	ldi	r18, 0x10	; 16
 7e6:	30 e0       	ldi	r19, 0x00	; 0
 7e8:	02 c0       	rjmp	.+4      	; 0x7ee <vfprintf+0x27c>
 7ea:	20 e1       	ldi	r18, 0x10	; 16
 7ec:	32 e0       	ldi	r19, 0x02	; 2
 7ee:	f8 01       	movw	r30, r16
 7f0:	b7 fe       	sbrs	r11, 7
 7f2:	07 c0       	rjmp	.+14     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7f4:	60 81       	ld	r22, Z
 7f6:	71 81       	ldd	r23, Z+1	; 0x01
 7f8:	82 81       	ldd	r24, Z+2	; 0x02
 7fa:	93 81       	ldd	r25, Z+3	; 0x03
 7fc:	0c 5f       	subi	r16, 0xFC	; 252
 7fe:	1f 4f       	sbci	r17, 0xFF	; 255
 800:	06 c0       	rjmp	.+12     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 802:	60 81       	ld	r22, Z
 804:	71 81       	ldd	r23, Z+1	; 0x01
 806:	80 e0       	ldi	r24, 0x00	; 0
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	0e 5f       	subi	r16, 0xFE	; 254
 80c:	1f 4f       	sbci	r17, 0xFF	; 255
 80e:	a3 01       	movw	r20, r6
 810:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__ultoa_invert>
 814:	88 2e       	mov	r8, r24
 816:	86 18       	sub	r8, r6
 818:	fb 2d       	mov	r31, r11
 81a:	ff 77       	andi	r31, 0x7F	; 127
 81c:	3f 2e       	mov	r3, r31
 81e:	36 fe       	sbrs	r3, 6
 820:	0d c0       	rjmp	.+26     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 822:	23 2d       	mov	r18, r3
 824:	2e 7f       	andi	r18, 0xFE	; 254
 826:	a2 2e       	mov	r10, r18
 828:	89 14       	cp	r8, r9
 82a:	58 f4       	brcc	.+22     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 82c:	34 fe       	sbrs	r3, 4
 82e:	0b c0       	rjmp	.+22     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 830:	32 fc       	sbrc	r3, 2
 832:	09 c0       	rjmp	.+18     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 834:	83 2d       	mov	r24, r3
 836:	8e 7e       	andi	r24, 0xEE	; 238
 838:	a8 2e       	mov	r10, r24
 83a:	05 c0       	rjmp	.+10     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 83c:	b8 2c       	mov	r11, r8
 83e:	a3 2c       	mov	r10, r3
 840:	03 c0       	rjmp	.+6      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 842:	b8 2c       	mov	r11, r8
 844:	01 c0       	rjmp	.+2      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 846:	b9 2c       	mov	r11, r9
 848:	a4 fe       	sbrs	r10, 4
 84a:	0f c0       	rjmp	.+30     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 84c:	fe 01       	movw	r30, r28
 84e:	e8 0d       	add	r30, r8
 850:	f1 1d       	adc	r31, r1
 852:	80 81       	ld	r24, Z
 854:	80 33       	cpi	r24, 0x30	; 48
 856:	21 f4       	brne	.+8      	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 858:	9a 2d       	mov	r25, r10
 85a:	99 7e       	andi	r25, 0xE9	; 233
 85c:	a9 2e       	mov	r10, r25
 85e:	09 c0       	rjmp	.+18     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 860:	a2 fe       	sbrs	r10, 2
 862:	06 c0       	rjmp	.+12     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 864:	b3 94       	inc	r11
 866:	b3 94       	inc	r11
 868:	04 c0       	rjmp	.+8      	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 86a:	8a 2d       	mov	r24, r10
 86c:	86 78       	andi	r24, 0x86	; 134
 86e:	09 f0       	breq	.+2      	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 870:	b3 94       	inc	r11
 872:	a3 fc       	sbrc	r10, 3
 874:	11 c0       	rjmp	.+34     	; 0x898 <__DATA_REGION_LENGTH__+0x98>
 876:	a0 fe       	sbrs	r10, 0
 878:	06 c0       	rjmp	.+12     	; 0x886 <__DATA_REGION_LENGTH__+0x86>
 87a:	b2 14       	cp	r11, r2
 87c:	88 f4       	brcc	.+34     	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
 87e:	28 0c       	add	r2, r8
 880:	92 2c       	mov	r9, r2
 882:	9b 18       	sub	r9, r11
 884:	0e c0       	rjmp	.+28     	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
 886:	b2 14       	cp	r11, r2
 888:	60 f4       	brcc	.+24     	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
 88a:	b6 01       	movw	r22, r12
 88c:	80 e2       	ldi	r24, 0x20	; 32
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	0e 94 b0 04 	call	0x960	; 0x960 <fputc>
 894:	b3 94       	inc	r11
 896:	f7 cf       	rjmp	.-18     	; 0x886 <__DATA_REGION_LENGTH__+0x86>
 898:	b2 14       	cp	r11, r2
 89a:	18 f4       	brcc	.+6      	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
 89c:	2b 18       	sub	r2, r11
 89e:	02 c0       	rjmp	.+4      	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
 8a0:	98 2c       	mov	r9, r8
 8a2:	21 2c       	mov	r2, r1
 8a4:	a4 fe       	sbrs	r10, 4
 8a6:	10 c0       	rjmp	.+32     	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 8a8:	b6 01       	movw	r22, r12
 8aa:	80 e3       	ldi	r24, 0x30	; 48
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	0e 94 b0 04 	call	0x960	; 0x960 <fputc>
 8b2:	a2 fe       	sbrs	r10, 2
 8b4:	17 c0       	rjmp	.+46     	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
 8b6:	a1 fc       	sbrc	r10, 1
 8b8:	03 c0       	rjmp	.+6      	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
 8ba:	88 e7       	ldi	r24, 0x78	; 120
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	02 c0       	rjmp	.+4      	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
 8c0:	88 e5       	ldi	r24, 0x58	; 88
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	b6 01       	movw	r22, r12
 8c6:	0c c0       	rjmp	.+24     	; 0x8e0 <__DATA_REGION_LENGTH__+0xe0>
 8c8:	8a 2d       	mov	r24, r10
 8ca:	86 78       	andi	r24, 0x86	; 134
 8cc:	59 f0       	breq	.+22     	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
 8ce:	a1 fe       	sbrs	r10, 1
 8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <__DATA_REGION_LENGTH__+0xd6>
 8d2:	8b e2       	ldi	r24, 0x2B	; 43
 8d4:	01 c0       	rjmp	.+2      	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
 8d6:	80 e2       	ldi	r24, 0x20	; 32
 8d8:	a7 fc       	sbrc	r10, 7
 8da:	8d e2       	ldi	r24, 0x2D	; 45
 8dc:	b6 01       	movw	r22, r12
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	0e 94 b0 04 	call	0x960	; 0x960 <fputc>
 8e4:	89 14       	cp	r8, r9
 8e6:	38 f4       	brcc	.+14     	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
 8e8:	b6 01       	movw	r22, r12
 8ea:	80 e3       	ldi	r24, 0x30	; 48
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	0e 94 b0 04 	call	0x960	; 0x960 <fputc>
 8f2:	9a 94       	dec	r9
 8f4:	f7 cf       	rjmp	.-18     	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
 8f6:	8a 94       	dec	r8
 8f8:	f3 01       	movw	r30, r6
 8fa:	e8 0d       	add	r30, r8
 8fc:	f1 1d       	adc	r31, r1
 8fe:	80 81       	ld	r24, Z
 900:	b6 01       	movw	r22, r12
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	0e 94 b0 04 	call	0x960	; 0x960 <fputc>
 908:	81 10       	cpse	r8, r1
 90a:	f5 cf       	rjmp	.-22     	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
 90c:	22 20       	and	r2, r2
 90e:	09 f4       	brne	.+2      	; 0x912 <__stack+0x13>
 910:	42 ce       	rjmp	.-892    	; 0x596 <vfprintf+0x24>
 912:	b6 01       	movw	r22, r12
 914:	80 e2       	ldi	r24, 0x20	; 32
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	0e 94 b0 04 	call	0x960	; 0x960 <fputc>
 91c:	2a 94       	dec	r2
 91e:	f6 cf       	rjmp	.-20     	; 0x90c <__stack+0xd>
 920:	f6 01       	movw	r30, r12
 922:	86 81       	ldd	r24, Z+6	; 0x06
 924:	97 81       	ldd	r25, Z+7	; 0x07
 926:	02 c0       	rjmp	.+4      	; 0x92c <__stack+0x2d>
 928:	8f ef       	ldi	r24, 0xFF	; 255
 92a:	9f ef       	ldi	r25, 0xFF	; 255
 92c:	2b 96       	adiw	r28, 0x0b	; 11
 92e:	e2 e1       	ldi	r30, 0x12	; 18
 930:	0c 94 66 05 	jmp	0xacc	; 0xacc <__epilogue_restores__>

00000934 <strnlen_P>:
 934:	fc 01       	movw	r30, r24
 936:	05 90       	lpm	r0, Z+
 938:	61 50       	subi	r22, 0x01	; 1
 93a:	70 40       	sbci	r23, 0x00	; 0
 93c:	01 10       	cpse	r0, r1
 93e:	d8 f7       	brcc	.-10     	; 0x936 <strnlen_P+0x2>
 940:	80 95       	com	r24
 942:	90 95       	com	r25
 944:	8e 0f       	add	r24, r30
 946:	9f 1f       	adc	r25, r31
 948:	08 95       	ret

0000094a <strnlen>:
 94a:	fc 01       	movw	r30, r24
 94c:	61 50       	subi	r22, 0x01	; 1
 94e:	70 40       	sbci	r23, 0x00	; 0
 950:	01 90       	ld	r0, Z+
 952:	01 10       	cpse	r0, r1
 954:	d8 f7       	brcc	.-10     	; 0x94c <strnlen+0x2>
 956:	80 95       	com	r24
 958:	90 95       	com	r25
 95a:	8e 0f       	add	r24, r30
 95c:	9f 1f       	adc	r25, r31
 95e:	08 95       	ret

00000960 <fputc>:
 960:	0f 93       	push	r16
 962:	1f 93       	push	r17
 964:	cf 93       	push	r28
 966:	df 93       	push	r29
 968:	fb 01       	movw	r30, r22
 96a:	23 81       	ldd	r18, Z+3	; 0x03
 96c:	21 fd       	sbrc	r18, 1
 96e:	03 c0       	rjmp	.+6      	; 0x976 <fputc+0x16>
 970:	8f ef       	ldi	r24, 0xFF	; 255
 972:	9f ef       	ldi	r25, 0xFF	; 255
 974:	2c c0       	rjmp	.+88     	; 0x9ce <fputc+0x6e>
 976:	22 ff       	sbrs	r18, 2
 978:	16 c0       	rjmp	.+44     	; 0x9a6 <fputc+0x46>
 97a:	46 81       	ldd	r20, Z+6	; 0x06
 97c:	57 81       	ldd	r21, Z+7	; 0x07
 97e:	24 81       	ldd	r18, Z+4	; 0x04
 980:	35 81       	ldd	r19, Z+5	; 0x05
 982:	42 17       	cp	r20, r18
 984:	53 07       	cpc	r21, r19
 986:	44 f4       	brge	.+16     	; 0x998 <fputc+0x38>
 988:	a0 81       	ld	r26, Z
 98a:	b1 81       	ldd	r27, Z+1	; 0x01
 98c:	9d 01       	movw	r18, r26
 98e:	2f 5f       	subi	r18, 0xFF	; 255
 990:	3f 4f       	sbci	r19, 0xFF	; 255
 992:	31 83       	std	Z+1, r19	; 0x01
 994:	20 83       	st	Z, r18
 996:	8c 93       	st	X, r24
 998:	26 81       	ldd	r18, Z+6	; 0x06
 99a:	37 81       	ldd	r19, Z+7	; 0x07
 99c:	2f 5f       	subi	r18, 0xFF	; 255
 99e:	3f 4f       	sbci	r19, 0xFF	; 255
 9a0:	37 83       	std	Z+7, r19	; 0x07
 9a2:	26 83       	std	Z+6, r18	; 0x06
 9a4:	14 c0       	rjmp	.+40     	; 0x9ce <fputc+0x6e>
 9a6:	8b 01       	movw	r16, r22
 9a8:	ec 01       	movw	r28, r24
 9aa:	fb 01       	movw	r30, r22
 9ac:	00 84       	ldd	r0, Z+8	; 0x08
 9ae:	f1 85       	ldd	r31, Z+9	; 0x09
 9b0:	e0 2d       	mov	r30, r0
 9b2:	09 95       	icall
 9b4:	89 2b       	or	r24, r25
 9b6:	e1 f6       	brne	.-72     	; 0x970 <fputc+0x10>
 9b8:	d8 01       	movw	r26, r16
 9ba:	16 96       	adiw	r26, 0x06	; 6
 9bc:	8d 91       	ld	r24, X+
 9be:	9c 91       	ld	r25, X
 9c0:	17 97       	sbiw	r26, 0x07	; 7
 9c2:	01 96       	adiw	r24, 0x01	; 1
 9c4:	17 96       	adiw	r26, 0x07	; 7
 9c6:	9c 93       	st	X, r25
 9c8:	8e 93       	st	-X, r24
 9ca:	16 97       	sbiw	r26, 0x06	; 6
 9cc:	ce 01       	movw	r24, r28
 9ce:	df 91       	pop	r29
 9d0:	cf 91       	pop	r28
 9d2:	1f 91       	pop	r17
 9d4:	0f 91       	pop	r16
 9d6:	08 95       	ret

000009d8 <__ultoa_invert>:
 9d8:	fa 01       	movw	r30, r20
 9da:	aa 27       	eor	r26, r26
 9dc:	28 30       	cpi	r18, 0x08	; 8
 9de:	51 f1       	breq	.+84     	; 0xa34 <__ultoa_invert+0x5c>
 9e0:	20 31       	cpi	r18, 0x10	; 16
 9e2:	81 f1       	breq	.+96     	; 0xa44 <__ultoa_invert+0x6c>
 9e4:	e8 94       	clt
 9e6:	6f 93       	push	r22
 9e8:	6e 7f       	andi	r22, 0xFE	; 254
 9ea:	6e 5f       	subi	r22, 0xFE	; 254
 9ec:	7f 4f       	sbci	r23, 0xFF	; 255
 9ee:	8f 4f       	sbci	r24, 0xFF	; 255
 9f0:	9f 4f       	sbci	r25, 0xFF	; 255
 9f2:	af 4f       	sbci	r26, 0xFF	; 255
 9f4:	b1 e0       	ldi	r27, 0x01	; 1
 9f6:	3e d0       	rcall	.+124    	; 0xa74 <__ultoa_invert+0x9c>
 9f8:	b4 e0       	ldi	r27, 0x04	; 4
 9fa:	3c d0       	rcall	.+120    	; 0xa74 <__ultoa_invert+0x9c>
 9fc:	67 0f       	add	r22, r23
 9fe:	78 1f       	adc	r23, r24
 a00:	89 1f       	adc	r24, r25
 a02:	9a 1f       	adc	r25, r26
 a04:	a1 1d       	adc	r26, r1
 a06:	68 0f       	add	r22, r24
 a08:	79 1f       	adc	r23, r25
 a0a:	8a 1f       	adc	r24, r26
 a0c:	91 1d       	adc	r25, r1
 a0e:	a1 1d       	adc	r26, r1
 a10:	6a 0f       	add	r22, r26
 a12:	71 1d       	adc	r23, r1
 a14:	81 1d       	adc	r24, r1
 a16:	91 1d       	adc	r25, r1
 a18:	a1 1d       	adc	r26, r1
 a1a:	20 d0       	rcall	.+64     	; 0xa5c <__ultoa_invert+0x84>
 a1c:	09 f4       	brne	.+2      	; 0xa20 <__ultoa_invert+0x48>
 a1e:	68 94       	set
 a20:	3f 91       	pop	r19
 a22:	2a e0       	ldi	r18, 0x0A	; 10
 a24:	26 9f       	mul	r18, r22
 a26:	11 24       	eor	r1, r1
 a28:	30 19       	sub	r19, r0
 a2a:	30 5d       	subi	r19, 0xD0	; 208
 a2c:	31 93       	st	Z+, r19
 a2e:	de f6       	brtc	.-74     	; 0x9e6 <__ultoa_invert+0xe>
 a30:	cf 01       	movw	r24, r30
 a32:	08 95       	ret
 a34:	46 2f       	mov	r20, r22
 a36:	47 70       	andi	r20, 0x07	; 7
 a38:	40 5d       	subi	r20, 0xD0	; 208
 a3a:	41 93       	st	Z+, r20
 a3c:	b3 e0       	ldi	r27, 0x03	; 3
 a3e:	0f d0       	rcall	.+30     	; 0xa5e <__ultoa_invert+0x86>
 a40:	c9 f7       	brne	.-14     	; 0xa34 <__ultoa_invert+0x5c>
 a42:	f6 cf       	rjmp	.-20     	; 0xa30 <__ultoa_invert+0x58>
 a44:	46 2f       	mov	r20, r22
 a46:	4f 70       	andi	r20, 0x0F	; 15
 a48:	40 5d       	subi	r20, 0xD0	; 208
 a4a:	4a 33       	cpi	r20, 0x3A	; 58
 a4c:	18 f0       	brcs	.+6      	; 0xa54 <__ultoa_invert+0x7c>
 a4e:	49 5d       	subi	r20, 0xD9	; 217
 a50:	31 fd       	sbrc	r19, 1
 a52:	40 52       	subi	r20, 0x20	; 32
 a54:	41 93       	st	Z+, r20
 a56:	02 d0       	rcall	.+4      	; 0xa5c <__ultoa_invert+0x84>
 a58:	a9 f7       	brne	.-22     	; 0xa44 <__ultoa_invert+0x6c>
 a5a:	ea cf       	rjmp	.-44     	; 0xa30 <__ultoa_invert+0x58>
 a5c:	b4 e0       	ldi	r27, 0x04	; 4
 a5e:	a6 95       	lsr	r26
 a60:	97 95       	ror	r25
 a62:	87 95       	ror	r24
 a64:	77 95       	ror	r23
 a66:	67 95       	ror	r22
 a68:	ba 95       	dec	r27
 a6a:	c9 f7       	brne	.-14     	; 0xa5e <__ultoa_invert+0x86>
 a6c:	00 97       	sbiw	r24, 0x00	; 0
 a6e:	61 05       	cpc	r22, r1
 a70:	71 05       	cpc	r23, r1
 a72:	08 95       	ret
 a74:	9b 01       	movw	r18, r22
 a76:	ac 01       	movw	r20, r24
 a78:	0a 2e       	mov	r0, r26
 a7a:	06 94       	lsr	r0
 a7c:	57 95       	ror	r21
 a7e:	47 95       	ror	r20
 a80:	37 95       	ror	r19
 a82:	27 95       	ror	r18
 a84:	ba 95       	dec	r27
 a86:	c9 f7       	brne	.-14     	; 0xa7a <__ultoa_invert+0xa2>
 a88:	62 0f       	add	r22, r18
 a8a:	73 1f       	adc	r23, r19
 a8c:	84 1f       	adc	r24, r20
 a8e:	95 1f       	adc	r25, r21
 a90:	a0 1d       	adc	r26, r0
 a92:	08 95       	ret

00000a94 <__prologue_saves__>:
 a94:	2f 92       	push	r2
 a96:	3f 92       	push	r3
 a98:	4f 92       	push	r4
 a9a:	5f 92       	push	r5
 a9c:	6f 92       	push	r6
 a9e:	7f 92       	push	r7
 aa0:	8f 92       	push	r8
 aa2:	9f 92       	push	r9
 aa4:	af 92       	push	r10
 aa6:	bf 92       	push	r11
 aa8:	cf 92       	push	r12
 aaa:	df 92       	push	r13
 aac:	ef 92       	push	r14
 aae:	ff 92       	push	r15
 ab0:	0f 93       	push	r16
 ab2:	1f 93       	push	r17
 ab4:	cf 93       	push	r28
 ab6:	df 93       	push	r29
 ab8:	cd b7       	in	r28, 0x3d	; 61
 aba:	de b7       	in	r29, 0x3e	; 62
 abc:	ca 1b       	sub	r28, r26
 abe:	db 0b       	sbc	r29, r27
 ac0:	0f b6       	in	r0, 0x3f	; 63
 ac2:	f8 94       	cli
 ac4:	de bf       	out	0x3e, r29	; 62
 ac6:	0f be       	out	0x3f, r0	; 63
 ac8:	cd bf       	out	0x3d, r28	; 61
 aca:	09 94       	ijmp

00000acc <__epilogue_restores__>:
 acc:	2a 88       	ldd	r2, Y+18	; 0x12
 ace:	39 88       	ldd	r3, Y+17	; 0x11
 ad0:	48 88       	ldd	r4, Y+16	; 0x10
 ad2:	5f 84       	ldd	r5, Y+15	; 0x0f
 ad4:	6e 84       	ldd	r6, Y+14	; 0x0e
 ad6:	7d 84       	ldd	r7, Y+13	; 0x0d
 ad8:	8c 84       	ldd	r8, Y+12	; 0x0c
 ada:	9b 84       	ldd	r9, Y+11	; 0x0b
 adc:	aa 84       	ldd	r10, Y+10	; 0x0a
 ade:	b9 84       	ldd	r11, Y+9	; 0x09
 ae0:	c8 84       	ldd	r12, Y+8	; 0x08
 ae2:	df 80       	ldd	r13, Y+7	; 0x07
 ae4:	ee 80       	ldd	r14, Y+6	; 0x06
 ae6:	fd 80       	ldd	r15, Y+5	; 0x05
 ae8:	0c 81       	ldd	r16, Y+4	; 0x04
 aea:	1b 81       	ldd	r17, Y+3	; 0x03
 aec:	aa 81       	ldd	r26, Y+2	; 0x02
 aee:	b9 81       	ldd	r27, Y+1	; 0x01
 af0:	ce 0f       	add	r28, r30
 af2:	d1 1d       	adc	r29, r1
 af4:	0f b6       	in	r0, 0x3f	; 63
 af6:	f8 94       	cli
 af8:	de bf       	out	0x3e, r29	; 62
 afa:	0f be       	out	0x3f, r0	; 63
 afc:	cd bf       	out	0x3d, r28	; 61
 afe:	ed 01       	movw	r28, r26
 b00:	08 95       	ret

00000b02 <_exit>:
 b02:	f8 94       	cli

00000b04 <__stop_program>:
 b04:	ff cf       	rjmp	.-2      	; 0xb04 <__stop_program>
