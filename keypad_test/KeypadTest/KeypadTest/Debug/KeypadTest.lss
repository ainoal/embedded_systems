
KeypadTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000a2c  00000ac0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800120  00800120  00000ae0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ae0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e43  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008cd  00000000  00000000  00001a1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000669  00000000  00000000  000022ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00002958  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d2  00000000  00000000  000029f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000591  00000000  00000000  00002ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00003453  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e2       	ldi	r30, 0x2C	; 44
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e2       	ldi	r26, 0x20	; 32
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 32       	cpi	r26, 0x26	; 38
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  9e:	0c 94 14 05 	jmp	0xa28	; 0xa28 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <compare>:
    PORTD &= ~(1 << PD3);
    _delay_ms(1000);
}

int compare(char *password, char *given_password, size_t n){
    if (strncmp(password, given_password, n) != 0) {
  a6:	0e 94 21 02 	call	0x442	; 0x442 <strncmp>
  aa:	00 97       	sbiw	r24, 0x00	; 0
  ac:	11 f0       	breq	.+4      	; 0xb2 <compare+0xc>
        led_test();
        led_test();
        led_test();
        led_test();
        led_test();*/
        return 1;
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
    }
    else {
        return 0;
    }
}
  b2:	08 95       	ret

000000b4 <main>:

int main(void)
{
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	ea 97       	sbiw	r28, 0x3a	; 58
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	f8 94       	cli
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	cd bf       	out	0x3d, r28	; 61
    /********************testing****************************/
    
    char input;
    FILE uart_output = FDEV_SETUP_STREAM(USART_transmit, NULL, _FDEV_SETUP_WRITE);
  c8:	8e e0       	ldi	r24, 0x0E	; 14
  ca:	9e 01       	movw	r18, r28
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	79 01       	movw	r14, r18
  d2:	f9 01       	movw	r30, r18
  d4:	28 2f       	mov	r18, r24
  d6:	11 92       	st	Z+, r1
  d8:	2a 95       	dec	r18
  da:	e9 f7       	brne	.-6      	; 0xd6 <main+0x22>
  dc:	92 e0       	ldi	r25, 0x02	; 2
  de:	9c 83       	std	Y+4, r25	; 0x04
  e0:	23 e1       	ldi	r18, 0x13	; 19
  e2:	32 e0       	ldi	r19, 0x02	; 2
  e4:	3a 87       	std	Y+10, r19	; 0x0a
  e6:	29 87       	std	Y+9, r18	; 0x09
    FILE uart_input = FDEV_SETUP_STREAM(NULL, USART_receive, _FDEV_SETUP_READ);
  e8:	8e 01       	movw	r16, r28
  ea:	01 5f       	subi	r16, 0xF1	; 241
  ec:	1f 4f       	sbci	r17, 0xFF	; 255
  ee:	f8 01       	movw	r30, r16
  f0:	11 92       	st	Z+, r1
  f2:	8a 95       	dec	r24
  f4:	e9 f7       	brne	.-6      	; 0xf0 <main+0x3c>
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	8a 8b       	std	Y+18, r24	; 0x12
  fa:	8a e1       	ldi	r24, 0x1A	; 26
  fc:	92 e0       	ldi	r25, 0x02	; 2
  fe:	9a 8f       	std	Y+26, r25	; 0x1a
 100:	89 8f       	std	Y+25, r24	; 0x19
        
    USART_init(UBRR);
 102:	87 e6       	ldi	r24, 0x67	; 103
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 08 02 	call	0x410	; 0x410 <USART_init>
        
    stdout = &uart_output;
 10a:	e0 e2       	ldi	r30, 0x20	; 32
 10c:	f1 e0       	ldi	r31, 0x01	; 1
 10e:	f3 82       	std	Z+3, r15	; 0x03
 110:	e2 82       	std	Z+2, r14	; 0x02
    stdin = &uart_input;
 112:	11 83       	std	Z+1, r17	; 0x01
 114:	00 83       	st	Z, r16
    char* password = "0123";
    char given_password[30];
    int idx = 0;
    
    // Set digital pins 6-9 (rows) as input and 10-13 (columns) as output
    DDRD &= 0b00111111;
 116:	8a b1       	in	r24, 0x0a	; 10
 118:	8f 73       	andi	r24, 0x3F	; 63
 11a:	8a b9       	out	0x0a, r24	; 10
    DDRB &= 0b11111100;
 11c:	84 b1       	in	r24, 0x04	; 4
 11e:	8c 7f       	andi	r24, 0xFC	; 252
 120:	84 b9       	out	0x04, r24	; 4
    DDRB |= 0b00111100;
 122:	84 b1       	in	r24, 0x04	; 4
 124:	8c 63       	ori	r24, 0x3C	; 60
 126:	84 b9       	out	0x04, r24	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	8f e9       	ldi	r24, 0x9F	; 159
 12a:	9f e0       	ldi	r25, 0x0F	; 15
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <main+0x78>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x7e>
 132:	00 00       	nop
    _delay_ms(1);
    
    // Power the row pins
    PORTD |= 0b11000000;
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	80 6c       	ori	r24, 0xC0	; 192
 138:	8b b9       	out	0x0b, r24	; 11
    PORTB |= 0b00000011;
 13a:	85 b1       	in	r24, 0x05	; 5
 13c:	83 60       	ori	r24, 0x03	; 3
 13e:	85 b9       	out	0x05, r24	; 5
 140:	ef e9       	ldi	r30, 0x9F	; 159
 142:	ff e0       	ldi	r31, 0x0F	; 15
 144:	31 97       	sbiw	r30, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <main+0x90>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x96>
 14a:	00 00       	nop
    stdin = &uart_input;
    /******************************************************/
    
    char* password = "0123";
    char given_password[30];
    int idx = 0;
 14c:	00 e0       	ldi	r16, 0x00	; 0
 14e:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t portd_vals;
    
    while (1) 
    { 
        //_delay_ms(10);
        portd_vals = ((PIND & BITMASK_D) >> 6);
 150:	89 b1       	in	r24, 0x09	; 9
 152:	28 2f       	mov	r18, r24
 154:	22 95       	swap	r18
 156:	26 95       	lsr	r18
 158:	26 95       	lsr	r18
 15a:	23 70       	andi	r18, 0x03	; 3
        portb_vals = ((PINB & BITMASK_B) << 2);
 15c:	93 b1       	in	r25, 0x03	; 3
 15e:	89 2f       	mov	r24, r25
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
        keypad_vals = portd_vals | portb_vals;
 16a:	82 2b       	or	r24, r18
        
        //printf("Keypad_vals %d", keypad_vals);
        keypad_vals &= 0b00001111;
 16c:	8f 70       	andi	r24, 0x0F	; 15
        //printf("kp_vals: %d  portd_vals: %d  portb_vals: %d  PINB: %d\n\r", keypad_vals, portd_vals, portb_vals, PINB);
        
        if (keypad_vals != 0b00001111) {     // If any of column pins goes high
 16e:	8f 30       	cpi	r24, 0x0F	; 15
 170:	79 f3       	breq	.-34     	; 0x150 <main+0x9c>
            key_pressed = keypad_vals;
            //_delay_ms(1);
   
            
            // Make rows as output and columns as input
            DDRD |= 0b11000000;
 172:	9a b1       	in	r25, 0x0a	; 10
 174:	90 6c       	ori	r25, 0xC0	; 192
 176:	9a b9       	out	0x0a, r25	; 10
            DDRB = 0b00000011;
 178:	93 e0       	ldi	r25, 0x03	; 3
 17a:	94 b9       	out	0x04, r25	; 4
 17c:	ef e9       	ldi	r30, 0x9F	; 159
 17e:	ff e0       	ldi	r31, 0x0F	; 15
 180:	31 97       	sbiw	r30, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <main+0xcc>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0xd2>
 186:	00 00       	nop
            _delay_ms(1);
            
            // Power the column pins
            PORTB = 0b00111100;
 188:	9c e3       	ldi	r25, 0x3C	; 60
 18a:	95 b9       	out	0x05, r25	; 5
            PORTD &= 0b00111111;
 18c:	9b b1       	in	r25, 0x0b	; 11
 18e:	9f 73       	andi	r25, 0x3F	; 63
 190:	9b b9       	out	0x0b, r25	; 11
 192:	ef e9       	ldi	r30, 0x9F	; 159
 194:	ff e0       	ldi	r31, 0x0F	; 15
 196:	31 97       	sbiw	r30, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <main+0xe2>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0xe8>
 19c:	00 00       	nop
            _delay_ms(1);
            
            //printf("PINB %d   ", PINB);
            portd_vals = ((PIND & BITMASK_D) >> 6);
 19e:	99 b1       	in	r25, 0x09	; 9
            portb_vals = ((PINB & BITMASK_B) << 2);
 1a0:	23 b1       	in	r18, 0x03	; 3
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	22 0f       	add	r18, r18
 1a6:	33 1f       	adc	r19, r19
 1a8:	22 0f       	add	r18, r18
 1aa:	33 1f       	adc	r19, r19
            //printf("portb_vals %d   portd_vals %d ", portb_vals, portd_vals);
            
            //_delay_ms(10);
            keypad_vals = portd_vals | portb_vals;
            keypad_vals &= 0b11110000;
 1ac:	20 7f       	andi	r18, 0xF0	; 240
            
            //printf("PINB %d   ", PINB);
            //printf("Key pressed %d   ", key_pressed);
            //_delay_ms(10);
            key_pressed |= keypad_vals;    // The variable has now both row and column values
 1ae:	82 2b       	or	r24, r18
            //printf("%d\n\r", key_pressed);
            
            if (key_pressed == 0b01110111) {
 1b0:	87 37       	cpi	r24, 0x77	; 119
 1b2:	69 f4       	brne	.+26     	; 0x1ce <main+0x11a>
                // Key 1 pressed
                printf("1");
 1b4:	81 e3       	ldi	r24, 0x31	; 49
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 45 02 	call	0x48a	; 0x48a <putchar>
                given_password[idx] = '1';
 1bc:	ed e1       	ldi	r30, 0x1D	; 29
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	ec 0f       	add	r30, r28
 1c2:	fd 1f       	adc	r31, r29
 1c4:	e0 0f       	add	r30, r16
 1c6:	f1 1f       	adc	r31, r17
 1c8:	81 e3       	ldi	r24, 0x31	; 49
 1ca:	80 83       	st	Z, r24
 1cc:	f7 c0       	rjmp	.+494    	; 0x3bc <main+0x308>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b01111011) {
 1ce:	8b 37       	cpi	r24, 0x7B	; 123
 1d0:	69 f4       	brne	.+26     	; 0x1ec <main+0x138>
                // Key 2 pressed
                printf("2");
 1d2:	82 e3       	ldi	r24, 0x32	; 50
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 45 02 	call	0x48a	; 0x48a <putchar>
                given_password[idx] = '2';
 1da:	ed e1       	ldi	r30, 0x1D	; 29
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	ec 0f       	add	r30, r28
 1e0:	fd 1f       	adc	r31, r29
 1e2:	e0 0f       	add	r30, r16
 1e4:	f1 1f       	adc	r31, r17
 1e6:	82 e3       	ldi	r24, 0x32	; 50
 1e8:	80 83       	st	Z, r24
 1ea:	e8 c0       	rjmp	.+464    	; 0x3bc <main+0x308>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b01111101) {
 1ec:	8d 37       	cpi	r24, 0x7D	; 125
 1ee:	69 f4       	brne	.+26     	; 0x20a <main+0x156>
                // Key 3 pressed
                printf("3");
 1f0:	83 e3       	ldi	r24, 0x33	; 51
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 45 02 	call	0x48a	; 0x48a <putchar>
                given_password[idx] = '3';
 1f8:	ed e1       	ldi	r30, 0x1D	; 29
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	ec 0f       	add	r30, r28
 1fe:	fd 1f       	adc	r31, r29
 200:	e0 0f       	add	r30, r16
 202:	f1 1f       	adc	r31, r17
 204:	83 e3       	ldi	r24, 0x33	; 51
 206:	80 83       	st	Z, r24
 208:	d9 c0       	rjmp	.+434    	; 0x3bc <main+0x308>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b01111110) {
 20a:	8e 37       	cpi	r24, 0x7E	; 126
 20c:	69 f4       	brne	.+26     	; 0x228 <main+0x174>
                // A
                printf("A");
 20e:	81 e4       	ldi	r24, 0x41	; 65
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 45 02 	call	0x48a	; 0x48a <putchar>
                given_password[idx] = 'A';
 216:	ed e1       	ldi	r30, 0x1D	; 29
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	ec 0f       	add	r30, r28
 21c:	fd 1f       	adc	r31, r29
 21e:	e0 0f       	add	r30, r16
 220:	f1 1f       	adc	r31, r17
 222:	81 e4       	ldi	r24, 0x41	; 65
 224:	80 83       	st	Z, r24
 226:	ca c0       	rjmp	.+404    	; 0x3bc <main+0x308>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b10110111) {
 228:	87 3b       	cpi	r24, 0xB7	; 183
 22a:	69 f4       	brne	.+26     	; 0x246 <main+0x192>
                // 4
                printf("4");
 22c:	84 e3       	ldi	r24, 0x34	; 52
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 45 02 	call	0x48a	; 0x48a <putchar>
                given_password[idx] = '4';
 234:	ed e1       	ldi	r30, 0x1D	; 29
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	ec 0f       	add	r30, r28
 23a:	fd 1f       	adc	r31, r29
 23c:	e0 0f       	add	r30, r16
 23e:	f1 1f       	adc	r31, r17
 240:	84 e3       	ldi	r24, 0x34	; 52
 242:	80 83       	st	Z, r24
 244:	bb c0       	rjmp	.+374    	; 0x3bc <main+0x308>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b10111011) {
 246:	8b 3b       	cpi	r24, 0xBB	; 187
 248:	69 f4       	brne	.+26     	; 0x264 <main+0x1b0>
                // 5
                printf("5");
 24a:	85 e3       	ldi	r24, 0x35	; 53
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 45 02 	call	0x48a	; 0x48a <putchar>
                given_password[idx] = '5';
 252:	ed e1       	ldi	r30, 0x1D	; 29
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	ec 0f       	add	r30, r28
 258:	fd 1f       	adc	r31, r29
 25a:	e0 0f       	add	r30, r16
 25c:	f1 1f       	adc	r31, r17
 25e:	85 e3       	ldi	r24, 0x35	; 53
 260:	80 83       	st	Z, r24
 262:	ac c0       	rjmp	.+344    	; 0x3bc <main+0x308>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b10111101) {
 264:	8d 3b       	cpi	r24, 0xBD	; 189
 266:	69 f4       	brne	.+26     	; 0x282 <main+0x1ce>
                // 6
                printf("6");
 268:	86 e3       	ldi	r24, 0x36	; 54
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 45 02 	call	0x48a	; 0x48a <putchar>
                given_password[idx] = '6';
 270:	ed e1       	ldi	r30, 0x1D	; 29
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	ec 0f       	add	r30, r28
 276:	fd 1f       	adc	r31, r29
 278:	e0 0f       	add	r30, r16
 27a:	f1 1f       	adc	r31, r17
 27c:	86 e3       	ldi	r24, 0x36	; 54
 27e:	80 83       	st	Z, r24
 280:	9d c0       	rjmp	.+314    	; 0x3bc <main+0x308>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b10111110) {
 282:	8e 3b       	cpi	r24, 0xBE	; 190
 284:	69 f4       	brne	.+26     	; 0x2a0 <main+0x1ec>
                // B
                printf("B");
 286:	82 e4       	ldi	r24, 0x42	; 66
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 45 02 	call	0x48a	; 0x48a <putchar>
                given_password[idx] = 'B';
 28e:	ed e1       	ldi	r30, 0x1D	; 29
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	ec 0f       	add	r30, r28
 294:	fd 1f       	adc	r31, r29
 296:	e0 0f       	add	r30, r16
 298:	f1 1f       	adc	r31, r17
 29a:	82 e4       	ldi	r24, 0x42	; 66
 29c:	80 83       	st	Z, r24
 29e:	8e c0       	rjmp	.+284    	; 0x3bc <main+0x308>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11010111) {
 2a0:	87 3d       	cpi	r24, 0xD7	; 215
 2a2:	69 f4       	brne	.+26     	; 0x2be <main+0x20a>
                // 7
                printf("7");
 2a4:	87 e3       	ldi	r24, 0x37	; 55
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 45 02 	call	0x48a	; 0x48a <putchar>
                given_password[idx] = '7';
 2ac:	ed e1       	ldi	r30, 0x1D	; 29
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	ec 0f       	add	r30, r28
 2b2:	fd 1f       	adc	r31, r29
 2b4:	e0 0f       	add	r30, r16
 2b6:	f1 1f       	adc	r31, r17
 2b8:	87 e3       	ldi	r24, 0x37	; 55
 2ba:	80 83       	st	Z, r24
 2bc:	7f c0       	rjmp	.+254    	; 0x3bc <main+0x308>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11011011) {
 2be:	8b 3d       	cpi	r24, 0xDB	; 219
 2c0:	69 f4       	brne	.+26     	; 0x2dc <main+0x228>
                // 8
                printf("8");
 2c2:	88 e3       	ldi	r24, 0x38	; 56
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 45 02 	call	0x48a	; 0x48a <putchar>
                given_password[idx] = '8';
 2ca:	ed e1       	ldi	r30, 0x1D	; 29
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	ec 0f       	add	r30, r28
 2d0:	fd 1f       	adc	r31, r29
 2d2:	e0 0f       	add	r30, r16
 2d4:	f1 1f       	adc	r31, r17
 2d6:	88 e3       	ldi	r24, 0x38	; 56
 2d8:	80 83       	st	Z, r24
 2da:	70 c0       	rjmp	.+224    	; 0x3bc <main+0x308>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11011101) {
 2dc:	8d 3d       	cpi	r24, 0xDD	; 221
 2de:	69 f4       	brne	.+26     	; 0x2fa <main+0x246>
                // 9
                printf("9");
 2e0:	89 e3       	ldi	r24, 0x39	; 57
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 45 02 	call	0x48a	; 0x48a <putchar>
                given_password[idx] = '9';
 2e8:	ed e1       	ldi	r30, 0x1D	; 29
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	ec 0f       	add	r30, r28
 2ee:	fd 1f       	adc	r31, r29
 2f0:	e0 0f       	add	r30, r16
 2f2:	f1 1f       	adc	r31, r17
 2f4:	89 e3       	ldi	r24, 0x39	; 57
 2f6:	80 83       	st	Z, r24
 2f8:	61 c0       	rjmp	.+194    	; 0x3bc <main+0x308>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11011110) {
 2fa:	8e 3d       	cpi	r24, 0xDE	; 222
 2fc:	69 f4       	brne	.+26     	; 0x318 <main+0x264>
                // C
                printf("C");
 2fe:	83 e4       	ldi	r24, 0x43	; 67
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 45 02 	call	0x48a	; 0x48a <putchar>
                given_password[idx] = 'C';
 306:	ed e1       	ldi	r30, 0x1D	; 29
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	ec 0f       	add	r30, r28
 30c:	fd 1f       	adc	r31, r29
 30e:	e0 0f       	add	r30, r16
 310:	f1 1f       	adc	r31, r17
 312:	83 e4       	ldi	r24, 0x43	; 67
 314:	80 83       	st	Z, r24
 316:	52 c0       	rjmp	.+164    	; 0x3bc <main+0x308>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11100111) {
 318:	87 3e       	cpi	r24, 0xE7	; 231
 31a:	c1 f4       	brne	.+48     	; 0x34c <main+0x298>
                // Backspace button (*)
                //printf("*");
                given_password[idx - 1] = "";
 31c:	f8 01       	movw	r30, r16
 31e:	31 97       	sbiw	r30, 0x01	; 1
 320:	ce 01       	movw	r24, r28
 322:	4d 96       	adiw	r24, 0x1d	; 29
 324:	e8 0f       	add	r30, r24
 326:	f9 1f       	adc	r31, r25
 328:	2e e1       	ldi	r18, 0x1E	; 30
 32a:	31 e0       	ldi	r19, 0x01	; 1
 32c:	20 83       	st	Z, r18
                idx -= 2;
 32e:	02 50       	subi	r16, 0x02	; 2
 330:	11 09       	sbc	r17, r1
                printf("\n\r%s\n\r", given_password);
 332:	9f 93       	push	r25
 334:	8f 93       	push	r24
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	91 e0       	ldi	r25, 0x01	; 1
 33a:	9f 93       	push	r25
 33c:	8f 93       	push	r24
 33e:	0e 94 2f 02 	call	0x45e	; 0x45e <printf>
 342:	0f 90       	pop	r0
 344:	0f 90       	pop	r0
 346:	0f 90       	pop	r0
 348:	0f 90       	pop	r0
 34a:	38 c0       	rjmp	.+112    	; 0x3bc <main+0x308>
            }
            else if (key_pressed == 0b11101011) {
 34c:	8b 3e       	cpi	r24, 0xEB	; 235
 34e:	69 f4       	brne	.+26     	; 0x36a <main+0x2b6>
                // 0
                printf("0");
 350:	80 e3       	ldi	r24, 0x30	; 48
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 45 02 	call	0x48a	; 0x48a <putchar>
                given_password[idx] = '0';
 358:	ed e1       	ldi	r30, 0x1D	; 29
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	ec 0f       	add	r30, r28
 35e:	fd 1f       	adc	r31, r29
 360:	e0 0f       	add	r30, r16
 362:	f1 1f       	adc	r31, r17
 364:	80 e3       	ldi	r24, 0x30	; 48
 366:	80 83       	st	Z, r24
 368:	29 c0       	rjmp	.+82     	; 0x3bc <main+0x308>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11101101) {
 36a:	8d 3e       	cpi	r24, 0xED	; 237
 36c:	c9 f4       	brne	.+50     	; 0x3a0 <main+0x2ec>
                // #
                printf("#");
 36e:	83 e2       	ldi	r24, 0x23	; 35
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 45 02 	call	0x48a	; 0x48a <putchar>
                int pw_validity = compare(password, given_password, idx);
 376:	a8 01       	movw	r20, r16
 378:	be 01       	movw	r22, r28
 37a:	63 5e       	subi	r22, 0xE3	; 227
 37c:	7f 4f       	sbci	r23, 0xFF	; 255
 37e:	87 e0       	ldi	r24, 0x07	; 7
 380:	91 e0       	ldi	r25, 0x01	; 1
 382:	0e 94 53 00 	call	0xa6	; 0xa6 <compare>
                printf("\n\rpw_validity %d\n\r", pw_validity);
 386:	9f 93       	push	r25
 388:	8f 93       	push	r24
 38a:	8c e0       	ldi	r24, 0x0C	; 12
 38c:	91 e0       	ldi	r25, 0x01	; 1
 38e:	9f 93       	push	r25
 390:	8f 93       	push	r24
 392:	0e 94 2f 02 	call	0x45e	; 0x45e <printf>
 396:	0f 90       	pop	r0
 398:	0f 90       	pop	r0
 39a:	0f 90       	pop	r0
 39c:	0f 90       	pop	r0
 39e:	0e c0       	rjmp	.+28     	; 0x3bc <main+0x308>
                //given_password[idx] = '#';
                //led_test();
            }
            else if (key_pressed == 0b11101110) {
 3a0:	8e 3e       	cpi	r24, 0xEE	; 238
 3a2:	61 f4       	brne	.+24     	; 0x3bc <main+0x308>
                // D
                printf("D");
 3a4:	84 e4       	ldi	r24, 0x44	; 68
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 45 02 	call	0x48a	; 0x48a <putchar>
                given_password[idx] = 'D';
 3ac:	ed e1       	ldi	r30, 0x1D	; 29
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	ec 0f       	add	r30, r28
 3b2:	fd 1f       	adc	r31, r29
 3b4:	e0 0f       	add	r30, r16
 3b6:	f1 1f       	adc	r31, r17
 3b8:	84 e4       	ldi	r24, 0x44	; 68
 3ba:	80 83       	st	Z, r24
                }
            }
            
            /* Initialization for new loop */
            // Set digital pins 6-9 (rows) as input and 10-13 (columns) as output
            DDRD &= 0b00111111;
 3bc:	8a b1       	in	r24, 0x0a	; 10
 3be:	8f 73       	andi	r24, 0x3F	; 63
 3c0:	8a b9       	out	0x0a, r24	; 10
            DDRB &= 0b11111100;
 3c2:	84 b1       	in	r24, 0x04	; 4
 3c4:	8c 7f       	andi	r24, 0xFC	; 252
 3c6:	84 b9       	out	0x04, r24	; 4
            DDRB |= 0b00111100;
 3c8:	84 b1       	in	r24, 0x04	; 4
 3ca:	8c 63       	ori	r24, 0x3C	; 60
 3cc:	84 b9       	out	0x04, r24	; 4
 3ce:	8f e9       	ldi	r24, 0x9F	; 159
 3d0:	9f e0       	ldi	r25, 0x0F	; 15
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <main+0x31e>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <main+0x324>
 3d8:	00 00       	nop
            _delay_ms(1);
    
            // Power the row pins
            PORTD |= 0b11000000;
 3da:	8b b1       	in	r24, 0x0b	; 11
 3dc:	80 6c       	ori	r24, 0xC0	; 192
 3de:	8b b9       	out	0x0b, r24	; 11
            PORTB |= 0b00000011;
 3e0:	85 b1       	in	r24, 0x05	; 5
 3e2:	83 60       	ori	r24, 0x03	; 3
 3e4:	85 b9       	out	0x05, r24	; 5
            PORTB &= 0b11000011;
 3e6:	85 b1       	in	r24, 0x05	; 5
 3e8:	83 7c       	andi	r24, 0xC3	; 195
 3ea:	85 b9       	out	0x05, r24	; 5
 3ec:	ef e9       	ldi	r30, 0x9F	; 159
 3ee:	ff e0       	ldi	r31, 0x0F	; 15
 3f0:	31 97       	sbiw	r30, 0x01	; 1
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <main+0x33c>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <main+0x342>
 3f6:	00 00       	nop
            _delay_ms(1);

            
            key_pressed = 0;
            idx +=1;
 3f8:	0f 5f       	subi	r16, 0xFF	; 255
 3fa:	1f 4f       	sbci	r17, 0xFF	; 255
 3fc:	ff ef       	ldi	r31, 0xFF	; 255
 3fe:	29 e6       	ldi	r18, 0x69	; 105
 400:	38 e1       	ldi	r19, 0x18	; 24
 402:	f1 50       	subi	r31, 0x01	; 1
 404:	20 40       	sbci	r18, 0x00	; 0
 406:	30 40       	sbci	r19, 0x00	; 0
 408:	e1 f7       	brne	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 40c:	00 00       	nop
 40e:	a0 ce       	rjmp	.-704    	; 0x150 <main+0x9c>

00000410 <USART_init>:
#include <stdio.h>


void USART_init(unsigned int ubrr) {
	// Set baud rate
	UBRR0H = (unsigned char) (ubrr>>8);
 410:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char) ubrr;
 414:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 418:	88 e1       	ldi	r24, 0x18	; 24
 41a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	// Set frame format: 8data, 2stop bit
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);
 41e:	8e e0       	ldi	r24, 0x0E	; 14
 420:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 424:	08 95       	ret

00000426 <USART_transmit>:
}

void USART_transmit(unsigned char data) {
	// Wait for empty transmit buffer
	while(!(UCSR0A & (1<<UDRE0)));
 426:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 42a:	95 ff       	sbrs	r25, 5
 42c:	fc cf       	rjmp	.-8      	; 0x426 <USART_transmit>
    
	// Put data into buffer, send the data
	UDR0 = data;
 42e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 432:	08 95       	ret

00000434 <USART_receive>:
}

unsigned char USART_receive(void) {
	// Wait for data to be received
	while(!(UCSR0A & (1<<RXC0)));
 434:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 438:	88 23       	and	r24, r24
 43a:	e4 f7       	brge	.-8      	; 0x434 <USART_receive>
	
	// Get and return received data from buffer
	return UDR0;
 43c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 440:	08 95       	ret

00000442 <strncmp>:
 442:	fb 01       	movw	r30, r22
 444:	dc 01       	movw	r26, r24
 446:	41 50       	subi	r20, 0x01	; 1
 448:	50 40       	sbci	r21, 0x00	; 0
 44a:	30 f0       	brcs	.+12     	; 0x458 <strncmp+0x16>
 44c:	8d 91       	ld	r24, X+
 44e:	01 90       	ld	r0, Z+
 450:	80 19       	sub	r24, r0
 452:	19 f4       	brne	.+6      	; 0x45a <strncmp+0x18>
 454:	00 20       	and	r0, r0
 456:	b9 f7       	brne	.-18     	; 0x446 <strncmp+0x4>
 458:	88 1b       	sub	r24, r24
 45a:	99 0b       	sbc	r25, r25
 45c:	08 95       	ret

0000045e <printf>:
 45e:	a0 e0       	ldi	r26, 0x00	; 0
 460:	b0 e0       	ldi	r27, 0x00	; 0
 462:	e5 e3       	ldi	r30, 0x35	; 53
 464:	f2 e0       	ldi	r31, 0x02	; 2
 466:	0c 94 ed 04 	jmp	0x9da	; 0x9da <__prologue_saves__+0x20>
 46a:	ae 01       	movw	r20, r28
 46c:	4b 5f       	subi	r20, 0xFB	; 251
 46e:	5f 4f       	sbci	r21, 0xFF	; 255
 470:	fa 01       	movw	r30, r20
 472:	61 91       	ld	r22, Z+
 474:	71 91       	ld	r23, Z+
 476:	af 01       	movw	r20, r30
 478:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end+0x2>
 47c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <__data_end+0x3>
 480:	0e 94 4c 02 	call	0x498	; 0x498 <vfprintf>
 484:	e2 e0       	ldi	r30, 0x02	; 2
 486:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__epilogue_restores__+0x20>

0000048a <putchar>:
 48a:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <__data_end+0x2>
 48e:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <__data_end+0x3>
 492:	0e 94 43 04 	call	0x886	; 0x886 <fputc>
 496:	08 95       	ret

00000498 <vfprintf>:
 498:	ab e0       	ldi	r26, 0x0B	; 11
 49a:	b0 e0       	ldi	r27, 0x00	; 0
 49c:	e2 e5       	ldi	r30, 0x52	; 82
 49e:	f2 e0       	ldi	r31, 0x02	; 2
 4a0:	0c 94 dd 04 	jmp	0x9ba	; 0x9ba <__prologue_saves__>
 4a4:	6c 01       	movw	r12, r24
 4a6:	7b 01       	movw	r14, r22
 4a8:	8a 01       	movw	r16, r20
 4aa:	fc 01       	movw	r30, r24
 4ac:	17 82       	std	Z+7, r1	; 0x07
 4ae:	16 82       	std	Z+6, r1	; 0x06
 4b0:	83 81       	ldd	r24, Z+3	; 0x03
 4b2:	81 ff       	sbrs	r24, 1
 4b4:	cc c1       	rjmp	.+920    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 4b6:	ce 01       	movw	r24, r28
 4b8:	01 96       	adiw	r24, 0x01	; 1
 4ba:	3c 01       	movw	r6, r24
 4bc:	f6 01       	movw	r30, r12
 4be:	93 81       	ldd	r25, Z+3	; 0x03
 4c0:	f7 01       	movw	r30, r14
 4c2:	93 fd       	sbrc	r25, 3
 4c4:	85 91       	lpm	r24, Z+
 4c6:	93 ff       	sbrs	r25, 3
 4c8:	81 91       	ld	r24, Z+
 4ca:	7f 01       	movw	r14, r30
 4cc:	88 23       	and	r24, r24
 4ce:	09 f4       	brne	.+2      	; 0x4d2 <vfprintf+0x3a>
 4d0:	ba c1       	rjmp	.+884    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 4d2:	85 32       	cpi	r24, 0x25	; 37
 4d4:	39 f4       	brne	.+14     	; 0x4e4 <vfprintf+0x4c>
 4d6:	93 fd       	sbrc	r25, 3
 4d8:	85 91       	lpm	r24, Z+
 4da:	93 ff       	sbrs	r25, 3
 4dc:	81 91       	ld	r24, Z+
 4de:	7f 01       	movw	r14, r30
 4e0:	85 32       	cpi	r24, 0x25	; 37
 4e2:	29 f4       	brne	.+10     	; 0x4ee <vfprintf+0x56>
 4e4:	b6 01       	movw	r22, r12
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	0e 94 43 04 	call	0x886	; 0x886 <fputc>
 4ec:	e7 cf       	rjmp	.-50     	; 0x4bc <vfprintf+0x24>
 4ee:	91 2c       	mov	r9, r1
 4f0:	21 2c       	mov	r2, r1
 4f2:	31 2c       	mov	r3, r1
 4f4:	ff e1       	ldi	r31, 0x1F	; 31
 4f6:	f3 15       	cp	r31, r3
 4f8:	d8 f0       	brcs	.+54     	; 0x530 <vfprintf+0x98>
 4fa:	8b 32       	cpi	r24, 0x2B	; 43
 4fc:	79 f0       	breq	.+30     	; 0x51c <vfprintf+0x84>
 4fe:	38 f4       	brcc	.+14     	; 0x50e <vfprintf+0x76>
 500:	80 32       	cpi	r24, 0x20	; 32
 502:	79 f0       	breq	.+30     	; 0x522 <vfprintf+0x8a>
 504:	83 32       	cpi	r24, 0x23	; 35
 506:	a1 f4       	brne	.+40     	; 0x530 <vfprintf+0x98>
 508:	23 2d       	mov	r18, r3
 50a:	20 61       	ori	r18, 0x10	; 16
 50c:	1d c0       	rjmp	.+58     	; 0x548 <vfprintf+0xb0>
 50e:	8d 32       	cpi	r24, 0x2D	; 45
 510:	61 f0       	breq	.+24     	; 0x52a <vfprintf+0x92>
 512:	80 33       	cpi	r24, 0x30	; 48
 514:	69 f4       	brne	.+26     	; 0x530 <vfprintf+0x98>
 516:	23 2d       	mov	r18, r3
 518:	21 60       	ori	r18, 0x01	; 1
 51a:	16 c0       	rjmp	.+44     	; 0x548 <vfprintf+0xb0>
 51c:	83 2d       	mov	r24, r3
 51e:	82 60       	ori	r24, 0x02	; 2
 520:	38 2e       	mov	r3, r24
 522:	e3 2d       	mov	r30, r3
 524:	e4 60       	ori	r30, 0x04	; 4
 526:	3e 2e       	mov	r3, r30
 528:	2a c0       	rjmp	.+84     	; 0x57e <vfprintf+0xe6>
 52a:	f3 2d       	mov	r31, r3
 52c:	f8 60       	ori	r31, 0x08	; 8
 52e:	1d c0       	rjmp	.+58     	; 0x56a <vfprintf+0xd2>
 530:	37 fc       	sbrc	r3, 7
 532:	2d c0       	rjmp	.+90     	; 0x58e <vfprintf+0xf6>
 534:	20 ed       	ldi	r18, 0xD0	; 208
 536:	28 0f       	add	r18, r24
 538:	2a 30       	cpi	r18, 0x0A	; 10
 53a:	40 f0       	brcs	.+16     	; 0x54c <vfprintf+0xb4>
 53c:	8e 32       	cpi	r24, 0x2E	; 46
 53e:	b9 f4       	brne	.+46     	; 0x56e <vfprintf+0xd6>
 540:	36 fc       	sbrc	r3, 6
 542:	81 c1       	rjmp	.+770    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 544:	23 2d       	mov	r18, r3
 546:	20 64       	ori	r18, 0x40	; 64
 548:	32 2e       	mov	r3, r18
 54a:	19 c0       	rjmp	.+50     	; 0x57e <vfprintf+0xe6>
 54c:	36 fe       	sbrs	r3, 6
 54e:	06 c0       	rjmp	.+12     	; 0x55c <vfprintf+0xc4>
 550:	8a e0       	ldi	r24, 0x0A	; 10
 552:	98 9e       	mul	r9, r24
 554:	20 0d       	add	r18, r0
 556:	11 24       	eor	r1, r1
 558:	92 2e       	mov	r9, r18
 55a:	11 c0       	rjmp	.+34     	; 0x57e <vfprintf+0xe6>
 55c:	ea e0       	ldi	r30, 0x0A	; 10
 55e:	2e 9e       	mul	r2, r30
 560:	20 0d       	add	r18, r0
 562:	11 24       	eor	r1, r1
 564:	22 2e       	mov	r2, r18
 566:	f3 2d       	mov	r31, r3
 568:	f0 62       	ori	r31, 0x20	; 32
 56a:	3f 2e       	mov	r3, r31
 56c:	08 c0       	rjmp	.+16     	; 0x57e <vfprintf+0xe6>
 56e:	8c 36       	cpi	r24, 0x6C	; 108
 570:	21 f4       	brne	.+8      	; 0x57a <vfprintf+0xe2>
 572:	83 2d       	mov	r24, r3
 574:	80 68       	ori	r24, 0x80	; 128
 576:	38 2e       	mov	r3, r24
 578:	02 c0       	rjmp	.+4      	; 0x57e <vfprintf+0xe6>
 57a:	88 36       	cpi	r24, 0x68	; 104
 57c:	41 f4       	brne	.+16     	; 0x58e <vfprintf+0xf6>
 57e:	f7 01       	movw	r30, r14
 580:	93 fd       	sbrc	r25, 3
 582:	85 91       	lpm	r24, Z+
 584:	93 ff       	sbrs	r25, 3
 586:	81 91       	ld	r24, Z+
 588:	7f 01       	movw	r14, r30
 58a:	81 11       	cpse	r24, r1
 58c:	b3 cf       	rjmp	.-154    	; 0x4f4 <vfprintf+0x5c>
 58e:	98 2f       	mov	r25, r24
 590:	9f 7d       	andi	r25, 0xDF	; 223
 592:	95 54       	subi	r25, 0x45	; 69
 594:	93 30       	cpi	r25, 0x03	; 3
 596:	28 f4       	brcc	.+10     	; 0x5a2 <vfprintf+0x10a>
 598:	0c 5f       	subi	r16, 0xFC	; 252
 59a:	1f 4f       	sbci	r17, 0xFF	; 255
 59c:	9f e3       	ldi	r25, 0x3F	; 63
 59e:	99 83       	std	Y+1, r25	; 0x01
 5a0:	0d c0       	rjmp	.+26     	; 0x5bc <vfprintf+0x124>
 5a2:	83 36       	cpi	r24, 0x63	; 99
 5a4:	31 f0       	breq	.+12     	; 0x5b2 <vfprintf+0x11a>
 5a6:	83 37       	cpi	r24, 0x73	; 115
 5a8:	71 f0       	breq	.+28     	; 0x5c6 <vfprintf+0x12e>
 5aa:	83 35       	cpi	r24, 0x53	; 83
 5ac:	09 f0       	breq	.+2      	; 0x5b0 <vfprintf+0x118>
 5ae:	59 c0       	rjmp	.+178    	; 0x662 <vfprintf+0x1ca>
 5b0:	21 c0       	rjmp	.+66     	; 0x5f4 <vfprintf+0x15c>
 5b2:	f8 01       	movw	r30, r16
 5b4:	80 81       	ld	r24, Z
 5b6:	89 83       	std	Y+1, r24	; 0x01
 5b8:	0e 5f       	subi	r16, 0xFE	; 254
 5ba:	1f 4f       	sbci	r17, 0xFF	; 255
 5bc:	88 24       	eor	r8, r8
 5be:	83 94       	inc	r8
 5c0:	91 2c       	mov	r9, r1
 5c2:	53 01       	movw	r10, r6
 5c4:	13 c0       	rjmp	.+38     	; 0x5ec <vfprintf+0x154>
 5c6:	28 01       	movw	r4, r16
 5c8:	f2 e0       	ldi	r31, 0x02	; 2
 5ca:	4f 0e       	add	r4, r31
 5cc:	51 1c       	adc	r5, r1
 5ce:	f8 01       	movw	r30, r16
 5d0:	a0 80       	ld	r10, Z
 5d2:	b1 80       	ldd	r11, Z+1	; 0x01
 5d4:	36 fe       	sbrs	r3, 6
 5d6:	03 c0       	rjmp	.+6      	; 0x5de <vfprintf+0x146>
 5d8:	69 2d       	mov	r22, r9
 5da:	70 e0       	ldi	r23, 0x00	; 0
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <vfprintf+0x14a>
 5de:	6f ef       	ldi	r22, 0xFF	; 255
 5e0:	7f ef       	ldi	r23, 0xFF	; 255
 5e2:	c5 01       	movw	r24, r10
 5e4:	0e 94 38 04 	call	0x870	; 0x870 <strnlen>
 5e8:	4c 01       	movw	r8, r24
 5ea:	82 01       	movw	r16, r4
 5ec:	f3 2d       	mov	r31, r3
 5ee:	ff 77       	andi	r31, 0x7F	; 127
 5f0:	3f 2e       	mov	r3, r31
 5f2:	16 c0       	rjmp	.+44     	; 0x620 <vfprintf+0x188>
 5f4:	28 01       	movw	r4, r16
 5f6:	22 e0       	ldi	r18, 0x02	; 2
 5f8:	42 0e       	add	r4, r18
 5fa:	51 1c       	adc	r5, r1
 5fc:	f8 01       	movw	r30, r16
 5fe:	a0 80       	ld	r10, Z
 600:	b1 80       	ldd	r11, Z+1	; 0x01
 602:	36 fe       	sbrs	r3, 6
 604:	03 c0       	rjmp	.+6      	; 0x60c <vfprintf+0x174>
 606:	69 2d       	mov	r22, r9
 608:	70 e0       	ldi	r23, 0x00	; 0
 60a:	02 c0       	rjmp	.+4      	; 0x610 <vfprintf+0x178>
 60c:	6f ef       	ldi	r22, 0xFF	; 255
 60e:	7f ef       	ldi	r23, 0xFF	; 255
 610:	c5 01       	movw	r24, r10
 612:	0e 94 2d 04 	call	0x85a	; 0x85a <strnlen_P>
 616:	4c 01       	movw	r8, r24
 618:	f3 2d       	mov	r31, r3
 61a:	f0 68       	ori	r31, 0x80	; 128
 61c:	3f 2e       	mov	r3, r31
 61e:	82 01       	movw	r16, r4
 620:	33 fc       	sbrc	r3, 3
 622:	1b c0       	rjmp	.+54     	; 0x65a <vfprintf+0x1c2>
 624:	82 2d       	mov	r24, r2
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	88 16       	cp	r8, r24
 62a:	99 06       	cpc	r9, r25
 62c:	b0 f4       	brcc	.+44     	; 0x65a <vfprintf+0x1c2>
 62e:	b6 01       	movw	r22, r12
 630:	80 e2       	ldi	r24, 0x20	; 32
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	0e 94 43 04 	call	0x886	; 0x886 <fputc>
 638:	2a 94       	dec	r2
 63a:	f4 cf       	rjmp	.-24     	; 0x624 <vfprintf+0x18c>
 63c:	f5 01       	movw	r30, r10
 63e:	37 fc       	sbrc	r3, 7
 640:	85 91       	lpm	r24, Z+
 642:	37 fe       	sbrs	r3, 7
 644:	81 91       	ld	r24, Z+
 646:	5f 01       	movw	r10, r30
 648:	b6 01       	movw	r22, r12
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	0e 94 43 04 	call	0x886	; 0x886 <fputc>
 650:	21 10       	cpse	r2, r1
 652:	2a 94       	dec	r2
 654:	21 e0       	ldi	r18, 0x01	; 1
 656:	82 1a       	sub	r8, r18
 658:	91 08       	sbc	r9, r1
 65a:	81 14       	cp	r8, r1
 65c:	91 04       	cpc	r9, r1
 65e:	71 f7       	brne	.-36     	; 0x63c <vfprintf+0x1a4>
 660:	e8 c0       	rjmp	.+464    	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 662:	84 36       	cpi	r24, 0x64	; 100
 664:	11 f0       	breq	.+4      	; 0x66a <vfprintf+0x1d2>
 666:	89 36       	cpi	r24, 0x69	; 105
 668:	41 f5       	brne	.+80     	; 0x6ba <vfprintf+0x222>
 66a:	f8 01       	movw	r30, r16
 66c:	37 fe       	sbrs	r3, 7
 66e:	07 c0       	rjmp	.+14     	; 0x67e <vfprintf+0x1e6>
 670:	60 81       	ld	r22, Z
 672:	71 81       	ldd	r23, Z+1	; 0x01
 674:	82 81       	ldd	r24, Z+2	; 0x02
 676:	93 81       	ldd	r25, Z+3	; 0x03
 678:	0c 5f       	subi	r16, 0xFC	; 252
 67a:	1f 4f       	sbci	r17, 0xFF	; 255
 67c:	08 c0       	rjmp	.+16     	; 0x68e <vfprintf+0x1f6>
 67e:	60 81       	ld	r22, Z
 680:	71 81       	ldd	r23, Z+1	; 0x01
 682:	07 2e       	mov	r0, r23
 684:	00 0c       	add	r0, r0
 686:	88 0b       	sbc	r24, r24
 688:	99 0b       	sbc	r25, r25
 68a:	0e 5f       	subi	r16, 0xFE	; 254
 68c:	1f 4f       	sbci	r17, 0xFF	; 255
 68e:	f3 2d       	mov	r31, r3
 690:	ff 76       	andi	r31, 0x6F	; 111
 692:	3f 2e       	mov	r3, r31
 694:	97 ff       	sbrs	r25, 7
 696:	09 c0       	rjmp	.+18     	; 0x6aa <vfprintf+0x212>
 698:	90 95       	com	r25
 69a:	80 95       	com	r24
 69c:	70 95       	com	r23
 69e:	61 95       	neg	r22
 6a0:	7f 4f       	sbci	r23, 0xFF	; 255
 6a2:	8f 4f       	sbci	r24, 0xFF	; 255
 6a4:	9f 4f       	sbci	r25, 0xFF	; 255
 6a6:	f0 68       	ori	r31, 0x80	; 128
 6a8:	3f 2e       	mov	r3, r31
 6aa:	2a e0       	ldi	r18, 0x0A	; 10
 6ac:	30 e0       	ldi	r19, 0x00	; 0
 6ae:	a3 01       	movw	r20, r6
 6b0:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__ultoa_invert>
 6b4:	88 2e       	mov	r8, r24
 6b6:	86 18       	sub	r8, r6
 6b8:	45 c0       	rjmp	.+138    	; 0x744 <vfprintf+0x2ac>
 6ba:	85 37       	cpi	r24, 0x75	; 117
 6bc:	31 f4       	brne	.+12     	; 0x6ca <vfprintf+0x232>
 6be:	23 2d       	mov	r18, r3
 6c0:	2f 7e       	andi	r18, 0xEF	; 239
 6c2:	b2 2e       	mov	r11, r18
 6c4:	2a e0       	ldi	r18, 0x0A	; 10
 6c6:	30 e0       	ldi	r19, 0x00	; 0
 6c8:	25 c0       	rjmp	.+74     	; 0x714 <vfprintf+0x27c>
 6ca:	93 2d       	mov	r25, r3
 6cc:	99 7f       	andi	r25, 0xF9	; 249
 6ce:	b9 2e       	mov	r11, r25
 6d0:	8f 36       	cpi	r24, 0x6F	; 111
 6d2:	c1 f0       	breq	.+48     	; 0x704 <vfprintf+0x26c>
 6d4:	18 f4       	brcc	.+6      	; 0x6dc <vfprintf+0x244>
 6d6:	88 35       	cpi	r24, 0x58	; 88
 6d8:	79 f0       	breq	.+30     	; 0x6f8 <vfprintf+0x260>
 6da:	b5 c0       	rjmp	.+362    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 6dc:	80 37       	cpi	r24, 0x70	; 112
 6de:	19 f0       	breq	.+6      	; 0x6e6 <vfprintf+0x24e>
 6e0:	88 37       	cpi	r24, 0x78	; 120
 6e2:	21 f0       	breq	.+8      	; 0x6ec <vfprintf+0x254>
 6e4:	b0 c0       	rjmp	.+352    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 6e6:	e9 2f       	mov	r30, r25
 6e8:	e0 61       	ori	r30, 0x10	; 16
 6ea:	be 2e       	mov	r11, r30
 6ec:	b4 fe       	sbrs	r11, 4
 6ee:	0d c0       	rjmp	.+26     	; 0x70a <vfprintf+0x272>
 6f0:	fb 2d       	mov	r31, r11
 6f2:	f4 60       	ori	r31, 0x04	; 4
 6f4:	bf 2e       	mov	r11, r31
 6f6:	09 c0       	rjmp	.+18     	; 0x70a <vfprintf+0x272>
 6f8:	34 fe       	sbrs	r3, 4
 6fa:	0a c0       	rjmp	.+20     	; 0x710 <vfprintf+0x278>
 6fc:	29 2f       	mov	r18, r25
 6fe:	26 60       	ori	r18, 0x06	; 6
 700:	b2 2e       	mov	r11, r18
 702:	06 c0       	rjmp	.+12     	; 0x710 <vfprintf+0x278>
 704:	28 e0       	ldi	r18, 0x08	; 8
 706:	30 e0       	ldi	r19, 0x00	; 0
 708:	05 c0       	rjmp	.+10     	; 0x714 <vfprintf+0x27c>
 70a:	20 e1       	ldi	r18, 0x10	; 16
 70c:	30 e0       	ldi	r19, 0x00	; 0
 70e:	02 c0       	rjmp	.+4      	; 0x714 <vfprintf+0x27c>
 710:	20 e1       	ldi	r18, 0x10	; 16
 712:	32 e0       	ldi	r19, 0x02	; 2
 714:	f8 01       	movw	r30, r16
 716:	b7 fe       	sbrs	r11, 7
 718:	07 c0       	rjmp	.+14     	; 0x728 <vfprintf+0x290>
 71a:	60 81       	ld	r22, Z
 71c:	71 81       	ldd	r23, Z+1	; 0x01
 71e:	82 81       	ldd	r24, Z+2	; 0x02
 720:	93 81       	ldd	r25, Z+3	; 0x03
 722:	0c 5f       	subi	r16, 0xFC	; 252
 724:	1f 4f       	sbci	r17, 0xFF	; 255
 726:	06 c0       	rjmp	.+12     	; 0x734 <vfprintf+0x29c>
 728:	60 81       	ld	r22, Z
 72a:	71 81       	ldd	r23, Z+1	; 0x01
 72c:	80 e0       	ldi	r24, 0x00	; 0
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	0e 5f       	subi	r16, 0xFE	; 254
 732:	1f 4f       	sbci	r17, 0xFF	; 255
 734:	a3 01       	movw	r20, r6
 736:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__ultoa_invert>
 73a:	88 2e       	mov	r8, r24
 73c:	86 18       	sub	r8, r6
 73e:	fb 2d       	mov	r31, r11
 740:	ff 77       	andi	r31, 0x7F	; 127
 742:	3f 2e       	mov	r3, r31
 744:	36 fe       	sbrs	r3, 6
 746:	0d c0       	rjmp	.+26     	; 0x762 <vfprintf+0x2ca>
 748:	23 2d       	mov	r18, r3
 74a:	2e 7f       	andi	r18, 0xFE	; 254
 74c:	a2 2e       	mov	r10, r18
 74e:	89 14       	cp	r8, r9
 750:	58 f4       	brcc	.+22     	; 0x768 <vfprintf+0x2d0>
 752:	34 fe       	sbrs	r3, 4
 754:	0b c0       	rjmp	.+22     	; 0x76c <vfprintf+0x2d4>
 756:	32 fc       	sbrc	r3, 2
 758:	09 c0       	rjmp	.+18     	; 0x76c <vfprintf+0x2d4>
 75a:	83 2d       	mov	r24, r3
 75c:	8e 7e       	andi	r24, 0xEE	; 238
 75e:	a8 2e       	mov	r10, r24
 760:	05 c0       	rjmp	.+10     	; 0x76c <vfprintf+0x2d4>
 762:	b8 2c       	mov	r11, r8
 764:	a3 2c       	mov	r10, r3
 766:	03 c0       	rjmp	.+6      	; 0x76e <vfprintf+0x2d6>
 768:	b8 2c       	mov	r11, r8
 76a:	01 c0       	rjmp	.+2      	; 0x76e <vfprintf+0x2d6>
 76c:	b9 2c       	mov	r11, r9
 76e:	a4 fe       	sbrs	r10, 4
 770:	0f c0       	rjmp	.+30     	; 0x790 <vfprintf+0x2f8>
 772:	fe 01       	movw	r30, r28
 774:	e8 0d       	add	r30, r8
 776:	f1 1d       	adc	r31, r1
 778:	80 81       	ld	r24, Z
 77a:	80 33       	cpi	r24, 0x30	; 48
 77c:	21 f4       	brne	.+8      	; 0x786 <vfprintf+0x2ee>
 77e:	9a 2d       	mov	r25, r10
 780:	99 7e       	andi	r25, 0xE9	; 233
 782:	a9 2e       	mov	r10, r25
 784:	09 c0       	rjmp	.+18     	; 0x798 <vfprintf+0x300>
 786:	a2 fe       	sbrs	r10, 2
 788:	06 c0       	rjmp	.+12     	; 0x796 <vfprintf+0x2fe>
 78a:	b3 94       	inc	r11
 78c:	b3 94       	inc	r11
 78e:	04 c0       	rjmp	.+8      	; 0x798 <vfprintf+0x300>
 790:	8a 2d       	mov	r24, r10
 792:	86 78       	andi	r24, 0x86	; 134
 794:	09 f0       	breq	.+2      	; 0x798 <vfprintf+0x300>
 796:	b3 94       	inc	r11
 798:	a3 fc       	sbrc	r10, 3
 79a:	11 c0       	rjmp	.+34     	; 0x7be <vfprintf+0x326>
 79c:	a0 fe       	sbrs	r10, 0
 79e:	06 c0       	rjmp	.+12     	; 0x7ac <vfprintf+0x314>
 7a0:	b2 14       	cp	r11, r2
 7a2:	88 f4       	brcc	.+34     	; 0x7c6 <vfprintf+0x32e>
 7a4:	28 0c       	add	r2, r8
 7a6:	92 2c       	mov	r9, r2
 7a8:	9b 18       	sub	r9, r11
 7aa:	0e c0       	rjmp	.+28     	; 0x7c8 <vfprintf+0x330>
 7ac:	b2 14       	cp	r11, r2
 7ae:	60 f4       	brcc	.+24     	; 0x7c8 <vfprintf+0x330>
 7b0:	b6 01       	movw	r22, r12
 7b2:	80 e2       	ldi	r24, 0x20	; 32
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	0e 94 43 04 	call	0x886	; 0x886 <fputc>
 7ba:	b3 94       	inc	r11
 7bc:	f7 cf       	rjmp	.-18     	; 0x7ac <vfprintf+0x314>
 7be:	b2 14       	cp	r11, r2
 7c0:	18 f4       	brcc	.+6      	; 0x7c8 <vfprintf+0x330>
 7c2:	2b 18       	sub	r2, r11
 7c4:	02 c0       	rjmp	.+4      	; 0x7ca <vfprintf+0x332>
 7c6:	98 2c       	mov	r9, r8
 7c8:	21 2c       	mov	r2, r1
 7ca:	a4 fe       	sbrs	r10, 4
 7cc:	10 c0       	rjmp	.+32     	; 0x7ee <vfprintf+0x356>
 7ce:	b6 01       	movw	r22, r12
 7d0:	80 e3       	ldi	r24, 0x30	; 48
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	0e 94 43 04 	call	0x886	; 0x886 <fputc>
 7d8:	a2 fe       	sbrs	r10, 2
 7da:	17 c0       	rjmp	.+46     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7dc:	a1 fc       	sbrc	r10, 1
 7de:	03 c0       	rjmp	.+6      	; 0x7e6 <vfprintf+0x34e>
 7e0:	88 e7       	ldi	r24, 0x78	; 120
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	02 c0       	rjmp	.+4      	; 0x7ea <vfprintf+0x352>
 7e6:	88 e5       	ldi	r24, 0x58	; 88
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	b6 01       	movw	r22, r12
 7ec:	0c c0       	rjmp	.+24     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7ee:	8a 2d       	mov	r24, r10
 7f0:	86 78       	andi	r24, 0x86	; 134
 7f2:	59 f0       	breq	.+22     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7f4:	a1 fe       	sbrs	r10, 1
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <vfprintf+0x364>
 7f8:	8b e2       	ldi	r24, 0x2B	; 43
 7fa:	01 c0       	rjmp	.+2      	; 0x7fe <vfprintf+0x366>
 7fc:	80 e2       	ldi	r24, 0x20	; 32
 7fe:	a7 fc       	sbrc	r10, 7
 800:	8d e2       	ldi	r24, 0x2D	; 45
 802:	b6 01       	movw	r22, r12
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	0e 94 43 04 	call	0x886	; 0x886 <fputc>
 80a:	89 14       	cp	r8, r9
 80c:	38 f4       	brcc	.+14     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 80e:	b6 01       	movw	r22, r12
 810:	80 e3       	ldi	r24, 0x30	; 48
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	0e 94 43 04 	call	0x886	; 0x886 <fputc>
 818:	9a 94       	dec	r9
 81a:	f7 cf       	rjmp	.-18     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 81c:	8a 94       	dec	r8
 81e:	f3 01       	movw	r30, r6
 820:	e8 0d       	add	r30, r8
 822:	f1 1d       	adc	r31, r1
 824:	80 81       	ld	r24, Z
 826:	b6 01       	movw	r22, r12
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	0e 94 43 04 	call	0x886	; 0x886 <fputc>
 82e:	81 10       	cpse	r8, r1
 830:	f5 cf       	rjmp	.-22     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 832:	22 20       	and	r2, r2
 834:	09 f4       	brne	.+2      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 836:	42 ce       	rjmp	.-892    	; 0x4bc <vfprintf+0x24>
 838:	b6 01       	movw	r22, r12
 83a:	80 e2       	ldi	r24, 0x20	; 32
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	0e 94 43 04 	call	0x886	; 0x886 <fputc>
 842:	2a 94       	dec	r2
 844:	f6 cf       	rjmp	.-20     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 846:	f6 01       	movw	r30, r12
 848:	86 81       	ldd	r24, Z+6	; 0x06
 84a:	97 81       	ldd	r25, Z+7	; 0x07
 84c:	02 c0       	rjmp	.+4      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 84e:	8f ef       	ldi	r24, 0xFF	; 255
 850:	9f ef       	ldi	r25, 0xFF	; 255
 852:	2b 96       	adiw	r28, 0x0b	; 11
 854:	e2 e1       	ldi	r30, 0x12	; 18
 856:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <__epilogue_restores__>

0000085a <strnlen_P>:
 85a:	fc 01       	movw	r30, r24
 85c:	05 90       	lpm	r0, Z+
 85e:	61 50       	subi	r22, 0x01	; 1
 860:	70 40       	sbci	r23, 0x00	; 0
 862:	01 10       	cpse	r0, r1
 864:	d8 f7       	brcc	.-10     	; 0x85c <strnlen_P+0x2>
 866:	80 95       	com	r24
 868:	90 95       	com	r25
 86a:	8e 0f       	add	r24, r30
 86c:	9f 1f       	adc	r25, r31
 86e:	08 95       	ret

00000870 <strnlen>:
 870:	fc 01       	movw	r30, r24
 872:	61 50       	subi	r22, 0x01	; 1
 874:	70 40       	sbci	r23, 0x00	; 0
 876:	01 90       	ld	r0, Z+
 878:	01 10       	cpse	r0, r1
 87a:	d8 f7       	brcc	.-10     	; 0x872 <strnlen+0x2>
 87c:	80 95       	com	r24
 87e:	90 95       	com	r25
 880:	8e 0f       	add	r24, r30
 882:	9f 1f       	adc	r25, r31
 884:	08 95       	ret

00000886 <fputc>:
 886:	0f 93       	push	r16
 888:	1f 93       	push	r17
 88a:	cf 93       	push	r28
 88c:	df 93       	push	r29
 88e:	fb 01       	movw	r30, r22
 890:	23 81       	ldd	r18, Z+3	; 0x03
 892:	21 fd       	sbrc	r18, 1
 894:	03 c0       	rjmp	.+6      	; 0x89c <fputc+0x16>
 896:	8f ef       	ldi	r24, 0xFF	; 255
 898:	9f ef       	ldi	r25, 0xFF	; 255
 89a:	2c c0       	rjmp	.+88     	; 0x8f4 <fputc+0x6e>
 89c:	22 ff       	sbrs	r18, 2
 89e:	16 c0       	rjmp	.+44     	; 0x8cc <fputc+0x46>
 8a0:	46 81       	ldd	r20, Z+6	; 0x06
 8a2:	57 81       	ldd	r21, Z+7	; 0x07
 8a4:	24 81       	ldd	r18, Z+4	; 0x04
 8a6:	35 81       	ldd	r19, Z+5	; 0x05
 8a8:	42 17       	cp	r20, r18
 8aa:	53 07       	cpc	r21, r19
 8ac:	44 f4       	brge	.+16     	; 0x8be <fputc+0x38>
 8ae:	a0 81       	ld	r26, Z
 8b0:	b1 81       	ldd	r27, Z+1	; 0x01
 8b2:	9d 01       	movw	r18, r26
 8b4:	2f 5f       	subi	r18, 0xFF	; 255
 8b6:	3f 4f       	sbci	r19, 0xFF	; 255
 8b8:	31 83       	std	Z+1, r19	; 0x01
 8ba:	20 83       	st	Z, r18
 8bc:	8c 93       	st	X, r24
 8be:	26 81       	ldd	r18, Z+6	; 0x06
 8c0:	37 81       	ldd	r19, Z+7	; 0x07
 8c2:	2f 5f       	subi	r18, 0xFF	; 255
 8c4:	3f 4f       	sbci	r19, 0xFF	; 255
 8c6:	37 83       	std	Z+7, r19	; 0x07
 8c8:	26 83       	std	Z+6, r18	; 0x06
 8ca:	14 c0       	rjmp	.+40     	; 0x8f4 <fputc+0x6e>
 8cc:	8b 01       	movw	r16, r22
 8ce:	ec 01       	movw	r28, r24
 8d0:	fb 01       	movw	r30, r22
 8d2:	00 84       	ldd	r0, Z+8	; 0x08
 8d4:	f1 85       	ldd	r31, Z+9	; 0x09
 8d6:	e0 2d       	mov	r30, r0
 8d8:	09 95       	icall
 8da:	89 2b       	or	r24, r25
 8dc:	e1 f6       	brne	.-72     	; 0x896 <fputc+0x10>
 8de:	d8 01       	movw	r26, r16
 8e0:	16 96       	adiw	r26, 0x06	; 6
 8e2:	8d 91       	ld	r24, X+
 8e4:	9c 91       	ld	r25, X
 8e6:	17 97       	sbiw	r26, 0x07	; 7
 8e8:	01 96       	adiw	r24, 0x01	; 1
 8ea:	17 96       	adiw	r26, 0x07	; 7
 8ec:	9c 93       	st	X, r25
 8ee:	8e 93       	st	-X, r24
 8f0:	16 97       	sbiw	r26, 0x06	; 6
 8f2:	ce 01       	movw	r24, r28
 8f4:	df 91       	pop	r29
 8f6:	cf 91       	pop	r28
 8f8:	1f 91       	pop	r17
 8fa:	0f 91       	pop	r16
 8fc:	08 95       	ret

000008fe <__ultoa_invert>:
 8fe:	fa 01       	movw	r30, r20
 900:	aa 27       	eor	r26, r26
 902:	28 30       	cpi	r18, 0x08	; 8
 904:	51 f1       	breq	.+84     	; 0x95a <__stack+0x5b>
 906:	20 31       	cpi	r18, 0x10	; 16
 908:	81 f1       	breq	.+96     	; 0x96a <__stack+0x6b>
 90a:	e8 94       	clt
 90c:	6f 93       	push	r22
 90e:	6e 7f       	andi	r22, 0xFE	; 254
 910:	6e 5f       	subi	r22, 0xFE	; 254
 912:	7f 4f       	sbci	r23, 0xFF	; 255
 914:	8f 4f       	sbci	r24, 0xFF	; 255
 916:	9f 4f       	sbci	r25, 0xFF	; 255
 918:	af 4f       	sbci	r26, 0xFF	; 255
 91a:	b1 e0       	ldi	r27, 0x01	; 1
 91c:	3e d0       	rcall	.+124    	; 0x99a <__stack+0x9b>
 91e:	b4 e0       	ldi	r27, 0x04	; 4
 920:	3c d0       	rcall	.+120    	; 0x99a <__stack+0x9b>
 922:	67 0f       	add	r22, r23
 924:	78 1f       	adc	r23, r24
 926:	89 1f       	adc	r24, r25
 928:	9a 1f       	adc	r25, r26
 92a:	a1 1d       	adc	r26, r1
 92c:	68 0f       	add	r22, r24
 92e:	79 1f       	adc	r23, r25
 930:	8a 1f       	adc	r24, r26
 932:	91 1d       	adc	r25, r1
 934:	a1 1d       	adc	r26, r1
 936:	6a 0f       	add	r22, r26
 938:	71 1d       	adc	r23, r1
 93a:	81 1d       	adc	r24, r1
 93c:	91 1d       	adc	r25, r1
 93e:	a1 1d       	adc	r26, r1
 940:	20 d0       	rcall	.+64     	; 0x982 <__stack+0x83>
 942:	09 f4       	brne	.+2      	; 0x946 <__stack+0x47>
 944:	68 94       	set
 946:	3f 91       	pop	r19
 948:	2a e0       	ldi	r18, 0x0A	; 10
 94a:	26 9f       	mul	r18, r22
 94c:	11 24       	eor	r1, r1
 94e:	30 19       	sub	r19, r0
 950:	30 5d       	subi	r19, 0xD0	; 208
 952:	31 93       	st	Z+, r19
 954:	de f6       	brtc	.-74     	; 0x90c <__stack+0xd>
 956:	cf 01       	movw	r24, r30
 958:	08 95       	ret
 95a:	46 2f       	mov	r20, r22
 95c:	47 70       	andi	r20, 0x07	; 7
 95e:	40 5d       	subi	r20, 0xD0	; 208
 960:	41 93       	st	Z+, r20
 962:	b3 e0       	ldi	r27, 0x03	; 3
 964:	0f d0       	rcall	.+30     	; 0x984 <__stack+0x85>
 966:	c9 f7       	brne	.-14     	; 0x95a <__stack+0x5b>
 968:	f6 cf       	rjmp	.-20     	; 0x956 <__stack+0x57>
 96a:	46 2f       	mov	r20, r22
 96c:	4f 70       	andi	r20, 0x0F	; 15
 96e:	40 5d       	subi	r20, 0xD0	; 208
 970:	4a 33       	cpi	r20, 0x3A	; 58
 972:	18 f0       	brcs	.+6      	; 0x97a <__stack+0x7b>
 974:	49 5d       	subi	r20, 0xD9	; 217
 976:	31 fd       	sbrc	r19, 1
 978:	40 52       	subi	r20, 0x20	; 32
 97a:	41 93       	st	Z+, r20
 97c:	02 d0       	rcall	.+4      	; 0x982 <__stack+0x83>
 97e:	a9 f7       	brne	.-22     	; 0x96a <__stack+0x6b>
 980:	ea cf       	rjmp	.-44     	; 0x956 <__stack+0x57>
 982:	b4 e0       	ldi	r27, 0x04	; 4
 984:	a6 95       	lsr	r26
 986:	97 95       	ror	r25
 988:	87 95       	ror	r24
 98a:	77 95       	ror	r23
 98c:	67 95       	ror	r22
 98e:	ba 95       	dec	r27
 990:	c9 f7       	brne	.-14     	; 0x984 <__stack+0x85>
 992:	00 97       	sbiw	r24, 0x00	; 0
 994:	61 05       	cpc	r22, r1
 996:	71 05       	cpc	r23, r1
 998:	08 95       	ret
 99a:	9b 01       	movw	r18, r22
 99c:	ac 01       	movw	r20, r24
 99e:	0a 2e       	mov	r0, r26
 9a0:	06 94       	lsr	r0
 9a2:	57 95       	ror	r21
 9a4:	47 95       	ror	r20
 9a6:	37 95       	ror	r19
 9a8:	27 95       	ror	r18
 9aa:	ba 95       	dec	r27
 9ac:	c9 f7       	brne	.-14     	; 0x9a0 <__stack+0xa1>
 9ae:	62 0f       	add	r22, r18
 9b0:	73 1f       	adc	r23, r19
 9b2:	84 1f       	adc	r24, r20
 9b4:	95 1f       	adc	r25, r21
 9b6:	a0 1d       	adc	r26, r0
 9b8:	08 95       	ret

000009ba <__prologue_saves__>:
 9ba:	2f 92       	push	r2
 9bc:	3f 92       	push	r3
 9be:	4f 92       	push	r4
 9c0:	5f 92       	push	r5
 9c2:	6f 92       	push	r6
 9c4:	7f 92       	push	r7
 9c6:	8f 92       	push	r8
 9c8:	9f 92       	push	r9
 9ca:	af 92       	push	r10
 9cc:	bf 92       	push	r11
 9ce:	cf 92       	push	r12
 9d0:	df 92       	push	r13
 9d2:	ef 92       	push	r14
 9d4:	ff 92       	push	r15
 9d6:	0f 93       	push	r16
 9d8:	1f 93       	push	r17
 9da:	cf 93       	push	r28
 9dc:	df 93       	push	r29
 9de:	cd b7       	in	r28, 0x3d	; 61
 9e0:	de b7       	in	r29, 0x3e	; 62
 9e2:	ca 1b       	sub	r28, r26
 9e4:	db 0b       	sbc	r29, r27
 9e6:	0f b6       	in	r0, 0x3f	; 63
 9e8:	f8 94       	cli
 9ea:	de bf       	out	0x3e, r29	; 62
 9ec:	0f be       	out	0x3f, r0	; 63
 9ee:	cd bf       	out	0x3d, r28	; 61
 9f0:	09 94       	ijmp

000009f2 <__epilogue_restores__>:
 9f2:	2a 88       	ldd	r2, Y+18	; 0x12
 9f4:	39 88       	ldd	r3, Y+17	; 0x11
 9f6:	48 88       	ldd	r4, Y+16	; 0x10
 9f8:	5f 84       	ldd	r5, Y+15	; 0x0f
 9fa:	6e 84       	ldd	r6, Y+14	; 0x0e
 9fc:	7d 84       	ldd	r7, Y+13	; 0x0d
 9fe:	8c 84       	ldd	r8, Y+12	; 0x0c
 a00:	9b 84       	ldd	r9, Y+11	; 0x0b
 a02:	aa 84       	ldd	r10, Y+10	; 0x0a
 a04:	b9 84       	ldd	r11, Y+9	; 0x09
 a06:	c8 84       	ldd	r12, Y+8	; 0x08
 a08:	df 80       	ldd	r13, Y+7	; 0x07
 a0a:	ee 80       	ldd	r14, Y+6	; 0x06
 a0c:	fd 80       	ldd	r15, Y+5	; 0x05
 a0e:	0c 81       	ldd	r16, Y+4	; 0x04
 a10:	1b 81       	ldd	r17, Y+3	; 0x03
 a12:	aa 81       	ldd	r26, Y+2	; 0x02
 a14:	b9 81       	ldd	r27, Y+1	; 0x01
 a16:	ce 0f       	add	r28, r30
 a18:	d1 1d       	adc	r29, r1
 a1a:	0f b6       	in	r0, 0x3f	; 63
 a1c:	f8 94       	cli
 a1e:	de bf       	out	0x3e, r29	; 62
 a20:	0f be       	out	0x3f, r0	; 63
 a22:	cd bf       	out	0x3d, r28	; 61
 a24:	ed 01       	movw	r28, r26
 a26:	08 95       	ret

00000a28 <_exit>:
 a28:	f8 94       	cli

00000a2a <__stop_program>:
 a2a:	ff cf       	rjmp	.-2      	; 0xa2a <__stop_program>
