
KeypadTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00000ab0  00000b44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ab0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800136  00800136  00000b7a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b7a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d02  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087b  00000000  00000000  0000197a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000065d  00000000  00000000  000021f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00002854  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a3  00000000  00000000  000028ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a5  00000000  00000000  00002d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00003134  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 eb       	ldi	r30, 0xB0	; 176
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 33       	cpi	r26, 0x36	; 54
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e3       	ldi	r26, 0x36	; 54
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 33       	cpi	r26, 0x3C	; 60
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 90 00 	call	0x120	; 0x120 <main>
  9e:	0c 94 56 05 	jmp	0xaac	; 0xaac <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <led_test>:

#define BITMASK_D 0b00000011
#define BITMASK_B 0b111111

void led_test(void){
    PORTD &= ~(1 << PD3);
  a6:	8b b1       	in	r24, 0x0b	; 11
  a8:	87 7f       	andi	r24, 0xF7	; 247
  aa:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f e3       	ldi	r18, 0x3F	; 63
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	93 e0       	ldi	r25, 0x03	; 3
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <led_test+0xc>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <led_test+0x16>
  bc:	00 00       	nop
    _delay_ms(1000);
    PORTD |= (1 << PD3);
  be:	8b b1       	in	r24, 0x0b	; 11
  c0:	88 60       	ori	r24, 0x08	; 8
  c2:	8b b9       	out	0x0b, r24	; 11
  c4:	2f e3       	ldi	r18, 0x3F	; 63
  c6:	8d e0       	ldi	r24, 0x0D	; 13
  c8:	93 e0       	ldi	r25, 0x03	; 3
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <led_test+0x24>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <led_test+0x2e>
  d4:	00 00       	nop
    _delay_ms(1000);
    PORTD &= ~(1 << PD3);
  d6:	8b b1       	in	r24, 0x0b	; 11
  d8:	87 7f       	andi	r24, 0xF7	; 247
  da:	8b b9       	out	0x0b, r24	; 11
  dc:	2f e3       	ldi	r18, 0x3F	; 63
  de:	8d e0       	ldi	r24, 0x0D	; 13
  e0:	93 e0       	ldi	r25, 0x03	; 3
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <led_test+0x3c>
  ea:	00 c0       	rjmp	.+0      	; 0xec <led_test+0x46>
  ec:	00 00       	nop
  ee:	08 95       	ret

000000f0 <compare>:
    _delay_ms(1000);
}

int compare(char *password, char *given_password){
    if (strcmp(password, given_password) != 0) {
  f0:	0e 94 6f 02 	call	0x4de	; 0x4de <strcmp>
  f4:	89 2b       	or	r24, r25
  f6:	89 f0       	breq	.+34     	; 0x11a <compare+0x2a>
        led_test();
  f8:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
 104:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
 108:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
 10c:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
 110:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        return 0;
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	08 95       	ret
    }
    else {
        return 1;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
    }
}
 11e:	08 95       	ret

00000120 <main>:

int main(void)
{
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	6c 97       	sbiw	r28, 0x1c	; 28
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	f8 94       	cli
 12e:	de bf       	out	0x3e, r29	; 62
 130:	0f be       	out	0x3f, r0	; 63
 132:	cd bf       	out	0x3d, r28	; 61
    /********************testing****************************/
    //DDRD |= (1 << PD3);
    
    char input;
    FILE uart_output = FDEV_SETUP_STREAM(USART_transmit, NULL, _FDEV_SETUP_WRITE);
 134:	8e e0       	ldi	r24, 0x0E	; 14
 136:	9e 01       	movw	r18, r28
 138:	2f 5f       	subi	r18, 0xFF	; 255
 13a:	3f 4f       	sbci	r19, 0xFF	; 255
 13c:	79 01       	movw	r14, r18
 13e:	f9 01       	movw	r30, r18
 140:	28 2f       	mov	r18, r24
 142:	11 92       	st	Z+, r1
 144:	2a 95       	dec	r18
 146:	e9 f7       	brne	.-6      	; 0x142 <main+0x22>
 148:	92 e0       	ldi	r25, 0x02	; 2
 14a:	9c 83       	std	Y+4, r25	; 0x04
 14c:	21 e6       	ldi	r18, 0x61	; 97
 14e:	32 e0       	ldi	r19, 0x02	; 2
 150:	3a 87       	std	Y+10, r19	; 0x0a
 152:	29 87       	std	Y+9, r18	; 0x09
    FILE uart_input = FDEV_SETUP_STREAM(NULL, USART_receive, _FDEV_SETUP_READ);
 154:	8e 01       	movw	r16, r28
 156:	01 5f       	subi	r16, 0xF1	; 241
 158:	1f 4f       	sbci	r17, 0xFF	; 255
 15a:	f8 01       	movw	r30, r16
 15c:	11 92       	st	Z+, r1
 15e:	8a 95       	dec	r24
 160:	e9 f7       	brne	.-6      	; 0x15c <main+0x3c>
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	8a 8b       	std	Y+18, r24	; 0x12
 166:	88 e6       	ldi	r24, 0x68	; 104
 168:	92 e0       	ldi	r25, 0x02	; 2
 16a:	9a 8f       	std	Y+26, r25	; 0x1a
 16c:	89 8f       	std	Y+25, r24	; 0x19
        
    USART_init(UBRR);
 16e:	87 e6       	ldi	r24, 0x67	; 103
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 56 02 	call	0x4ac	; 0x4ac <USART_init>
        
    stdout = &uart_output;
 176:	e6 e3       	ldi	r30, 0x36	; 54
 178:	f1 e0       	ldi	r31, 0x01	; 1
 17a:	f3 82       	std	Z+3, r15	; 0x03
 17c:	e2 82       	std	Z+2, r14	; 0x02
    stdin = &uart_input;
 17e:	11 83       	std	Z+1, r17	; 0x01
 180:	00 83       	st	Z, r16
    char* password = "0123";
    char* given_password = "xxxx";
    int idx = 0;
    
    // Set digital pins 6-9 (rows) as output and 10-13 (columns) as input
    DDRD |= 0b00000000;
 182:	8a b1       	in	r24, 0x0a	; 10
 184:	8a b9       	out	0x0a, r24	; 10
    DDRB |= 0b001111;
 186:	84 b1       	in	r24, 0x04	; 4
 188:	8f 60       	ori	r24, 0x0F	; 15
 18a:	84 b9       	out	0x04, r24	; 4
 18c:	89 ef       	ldi	r24, 0xF9	; 249
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <main+0x70>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0x76>
 196:	00 00       	nop
    _delay_ms(1);
    
    // Power the row pins
    //PORTD |= (1 << PD6) | (1 << PD7);
    PORTD = 0b00000011;
 198:	83 e0       	ldi	r24, 0x03	; 3
 19a:	8b b9       	out	0x0b, r24	; 11
    PORTB = 0b00110000;
 19c:	80 e3       	ldi	r24, 0x30	; 48
 19e:	85 b9       	out	0x05, r24	; 5
    stdin = &uart_input;
    /******************************************************/
    
    char* password = "0123";
    char* given_password = "xxxx";
    int idx = 0;
 1a0:	c1 2c       	mov	r12, r1
 1a2:	d1 2c       	mov	r13, r1
    uint8_t portb_vals;
    uint8_t portd_vals;
    
    while (1) 
    { 
        portd_vals = ((PIND & BITMASK_D) << 6);
 1a4:	09 b1       	in	r16, 0x09	; 9
 1a6:	90 e4       	ldi	r25, 0x40	; 64
 1a8:	09 9f       	mul	r16, r25
 1aa:	80 01       	movw	r16, r0
 1ac:	11 24       	eor	r1, r1
        portb_vals = PINB & BITMASK_B;
 1ae:	83 b1       	in	r24, 0x03	; 3
 1b0:	8f 73       	andi	r24, 0x3F	; 63
 1b2:	e8 2e       	mov	r14, r24
        keypad_vals = portd_vals | portb_vals;
 1b4:	f8 2e       	mov	r15, r24
 1b6:	f0 2a       	or	r15, r16
        
        printf("Keypad_vals %d\n\r", keypad_vals);
 1b8:	1f 92       	push	r1
 1ba:	ff 92       	push	r15
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	9f 93       	push	r25
 1c2:	8f 93       	push	r24
 1c4:	0e 94 78 02 	call	0x4f0	; 0x4f0 <printf>
        keypad_vals &= 0b00001111;
 1c8:	ef 2d       	mov	r30, r15
 1ca:	ef 70       	andi	r30, 0x0F	; 15
 1cc:	fe 2e       	mov	r15, r30
        
        printf("%d %d %d PIND: %d\n\r", keypad_vals, portd_vals, portb_vals, PIND);
 1ce:	89 b1       	in	r24, 0x09	; 9
 1d0:	1f 92       	push	r1
 1d2:	8f 93       	push	r24
 1d4:	1f 92       	push	r1
 1d6:	ef 92       	push	r14
 1d8:	11 27       	eor	r17, r17
 1da:	1f 93       	push	r17
 1dc:	0f 93       	push	r16
 1de:	1f 92       	push	r1
 1e0:	ef 93       	push	r30
 1e2:	81 e1       	ldi	r24, 0x11	; 17
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	9f 93       	push	r25
 1e8:	8f 93       	push	r24
 1ea:	0e 94 78 02 	call	0x4f0	; 0x4f0 <printf>
        if (keypad_vals != 0b00000000) {     // If any of row pins goes low (!??)
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	f8 94       	cli
 1f2:	de bf       	out	0x3e, r29	; 62
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	cd bf       	out	0x3d, r28	; 61
 1f8:	ff 20       	and	r15, r15
 1fa:	a1 f2       	breq	.-88     	; 0x1a4 <main+0x84>
            printf("loop\n\r");
 1fc:	85 e2       	ldi	r24, 0x25	; 37
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	9f 93       	push	r25
 202:	8f 93       	push	r24
 204:	0e 94 78 02 	call	0x4f0	; 0x4f0 <printf>
 208:	83 ec       	ldi	r24, 0xC3	; 195
 20a:	99 e0       	ldi	r25, 0x09	; 9
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <main+0xec>
 210:	00 c0       	rjmp	.+0      	; 0x212 <main+0xf2>
 212:	00 00       	nop
            key_pressed = keypad_vals;
            _delay_ms(10);
            
            // Make rows as inputs and columns as outputs
            DDRD ^= 0b00000011;
 214:	9a b1       	in	r25, 0x0a	; 10
 216:	83 e0       	ldi	r24, 0x03	; 3
 218:	89 27       	eor	r24, r25
 21a:	8a b9       	out	0x0a, r24	; 10
            DDRB ^= 0b00111111;
 21c:	94 b1       	in	r25, 0x04	; 4
 21e:	8f e3       	ldi	r24, 0x3F	; 63
 220:	89 27       	eor	r24, r25
 222:	84 b9       	out	0x04, r24	; 4
 224:	e9 ef       	ldi	r30, 0xF9	; 249
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	31 97       	sbiw	r30, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <main+0x108>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <main+0x10e>
 22e:	00 00       	nop
            
            _delay_ms(1);
             PORTB ^= 0b00001111;        // Power the columns
 230:	95 b1       	in	r25, 0x05	; 5
 232:	8f e0       	ldi	r24, 0x0F	; 15
 234:	89 27       	eor	r24, r25
 236:	85 b9       	out	0x05, r24	; 5
 238:	87 ea       	ldi	r24, 0xA7	; 167
 23a:	91 e6       	ldi	r25, 0x61	; 97
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <main+0x11c>
 240:	00 c0       	rjmp	.+0      	; 0x242 <main+0x122>
 242:	00 00       	nop
            _delay_ms(100);
            
            portd_vals = ((PIND & BITMASK_D) << 6);
 244:	89 b1       	in	r24, 0x09	; 9
 246:	e0 e4       	ldi	r30, 0x40	; 64
 248:	8e 9f       	mul	r24, r30
 24a:	c0 01       	movw	r24, r0
 24c:	11 24       	eor	r1, r1
            portb_vals = PINB & BITMASK_B;
 24e:	13 b1       	in	r17, 0x03	; 3
 250:	1f 73       	andi	r17, 0x3F	; 63
            keypad_vals = portd_vals | portb_vals;
 252:	18 2b       	or	r17, r24
            keypad_vals &= 0b11110000;
 254:	10 7f       	andi	r17, 0xF0	; 240
            
            key_pressed |= keypad_vals;    // The variable has now both row and column values as 0, others as 1
 256:	1f 29       	or	r17, r15
            printf("%d\n\r", key_pressed);
 258:	1f 92       	push	r1
 25a:	1f 93       	push	r17
 25c:	80 e2       	ldi	r24, 0x20	; 32
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	9f 93       	push	r25
 262:	8f 93       	push	r24
 264:	0e 94 78 02 	call	0x4f0	; 0x4f0 <printf>
            
            if (key_pressed == 0b01110111) {
 268:	0f 90       	pop	r0
 26a:	0f 90       	pop	r0
 26c:	0f 90       	pop	r0
 26e:	0f 90       	pop	r0
 270:	0f 90       	pop	r0
 272:	0f 90       	pop	r0
 274:	17 37       	cpi	r17, 0x77	; 119
 276:	79 f4       	brne	.+30     	; 0x296 <main+0x176>
                // Key 1 pressed
                given_password[idx] = '1';
 278:	81 e3       	ldi	r24, 0x31	; 49
 27a:	f6 01       	movw	r30, r12
 27c:	e4 5d       	subi	r30, 0xD4	; 212
 27e:	fe 4f       	sbci	r31, 0xFE	; 254
 280:	80 83       	st	Z, r24
                if (password[idx] == '1') {
 282:	f6 01       	movw	r30, r12
 284:	ef 5c       	subi	r30, 0xCF	; 207
 286:	fe 4f       	sbci	r31, 0xFE	; 254
 288:	80 81       	ld	r24, Z
 28a:	81 33       	cpi	r24, 0x31	; 49
 28c:	09 f0       	breq	.+2      	; 0x290 <main+0x170>
 28e:	f5 c0       	rjmp	.+490    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
                    led_test();
 290:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 294:	f2 c0       	rjmp	.+484    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b01111011) {
 296:	1b 37       	cpi	r17, 0x7B	; 123
 298:	79 f4       	brne	.+30     	; 0x2b8 <main+0x198>
                // Key 2 pressed
                given_password[idx] = '2';
 29a:	82 e3       	ldi	r24, 0x32	; 50
 29c:	f6 01       	movw	r30, r12
 29e:	e4 5d       	subi	r30, 0xD4	; 212
 2a0:	fe 4f       	sbci	r31, 0xFE	; 254
 2a2:	80 83       	st	Z, r24
                if (password[idx] == '2') {
 2a4:	f6 01       	movw	r30, r12
 2a6:	ef 5c       	subi	r30, 0xCF	; 207
 2a8:	fe 4f       	sbci	r31, 0xFE	; 254
 2aa:	80 81       	ld	r24, Z
 2ac:	82 33       	cpi	r24, 0x32	; 50
 2ae:	09 f0       	breq	.+2      	; 0x2b2 <main+0x192>
 2b0:	e4 c0       	rjmp	.+456    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
                    led_test();
 2b2:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 2b6:	e1 c0       	rjmp	.+450    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b01111101) {
 2b8:	1d 37       	cpi	r17, 0x7D	; 125
 2ba:	79 f4       	brne	.+30     	; 0x2da <main+0x1ba>
                // Key 3 pressed
                given_password[idx] = '3';
 2bc:	83 e3       	ldi	r24, 0x33	; 51
 2be:	f6 01       	movw	r30, r12
 2c0:	e4 5d       	subi	r30, 0xD4	; 212
 2c2:	fe 4f       	sbci	r31, 0xFE	; 254
 2c4:	80 83       	st	Z, r24
                if (password[idx] == '3') {
 2c6:	f6 01       	movw	r30, r12
 2c8:	ef 5c       	subi	r30, 0xCF	; 207
 2ca:	fe 4f       	sbci	r31, 0xFE	; 254
 2cc:	80 81       	ld	r24, Z
 2ce:	83 33       	cpi	r24, 0x33	; 51
 2d0:	09 f0       	breq	.+2      	; 0x2d4 <main+0x1b4>
 2d2:	d3 c0       	rjmp	.+422    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
                    led_test();
 2d4:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 2d8:	d0 c0       	rjmp	.+416    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b01111110) {
 2da:	1e 37       	cpi	r17, 0x7E	; 126
 2dc:	79 f4       	brne	.+30     	; 0x2fc <main+0x1dc>
                // A
                given_password[idx] = 'A';
 2de:	81 e4       	ldi	r24, 0x41	; 65
 2e0:	f6 01       	movw	r30, r12
 2e2:	e4 5d       	subi	r30, 0xD4	; 212
 2e4:	fe 4f       	sbci	r31, 0xFE	; 254
 2e6:	80 83       	st	Z, r24
                if (password[idx] == 'A') {
 2e8:	f6 01       	movw	r30, r12
 2ea:	ef 5c       	subi	r30, 0xCF	; 207
 2ec:	fe 4f       	sbci	r31, 0xFE	; 254
 2ee:	80 81       	ld	r24, Z
 2f0:	81 34       	cpi	r24, 0x41	; 65
 2f2:	09 f0       	breq	.+2      	; 0x2f6 <main+0x1d6>
 2f4:	c2 c0       	rjmp	.+388    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
                    led_test();
 2f6:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 2fa:	bf c0       	rjmp	.+382    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b10110111) {
 2fc:	17 3b       	cpi	r17, 0xB7	; 183
 2fe:	79 f4       	brne	.+30     	; 0x31e <main+0x1fe>
                // 4
                given_password[idx] = '4';
 300:	84 e3       	ldi	r24, 0x34	; 52
 302:	f6 01       	movw	r30, r12
 304:	e4 5d       	subi	r30, 0xD4	; 212
 306:	fe 4f       	sbci	r31, 0xFE	; 254
 308:	80 83       	st	Z, r24
                if (password[idx] == '4') {
 30a:	f6 01       	movw	r30, r12
 30c:	ef 5c       	subi	r30, 0xCF	; 207
 30e:	fe 4f       	sbci	r31, 0xFE	; 254
 310:	80 81       	ld	r24, Z
 312:	84 33       	cpi	r24, 0x34	; 52
 314:	09 f0       	breq	.+2      	; 0x318 <main+0x1f8>
 316:	b1 c0       	rjmp	.+354    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
                    led_test();
 318:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 31c:	ae c0       	rjmp	.+348    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b10111011) {
 31e:	1b 3b       	cpi	r17, 0xBB	; 187
 320:	79 f4       	brne	.+30     	; 0x340 <main+0x220>
                // 5
                given_password[idx] = '5';
 322:	85 e3       	ldi	r24, 0x35	; 53
 324:	f6 01       	movw	r30, r12
 326:	e4 5d       	subi	r30, 0xD4	; 212
 328:	fe 4f       	sbci	r31, 0xFE	; 254
 32a:	80 83       	st	Z, r24
                if (password[idx] == '5') {
 32c:	f6 01       	movw	r30, r12
 32e:	ef 5c       	subi	r30, 0xCF	; 207
 330:	fe 4f       	sbci	r31, 0xFE	; 254
 332:	80 81       	ld	r24, Z
 334:	85 33       	cpi	r24, 0x35	; 53
 336:	09 f0       	breq	.+2      	; 0x33a <main+0x21a>
 338:	a0 c0       	rjmp	.+320    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
                    led_test();
 33a:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 33e:	9d c0       	rjmp	.+314    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b10111101) {
 340:	1d 3b       	cpi	r17, 0xBD	; 189
 342:	79 f4       	brne	.+30     	; 0x362 <main+0x242>
                // 6
                given_password[idx] = '6';
 344:	86 e3       	ldi	r24, 0x36	; 54
 346:	f6 01       	movw	r30, r12
 348:	e4 5d       	subi	r30, 0xD4	; 212
 34a:	fe 4f       	sbci	r31, 0xFE	; 254
 34c:	80 83       	st	Z, r24
                if (password[idx] == '6') {
 34e:	f6 01       	movw	r30, r12
 350:	ef 5c       	subi	r30, 0xCF	; 207
 352:	fe 4f       	sbci	r31, 0xFE	; 254
 354:	80 81       	ld	r24, Z
 356:	86 33       	cpi	r24, 0x36	; 54
 358:	09 f0       	breq	.+2      	; 0x35c <main+0x23c>
 35a:	8f c0       	rjmp	.+286    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
                    led_test();
 35c:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 360:	8c c0       	rjmp	.+280    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b10111110) {
 362:	1e 3b       	cpi	r17, 0xBE	; 190
 364:	79 f4       	brne	.+30     	; 0x384 <main+0x264>
                // B
                given_password[idx] = 'B';
 366:	82 e4       	ldi	r24, 0x42	; 66
 368:	f6 01       	movw	r30, r12
 36a:	e4 5d       	subi	r30, 0xD4	; 212
 36c:	fe 4f       	sbci	r31, 0xFE	; 254
 36e:	80 83       	st	Z, r24
                if (password[idx] == 'B') {
 370:	f6 01       	movw	r30, r12
 372:	ef 5c       	subi	r30, 0xCF	; 207
 374:	fe 4f       	sbci	r31, 0xFE	; 254
 376:	80 81       	ld	r24, Z
 378:	82 34       	cpi	r24, 0x42	; 66
 37a:	09 f0       	breq	.+2      	; 0x37e <main+0x25e>
 37c:	7e c0       	rjmp	.+252    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
                    led_test();
 37e:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 382:	7b c0       	rjmp	.+246    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11010111) {
 384:	17 3d       	cpi	r17, 0xD7	; 215
 386:	79 f4       	brne	.+30     	; 0x3a6 <main+0x286>
                // 7
                given_password[idx] = '7';
 388:	87 e3       	ldi	r24, 0x37	; 55
 38a:	f6 01       	movw	r30, r12
 38c:	e4 5d       	subi	r30, 0xD4	; 212
 38e:	fe 4f       	sbci	r31, 0xFE	; 254
 390:	80 83       	st	Z, r24
                if (password[idx] == '7') {
 392:	f6 01       	movw	r30, r12
 394:	ef 5c       	subi	r30, 0xCF	; 207
 396:	fe 4f       	sbci	r31, 0xFE	; 254
 398:	80 81       	ld	r24, Z
 39a:	87 33       	cpi	r24, 0x37	; 55
 39c:	09 f0       	breq	.+2      	; 0x3a0 <main+0x280>
 39e:	6d c0       	rjmp	.+218    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
                    led_test();
 3a0:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 3a4:	6a c0       	rjmp	.+212    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11011011) {
 3a6:	1b 3d       	cpi	r17, 0xDB	; 219
 3a8:	79 f4       	brne	.+30     	; 0x3c8 <main+0x2a8>
                // 8
                given_password[idx] = '8';
 3aa:	88 e3       	ldi	r24, 0x38	; 56
 3ac:	f6 01       	movw	r30, r12
 3ae:	e4 5d       	subi	r30, 0xD4	; 212
 3b0:	fe 4f       	sbci	r31, 0xFE	; 254
 3b2:	80 83       	st	Z, r24
                if (password[idx] == '8') {
 3b4:	f6 01       	movw	r30, r12
 3b6:	ef 5c       	subi	r30, 0xCF	; 207
 3b8:	fe 4f       	sbci	r31, 0xFE	; 254
 3ba:	80 81       	ld	r24, Z
 3bc:	88 33       	cpi	r24, 0x38	; 56
 3be:	09 f0       	breq	.+2      	; 0x3c2 <main+0x2a2>
 3c0:	5c c0       	rjmp	.+184    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
                    led_test();
 3c2:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 3c6:	59 c0       	rjmp	.+178    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11011101) {
 3c8:	1d 3d       	cpi	r17, 0xDD	; 221
 3ca:	79 f4       	brne	.+30     	; 0x3ea <main+0x2ca>
                // 9
                given_password[idx] = '9';
 3cc:	89 e3       	ldi	r24, 0x39	; 57
 3ce:	f6 01       	movw	r30, r12
 3d0:	e4 5d       	subi	r30, 0xD4	; 212
 3d2:	fe 4f       	sbci	r31, 0xFE	; 254
 3d4:	80 83       	st	Z, r24
                if (password[idx] == '9') {
 3d6:	f6 01       	movw	r30, r12
 3d8:	ef 5c       	subi	r30, 0xCF	; 207
 3da:	fe 4f       	sbci	r31, 0xFE	; 254
 3dc:	80 81       	ld	r24, Z
 3de:	89 33       	cpi	r24, 0x39	; 57
 3e0:	09 f0       	breq	.+2      	; 0x3e4 <main+0x2c4>
 3e2:	4b c0       	rjmp	.+150    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
                    led_test();
 3e4:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 3e8:	48 c0       	rjmp	.+144    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11011110) {
 3ea:	1e 3d       	cpi	r17, 0xDE	; 222
 3ec:	71 f4       	brne	.+28     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
                // C
                given_password[idx] = 'C';
 3ee:	83 e4       	ldi	r24, 0x43	; 67
 3f0:	f6 01       	movw	r30, r12
 3f2:	e4 5d       	subi	r30, 0xD4	; 212
 3f4:	fe 4f       	sbci	r31, 0xFE	; 254
 3f6:	80 83       	st	Z, r24
                if (password[idx] == 'C') {
 3f8:	f6 01       	movw	r30, r12
 3fa:	ef 5c       	subi	r30, 0xCF	; 207
 3fc:	fe 4f       	sbci	r31, 0xFE	; 254
 3fe:	80 81       	ld	r24, Z
 400:	83 34       	cpi	r24, 0x43	; 67
 402:	d9 f5       	brne	.+118    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
                    led_test();
 404:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 408:	38 c0       	rjmp	.+112    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11100111) {
 40a:	17 3e       	cpi	r17, 0xE7	; 231
 40c:	71 f4       	brne	.+28     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
                // *
                // TODO: make this the backspace button
                given_password[idx] = '*';
 40e:	8a e2       	ldi	r24, 0x2A	; 42
 410:	f6 01       	movw	r30, r12
 412:	e4 5d       	subi	r30, 0xD4	; 212
 414:	fe 4f       	sbci	r31, 0xFE	; 254
 416:	80 83       	st	Z, r24
                if (password[idx] == '*') {
 418:	f6 01       	movw	r30, r12
 41a:	ef 5c       	subi	r30, 0xCF	; 207
 41c:	fe 4f       	sbci	r31, 0xFE	; 254
 41e:	80 81       	ld	r24, Z
 420:	8a 32       	cpi	r24, 0x2A	; 42
 422:	59 f5       	brne	.+86     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
                    led_test();
 424:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 428:	28 c0       	rjmp	.+80     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11101011) {
 42a:	1b 3e       	cpi	r17, 0xEB	; 235
 42c:	71 f4       	brne	.+28     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
                // 0
                given_password[idx] = '0';
 42e:	80 e3       	ldi	r24, 0x30	; 48
 430:	f6 01       	movw	r30, r12
 432:	e4 5d       	subi	r30, 0xD4	; 212
 434:	fe 4f       	sbci	r31, 0xFE	; 254
 436:	80 83       	st	Z, r24
                if (password[idx] == '0') {
 438:	f6 01       	movw	r30, r12
 43a:	ef 5c       	subi	r30, 0xCF	; 207
 43c:	fe 4f       	sbci	r31, 0xFE	; 254
 43e:	80 81       	ld	r24, Z
 440:	80 33       	cpi	r24, 0x30	; 48
 442:	d9 f4       	brne	.+54     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
                    led_test();
 444:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 448:	18 c0       	rjmp	.+48     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11101101) {
 44a:	1d 3e       	cpi	r17, 0xED	; 237
 44c:	39 f4       	brne	.+14     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
                // #
                compare(password, given_password);
 44e:	6c e2       	ldi	r22, 0x2C	; 44
 450:	71 e0       	ldi	r23, 0x01	; 1
 452:	81 e3       	ldi	r24, 0x31	; 49
 454:	91 e0       	ldi	r25, 0x01	; 1
 456:	0e 94 78 00 	call	0xf0	; 0xf0 <compare>
 45a:	0f c0       	rjmp	.+30     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
                //printf("#");
                //given_password[idx] = '#';
                //led_test();
            }
            else if (key_pressed == 0b11101110) {
 45c:	1e 3e       	cpi	r17, 0xEE	; 238
 45e:	69 f4       	brne	.+26     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
                // D
                given_password[idx] = 'D';
 460:	84 e4       	ldi	r24, 0x44	; 68
 462:	f6 01       	movw	r30, r12
 464:	e4 5d       	subi	r30, 0xD4	; 212
 466:	fe 4f       	sbci	r31, 0xFE	; 254
 468:	80 83       	st	Z, r24
                if (password[idx] == 'D') {
 46a:	f6 01       	movw	r30, r12
 46c:	ef 5c       	subi	r30, 0xCF	; 207
 46e:	fe 4f       	sbci	r31, 0xFE	; 254
 470:	80 81       	ld	r24, Z
 472:	84 34       	cpi	r24, 0x44	; 68
 474:	11 f4       	brne	.+4      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
                    led_test();
 476:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
                    //wait
                }
            }*/
            
            // Set digital pins 6-9 (rows) as output and 10-13 (columns) as input
            DDRD |= 0b00000000;
 47a:	8a b1       	in	r24, 0x0a	; 10
 47c:	8a b9       	out	0x0a, r24	; 10
            DDRB |= 0b001111;
 47e:	84 b1       	in	r24, 0x04	; 4
 480:	8f 60       	ori	r24, 0x0F	; 15
 482:	84 b9       	out	0x04, r24	; 4
 484:	89 ef       	ldi	r24, 0xF9	; 249
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	01 97       	sbiw	r24, 0x01	; 1
 48a:	f1 f7       	brne	.-4      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 48e:	00 00       	nop
            _delay_ms(1);
            
            // Power the row pins
            PORTD = 0b00000011;
 490:	83 e0       	ldi	r24, 0x03	; 3
 492:	8b b9       	out	0x0b, r24	; 11
            PORTB = 0b00110000;
 494:	80 e3       	ldi	r24, 0x30	; 48
 496:	85 b9       	out	0x05, r24	; 5
            
            key_pressed = 0;
            idx +=1;
 498:	9f ef       	ldi	r25, 0xFF	; 255
 49a:	c9 1a       	sub	r12, r25
 49c:	d9 0a       	sbc	r13, r25
 49e:	e3 ec       	ldi	r30, 0xC3	; 195
 4a0:	f9 e0       	ldi	r31, 0x09	; 9
 4a2:	31 97       	sbiw	r30, 0x01	; 1
 4a4:	f1 f7       	brne	.-4      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 4a8:	00 00       	nop
 4aa:	7c ce       	rjmp	.-776    	; 0x1a4 <main+0x84>

000004ac <USART_init>:
#include <stdio.h>


void USART_init(unsigned int ubrr) {
	// Set baud rate
	UBRR0H = (unsigned char) (ubrr>>8);
 4ac:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char) ubrr;
 4b0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 4b4:	88 e1       	ldi	r24, 0x18	; 24
 4b6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	// Set frame format: 8data, 2stop bit
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);
 4ba:	8e e0       	ldi	r24, 0x0E	; 14
 4bc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 4c0:	08 95       	ret

000004c2 <USART_transmit>:
}

void USART_transmit(unsigned char data) {
	// Wait for empty transmit buffer
	while(!(UCSR0A & (1<<UDRE0)));
 4c2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 4c6:	95 ff       	sbrs	r25, 5
 4c8:	fc cf       	rjmp	.-8      	; 0x4c2 <USART_transmit>
    
	// Put data into buffer, send the data
	UDR0 = data;
 4ca:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 4ce:	08 95       	ret

000004d0 <USART_receive>:
}

unsigned char USART_receive(void) {
	// Wait for data to be received
	while(!(UCSR0A & (1<<RXC0)));
 4d0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 4d4:	88 23       	and	r24, r24
 4d6:	e4 f7       	brge	.-8      	; 0x4d0 <USART_receive>
	
	// Get and return received data from buffer
	return UDR0;
 4d8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 4dc:	08 95       	ret

000004de <strcmp>:
 4de:	fb 01       	movw	r30, r22
 4e0:	dc 01       	movw	r26, r24
 4e2:	8d 91       	ld	r24, X+
 4e4:	01 90       	ld	r0, Z+
 4e6:	80 19       	sub	r24, r0
 4e8:	01 10       	cpse	r0, r1
 4ea:	d9 f3       	breq	.-10     	; 0x4e2 <strcmp+0x4>
 4ec:	99 0b       	sbc	r25, r25
 4ee:	08 95       	ret

000004f0 <printf>:
 4f0:	a0 e0       	ldi	r26, 0x00	; 0
 4f2:	b0 e0       	ldi	r27, 0x00	; 0
 4f4:	ee e7       	ldi	r30, 0x7E	; 126
 4f6:	f2 e0       	ldi	r31, 0x02	; 2
 4f8:	0c 94 2f 05 	jmp	0xa5e	; 0xa5e <__prologue_saves__+0x20>
 4fc:	ae 01       	movw	r20, r28
 4fe:	4b 5f       	subi	r20, 0xFB	; 251
 500:	5f 4f       	sbci	r21, 0xFF	; 255
 502:	fa 01       	movw	r30, r20
 504:	61 91       	ld	r22, Z+
 506:	71 91       	ld	r23, Z+
 508:	af 01       	movw	r20, r30
 50a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end+0x2>
 50e:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x3>
 512:	0e 94 8e 02 	call	0x51c	; 0x51c <vfprintf>
 516:	e2 e0       	ldi	r30, 0x02	; 2
 518:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__epilogue_restores__+0x20>

0000051c <vfprintf>:
 51c:	ab e0       	ldi	r26, 0x0B	; 11
 51e:	b0 e0       	ldi	r27, 0x00	; 0
 520:	e4 e9       	ldi	r30, 0x94	; 148
 522:	f2 e0       	ldi	r31, 0x02	; 2
 524:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <__prologue_saves__>
 528:	6c 01       	movw	r12, r24
 52a:	7b 01       	movw	r14, r22
 52c:	8a 01       	movw	r16, r20
 52e:	fc 01       	movw	r30, r24
 530:	17 82       	std	Z+7, r1	; 0x07
 532:	16 82       	std	Z+6, r1	; 0x06
 534:	83 81       	ldd	r24, Z+3	; 0x03
 536:	81 ff       	sbrs	r24, 1
 538:	cc c1       	rjmp	.+920    	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
 53a:	ce 01       	movw	r24, r28
 53c:	01 96       	adiw	r24, 0x01	; 1
 53e:	3c 01       	movw	r6, r24
 540:	f6 01       	movw	r30, r12
 542:	93 81       	ldd	r25, Z+3	; 0x03
 544:	f7 01       	movw	r30, r14
 546:	93 fd       	sbrc	r25, 3
 548:	85 91       	lpm	r24, Z+
 54a:	93 ff       	sbrs	r25, 3
 54c:	81 91       	ld	r24, Z+
 54e:	7f 01       	movw	r14, r30
 550:	88 23       	and	r24, r24
 552:	09 f4       	brne	.+2      	; 0x556 <vfprintf+0x3a>
 554:	ba c1       	rjmp	.+884    	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 556:	85 32       	cpi	r24, 0x25	; 37
 558:	39 f4       	brne	.+14     	; 0x568 <vfprintf+0x4c>
 55a:	93 fd       	sbrc	r25, 3
 55c:	85 91       	lpm	r24, Z+
 55e:	93 ff       	sbrs	r25, 3
 560:	81 91       	ld	r24, Z+
 562:	7f 01       	movw	r14, r30
 564:	85 32       	cpi	r24, 0x25	; 37
 566:	29 f4       	brne	.+10     	; 0x572 <vfprintf+0x56>
 568:	b6 01       	movw	r22, r12
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	0e 94 85 04 	call	0x90a	; 0x90a <fputc>
 570:	e7 cf       	rjmp	.-50     	; 0x540 <vfprintf+0x24>
 572:	91 2c       	mov	r9, r1
 574:	21 2c       	mov	r2, r1
 576:	31 2c       	mov	r3, r1
 578:	ff e1       	ldi	r31, 0x1F	; 31
 57a:	f3 15       	cp	r31, r3
 57c:	d8 f0       	brcs	.+54     	; 0x5b4 <vfprintf+0x98>
 57e:	8b 32       	cpi	r24, 0x2B	; 43
 580:	79 f0       	breq	.+30     	; 0x5a0 <vfprintf+0x84>
 582:	38 f4       	brcc	.+14     	; 0x592 <vfprintf+0x76>
 584:	80 32       	cpi	r24, 0x20	; 32
 586:	79 f0       	breq	.+30     	; 0x5a6 <vfprintf+0x8a>
 588:	83 32       	cpi	r24, 0x23	; 35
 58a:	a1 f4       	brne	.+40     	; 0x5b4 <vfprintf+0x98>
 58c:	23 2d       	mov	r18, r3
 58e:	20 61       	ori	r18, 0x10	; 16
 590:	1d c0       	rjmp	.+58     	; 0x5cc <vfprintf+0xb0>
 592:	8d 32       	cpi	r24, 0x2D	; 45
 594:	61 f0       	breq	.+24     	; 0x5ae <vfprintf+0x92>
 596:	80 33       	cpi	r24, 0x30	; 48
 598:	69 f4       	brne	.+26     	; 0x5b4 <vfprintf+0x98>
 59a:	23 2d       	mov	r18, r3
 59c:	21 60       	ori	r18, 0x01	; 1
 59e:	16 c0       	rjmp	.+44     	; 0x5cc <vfprintf+0xb0>
 5a0:	83 2d       	mov	r24, r3
 5a2:	82 60       	ori	r24, 0x02	; 2
 5a4:	38 2e       	mov	r3, r24
 5a6:	e3 2d       	mov	r30, r3
 5a8:	e4 60       	ori	r30, 0x04	; 4
 5aa:	3e 2e       	mov	r3, r30
 5ac:	2a c0       	rjmp	.+84     	; 0x602 <vfprintf+0xe6>
 5ae:	f3 2d       	mov	r31, r3
 5b0:	f8 60       	ori	r31, 0x08	; 8
 5b2:	1d c0       	rjmp	.+58     	; 0x5ee <vfprintf+0xd2>
 5b4:	37 fc       	sbrc	r3, 7
 5b6:	2d c0       	rjmp	.+90     	; 0x612 <vfprintf+0xf6>
 5b8:	20 ed       	ldi	r18, 0xD0	; 208
 5ba:	28 0f       	add	r18, r24
 5bc:	2a 30       	cpi	r18, 0x0A	; 10
 5be:	40 f0       	brcs	.+16     	; 0x5d0 <vfprintf+0xb4>
 5c0:	8e 32       	cpi	r24, 0x2E	; 46
 5c2:	b9 f4       	brne	.+46     	; 0x5f2 <vfprintf+0xd6>
 5c4:	36 fc       	sbrc	r3, 6
 5c6:	81 c1       	rjmp	.+770    	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 5c8:	23 2d       	mov	r18, r3
 5ca:	20 64       	ori	r18, 0x40	; 64
 5cc:	32 2e       	mov	r3, r18
 5ce:	19 c0       	rjmp	.+50     	; 0x602 <vfprintf+0xe6>
 5d0:	36 fe       	sbrs	r3, 6
 5d2:	06 c0       	rjmp	.+12     	; 0x5e0 <vfprintf+0xc4>
 5d4:	8a e0       	ldi	r24, 0x0A	; 10
 5d6:	98 9e       	mul	r9, r24
 5d8:	20 0d       	add	r18, r0
 5da:	11 24       	eor	r1, r1
 5dc:	92 2e       	mov	r9, r18
 5de:	11 c0       	rjmp	.+34     	; 0x602 <vfprintf+0xe6>
 5e0:	ea e0       	ldi	r30, 0x0A	; 10
 5e2:	2e 9e       	mul	r2, r30
 5e4:	20 0d       	add	r18, r0
 5e6:	11 24       	eor	r1, r1
 5e8:	22 2e       	mov	r2, r18
 5ea:	f3 2d       	mov	r31, r3
 5ec:	f0 62       	ori	r31, 0x20	; 32
 5ee:	3f 2e       	mov	r3, r31
 5f0:	08 c0       	rjmp	.+16     	; 0x602 <vfprintf+0xe6>
 5f2:	8c 36       	cpi	r24, 0x6C	; 108
 5f4:	21 f4       	brne	.+8      	; 0x5fe <vfprintf+0xe2>
 5f6:	83 2d       	mov	r24, r3
 5f8:	80 68       	ori	r24, 0x80	; 128
 5fa:	38 2e       	mov	r3, r24
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <vfprintf+0xe6>
 5fe:	88 36       	cpi	r24, 0x68	; 104
 600:	41 f4       	brne	.+16     	; 0x612 <vfprintf+0xf6>
 602:	f7 01       	movw	r30, r14
 604:	93 fd       	sbrc	r25, 3
 606:	85 91       	lpm	r24, Z+
 608:	93 ff       	sbrs	r25, 3
 60a:	81 91       	ld	r24, Z+
 60c:	7f 01       	movw	r14, r30
 60e:	81 11       	cpse	r24, r1
 610:	b3 cf       	rjmp	.-154    	; 0x578 <vfprintf+0x5c>
 612:	98 2f       	mov	r25, r24
 614:	9f 7d       	andi	r25, 0xDF	; 223
 616:	95 54       	subi	r25, 0x45	; 69
 618:	93 30       	cpi	r25, 0x03	; 3
 61a:	28 f4       	brcc	.+10     	; 0x626 <vfprintf+0x10a>
 61c:	0c 5f       	subi	r16, 0xFC	; 252
 61e:	1f 4f       	sbci	r17, 0xFF	; 255
 620:	9f e3       	ldi	r25, 0x3F	; 63
 622:	99 83       	std	Y+1, r25	; 0x01
 624:	0d c0       	rjmp	.+26     	; 0x640 <vfprintf+0x124>
 626:	83 36       	cpi	r24, 0x63	; 99
 628:	31 f0       	breq	.+12     	; 0x636 <vfprintf+0x11a>
 62a:	83 37       	cpi	r24, 0x73	; 115
 62c:	71 f0       	breq	.+28     	; 0x64a <vfprintf+0x12e>
 62e:	83 35       	cpi	r24, 0x53	; 83
 630:	09 f0       	breq	.+2      	; 0x634 <vfprintf+0x118>
 632:	59 c0       	rjmp	.+178    	; 0x6e6 <vfprintf+0x1ca>
 634:	21 c0       	rjmp	.+66     	; 0x678 <vfprintf+0x15c>
 636:	f8 01       	movw	r30, r16
 638:	80 81       	ld	r24, Z
 63a:	89 83       	std	Y+1, r24	; 0x01
 63c:	0e 5f       	subi	r16, 0xFE	; 254
 63e:	1f 4f       	sbci	r17, 0xFF	; 255
 640:	88 24       	eor	r8, r8
 642:	83 94       	inc	r8
 644:	91 2c       	mov	r9, r1
 646:	53 01       	movw	r10, r6
 648:	13 c0       	rjmp	.+38     	; 0x670 <vfprintf+0x154>
 64a:	28 01       	movw	r4, r16
 64c:	f2 e0       	ldi	r31, 0x02	; 2
 64e:	4f 0e       	add	r4, r31
 650:	51 1c       	adc	r5, r1
 652:	f8 01       	movw	r30, r16
 654:	a0 80       	ld	r10, Z
 656:	b1 80       	ldd	r11, Z+1	; 0x01
 658:	36 fe       	sbrs	r3, 6
 65a:	03 c0       	rjmp	.+6      	; 0x662 <vfprintf+0x146>
 65c:	69 2d       	mov	r22, r9
 65e:	70 e0       	ldi	r23, 0x00	; 0
 660:	02 c0       	rjmp	.+4      	; 0x666 <vfprintf+0x14a>
 662:	6f ef       	ldi	r22, 0xFF	; 255
 664:	7f ef       	ldi	r23, 0xFF	; 255
 666:	c5 01       	movw	r24, r10
 668:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <strnlen>
 66c:	4c 01       	movw	r8, r24
 66e:	82 01       	movw	r16, r4
 670:	f3 2d       	mov	r31, r3
 672:	ff 77       	andi	r31, 0x7F	; 127
 674:	3f 2e       	mov	r3, r31
 676:	16 c0       	rjmp	.+44     	; 0x6a4 <vfprintf+0x188>
 678:	28 01       	movw	r4, r16
 67a:	22 e0       	ldi	r18, 0x02	; 2
 67c:	42 0e       	add	r4, r18
 67e:	51 1c       	adc	r5, r1
 680:	f8 01       	movw	r30, r16
 682:	a0 80       	ld	r10, Z
 684:	b1 80       	ldd	r11, Z+1	; 0x01
 686:	36 fe       	sbrs	r3, 6
 688:	03 c0       	rjmp	.+6      	; 0x690 <vfprintf+0x174>
 68a:	69 2d       	mov	r22, r9
 68c:	70 e0       	ldi	r23, 0x00	; 0
 68e:	02 c0       	rjmp	.+4      	; 0x694 <vfprintf+0x178>
 690:	6f ef       	ldi	r22, 0xFF	; 255
 692:	7f ef       	ldi	r23, 0xFF	; 255
 694:	c5 01       	movw	r24, r10
 696:	0e 94 6f 04 	call	0x8de	; 0x8de <strnlen_P>
 69a:	4c 01       	movw	r8, r24
 69c:	f3 2d       	mov	r31, r3
 69e:	f0 68       	ori	r31, 0x80	; 128
 6a0:	3f 2e       	mov	r3, r31
 6a2:	82 01       	movw	r16, r4
 6a4:	33 fc       	sbrc	r3, 3
 6a6:	1b c0       	rjmp	.+54     	; 0x6de <vfprintf+0x1c2>
 6a8:	82 2d       	mov	r24, r2
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	88 16       	cp	r8, r24
 6ae:	99 06       	cpc	r9, r25
 6b0:	b0 f4       	brcc	.+44     	; 0x6de <vfprintf+0x1c2>
 6b2:	b6 01       	movw	r22, r12
 6b4:	80 e2       	ldi	r24, 0x20	; 32
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	0e 94 85 04 	call	0x90a	; 0x90a <fputc>
 6bc:	2a 94       	dec	r2
 6be:	f4 cf       	rjmp	.-24     	; 0x6a8 <vfprintf+0x18c>
 6c0:	f5 01       	movw	r30, r10
 6c2:	37 fc       	sbrc	r3, 7
 6c4:	85 91       	lpm	r24, Z+
 6c6:	37 fe       	sbrs	r3, 7
 6c8:	81 91       	ld	r24, Z+
 6ca:	5f 01       	movw	r10, r30
 6cc:	b6 01       	movw	r22, r12
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	0e 94 85 04 	call	0x90a	; 0x90a <fputc>
 6d4:	21 10       	cpse	r2, r1
 6d6:	2a 94       	dec	r2
 6d8:	21 e0       	ldi	r18, 0x01	; 1
 6da:	82 1a       	sub	r8, r18
 6dc:	91 08       	sbc	r9, r1
 6de:	81 14       	cp	r8, r1
 6e0:	91 04       	cpc	r9, r1
 6e2:	71 f7       	brne	.-36     	; 0x6c0 <vfprintf+0x1a4>
 6e4:	e8 c0       	rjmp	.+464    	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
 6e6:	84 36       	cpi	r24, 0x64	; 100
 6e8:	11 f0       	breq	.+4      	; 0x6ee <vfprintf+0x1d2>
 6ea:	89 36       	cpi	r24, 0x69	; 105
 6ec:	41 f5       	brne	.+80     	; 0x73e <vfprintf+0x222>
 6ee:	f8 01       	movw	r30, r16
 6f0:	37 fe       	sbrs	r3, 7
 6f2:	07 c0       	rjmp	.+14     	; 0x702 <vfprintf+0x1e6>
 6f4:	60 81       	ld	r22, Z
 6f6:	71 81       	ldd	r23, Z+1	; 0x01
 6f8:	82 81       	ldd	r24, Z+2	; 0x02
 6fa:	93 81       	ldd	r25, Z+3	; 0x03
 6fc:	0c 5f       	subi	r16, 0xFC	; 252
 6fe:	1f 4f       	sbci	r17, 0xFF	; 255
 700:	08 c0       	rjmp	.+16     	; 0x712 <vfprintf+0x1f6>
 702:	60 81       	ld	r22, Z
 704:	71 81       	ldd	r23, Z+1	; 0x01
 706:	07 2e       	mov	r0, r23
 708:	00 0c       	add	r0, r0
 70a:	88 0b       	sbc	r24, r24
 70c:	99 0b       	sbc	r25, r25
 70e:	0e 5f       	subi	r16, 0xFE	; 254
 710:	1f 4f       	sbci	r17, 0xFF	; 255
 712:	f3 2d       	mov	r31, r3
 714:	ff 76       	andi	r31, 0x6F	; 111
 716:	3f 2e       	mov	r3, r31
 718:	97 ff       	sbrs	r25, 7
 71a:	09 c0       	rjmp	.+18     	; 0x72e <vfprintf+0x212>
 71c:	90 95       	com	r25
 71e:	80 95       	com	r24
 720:	70 95       	com	r23
 722:	61 95       	neg	r22
 724:	7f 4f       	sbci	r23, 0xFF	; 255
 726:	8f 4f       	sbci	r24, 0xFF	; 255
 728:	9f 4f       	sbci	r25, 0xFF	; 255
 72a:	f0 68       	ori	r31, 0x80	; 128
 72c:	3f 2e       	mov	r3, r31
 72e:	2a e0       	ldi	r18, 0x0A	; 10
 730:	30 e0       	ldi	r19, 0x00	; 0
 732:	a3 01       	movw	r20, r6
 734:	0e 94 c1 04 	call	0x982	; 0x982 <__ultoa_invert>
 738:	88 2e       	mov	r8, r24
 73a:	86 18       	sub	r8, r6
 73c:	45 c0       	rjmp	.+138    	; 0x7c8 <vfprintf+0x2ac>
 73e:	85 37       	cpi	r24, 0x75	; 117
 740:	31 f4       	brne	.+12     	; 0x74e <vfprintf+0x232>
 742:	23 2d       	mov	r18, r3
 744:	2f 7e       	andi	r18, 0xEF	; 239
 746:	b2 2e       	mov	r11, r18
 748:	2a e0       	ldi	r18, 0x0A	; 10
 74a:	30 e0       	ldi	r19, 0x00	; 0
 74c:	25 c0       	rjmp	.+74     	; 0x798 <vfprintf+0x27c>
 74e:	93 2d       	mov	r25, r3
 750:	99 7f       	andi	r25, 0xF9	; 249
 752:	b9 2e       	mov	r11, r25
 754:	8f 36       	cpi	r24, 0x6F	; 111
 756:	c1 f0       	breq	.+48     	; 0x788 <vfprintf+0x26c>
 758:	18 f4       	brcc	.+6      	; 0x760 <vfprintf+0x244>
 75a:	88 35       	cpi	r24, 0x58	; 88
 75c:	79 f0       	breq	.+30     	; 0x77c <vfprintf+0x260>
 75e:	b5 c0       	rjmp	.+362    	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 760:	80 37       	cpi	r24, 0x70	; 112
 762:	19 f0       	breq	.+6      	; 0x76a <vfprintf+0x24e>
 764:	88 37       	cpi	r24, 0x78	; 120
 766:	21 f0       	breq	.+8      	; 0x770 <vfprintf+0x254>
 768:	b0 c0       	rjmp	.+352    	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 76a:	e9 2f       	mov	r30, r25
 76c:	e0 61       	ori	r30, 0x10	; 16
 76e:	be 2e       	mov	r11, r30
 770:	b4 fe       	sbrs	r11, 4
 772:	0d c0       	rjmp	.+26     	; 0x78e <vfprintf+0x272>
 774:	fb 2d       	mov	r31, r11
 776:	f4 60       	ori	r31, 0x04	; 4
 778:	bf 2e       	mov	r11, r31
 77a:	09 c0       	rjmp	.+18     	; 0x78e <vfprintf+0x272>
 77c:	34 fe       	sbrs	r3, 4
 77e:	0a c0       	rjmp	.+20     	; 0x794 <vfprintf+0x278>
 780:	29 2f       	mov	r18, r25
 782:	26 60       	ori	r18, 0x06	; 6
 784:	b2 2e       	mov	r11, r18
 786:	06 c0       	rjmp	.+12     	; 0x794 <vfprintf+0x278>
 788:	28 e0       	ldi	r18, 0x08	; 8
 78a:	30 e0       	ldi	r19, 0x00	; 0
 78c:	05 c0       	rjmp	.+10     	; 0x798 <vfprintf+0x27c>
 78e:	20 e1       	ldi	r18, 0x10	; 16
 790:	30 e0       	ldi	r19, 0x00	; 0
 792:	02 c0       	rjmp	.+4      	; 0x798 <vfprintf+0x27c>
 794:	20 e1       	ldi	r18, 0x10	; 16
 796:	32 e0       	ldi	r19, 0x02	; 2
 798:	f8 01       	movw	r30, r16
 79a:	b7 fe       	sbrs	r11, 7
 79c:	07 c0       	rjmp	.+14     	; 0x7ac <vfprintf+0x290>
 79e:	60 81       	ld	r22, Z
 7a0:	71 81       	ldd	r23, Z+1	; 0x01
 7a2:	82 81       	ldd	r24, Z+2	; 0x02
 7a4:	93 81       	ldd	r25, Z+3	; 0x03
 7a6:	0c 5f       	subi	r16, 0xFC	; 252
 7a8:	1f 4f       	sbci	r17, 0xFF	; 255
 7aa:	06 c0       	rjmp	.+12     	; 0x7b8 <vfprintf+0x29c>
 7ac:	60 81       	ld	r22, Z
 7ae:	71 81       	ldd	r23, Z+1	; 0x01
 7b0:	80 e0       	ldi	r24, 0x00	; 0
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	0e 5f       	subi	r16, 0xFE	; 254
 7b6:	1f 4f       	sbci	r17, 0xFF	; 255
 7b8:	a3 01       	movw	r20, r6
 7ba:	0e 94 c1 04 	call	0x982	; 0x982 <__ultoa_invert>
 7be:	88 2e       	mov	r8, r24
 7c0:	86 18       	sub	r8, r6
 7c2:	fb 2d       	mov	r31, r11
 7c4:	ff 77       	andi	r31, 0x7F	; 127
 7c6:	3f 2e       	mov	r3, r31
 7c8:	36 fe       	sbrs	r3, 6
 7ca:	0d c0       	rjmp	.+26     	; 0x7e6 <vfprintf+0x2ca>
 7cc:	23 2d       	mov	r18, r3
 7ce:	2e 7f       	andi	r18, 0xFE	; 254
 7d0:	a2 2e       	mov	r10, r18
 7d2:	89 14       	cp	r8, r9
 7d4:	58 f4       	brcc	.+22     	; 0x7ec <vfprintf+0x2d0>
 7d6:	34 fe       	sbrs	r3, 4
 7d8:	0b c0       	rjmp	.+22     	; 0x7f0 <vfprintf+0x2d4>
 7da:	32 fc       	sbrc	r3, 2
 7dc:	09 c0       	rjmp	.+18     	; 0x7f0 <vfprintf+0x2d4>
 7de:	83 2d       	mov	r24, r3
 7e0:	8e 7e       	andi	r24, 0xEE	; 238
 7e2:	a8 2e       	mov	r10, r24
 7e4:	05 c0       	rjmp	.+10     	; 0x7f0 <vfprintf+0x2d4>
 7e6:	b8 2c       	mov	r11, r8
 7e8:	a3 2c       	mov	r10, r3
 7ea:	03 c0       	rjmp	.+6      	; 0x7f2 <vfprintf+0x2d6>
 7ec:	b8 2c       	mov	r11, r8
 7ee:	01 c0       	rjmp	.+2      	; 0x7f2 <vfprintf+0x2d6>
 7f0:	b9 2c       	mov	r11, r9
 7f2:	a4 fe       	sbrs	r10, 4
 7f4:	0f c0       	rjmp	.+30     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7f6:	fe 01       	movw	r30, r28
 7f8:	e8 0d       	add	r30, r8
 7fa:	f1 1d       	adc	r31, r1
 7fc:	80 81       	ld	r24, Z
 7fe:	80 33       	cpi	r24, 0x30	; 48
 800:	21 f4       	brne	.+8      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 802:	9a 2d       	mov	r25, r10
 804:	99 7e       	andi	r25, 0xE9	; 233
 806:	a9 2e       	mov	r10, r25
 808:	09 c0       	rjmp	.+18     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 80a:	a2 fe       	sbrs	r10, 2
 80c:	06 c0       	rjmp	.+12     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 80e:	b3 94       	inc	r11
 810:	b3 94       	inc	r11
 812:	04 c0       	rjmp	.+8      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 814:	8a 2d       	mov	r24, r10
 816:	86 78       	andi	r24, 0x86	; 134
 818:	09 f0       	breq	.+2      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 81a:	b3 94       	inc	r11
 81c:	a3 fc       	sbrc	r10, 3
 81e:	11 c0       	rjmp	.+34     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 820:	a0 fe       	sbrs	r10, 0
 822:	06 c0       	rjmp	.+12     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 824:	b2 14       	cp	r11, r2
 826:	88 f4       	brcc	.+34     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 828:	28 0c       	add	r2, r8
 82a:	92 2c       	mov	r9, r2
 82c:	9b 18       	sub	r9, r11
 82e:	0e c0       	rjmp	.+28     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 830:	b2 14       	cp	r11, r2
 832:	60 f4       	brcc	.+24     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 834:	b6 01       	movw	r22, r12
 836:	80 e2       	ldi	r24, 0x20	; 32
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	0e 94 85 04 	call	0x90a	; 0x90a <fputc>
 83e:	b3 94       	inc	r11
 840:	f7 cf       	rjmp	.-18     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 842:	b2 14       	cp	r11, r2
 844:	18 f4       	brcc	.+6      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 846:	2b 18       	sub	r2, r11
 848:	02 c0       	rjmp	.+4      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 84a:	98 2c       	mov	r9, r8
 84c:	21 2c       	mov	r2, r1
 84e:	a4 fe       	sbrs	r10, 4
 850:	10 c0       	rjmp	.+32     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 852:	b6 01       	movw	r22, r12
 854:	80 e3       	ldi	r24, 0x30	; 48
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	0e 94 85 04 	call	0x90a	; 0x90a <fputc>
 85c:	a2 fe       	sbrs	r10, 2
 85e:	17 c0       	rjmp	.+46     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
 860:	a1 fc       	sbrc	r10, 1
 862:	03 c0       	rjmp	.+6      	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 864:	88 e7       	ldi	r24, 0x78	; 120
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	02 c0       	rjmp	.+4      	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 86a:	88 e5       	ldi	r24, 0x58	; 88
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	b6 01       	movw	r22, r12
 870:	0c c0       	rjmp	.+24     	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
 872:	8a 2d       	mov	r24, r10
 874:	86 78       	andi	r24, 0x86	; 134
 876:	59 f0       	breq	.+22     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
 878:	a1 fe       	sbrs	r10, 1
 87a:	02 c0       	rjmp	.+4      	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 87c:	8b e2       	ldi	r24, 0x2B	; 43
 87e:	01 c0       	rjmp	.+2      	; 0x882 <__DATA_REGION_LENGTH__+0x82>
 880:	80 e2       	ldi	r24, 0x20	; 32
 882:	a7 fc       	sbrc	r10, 7
 884:	8d e2       	ldi	r24, 0x2D	; 45
 886:	b6 01       	movw	r22, r12
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	0e 94 85 04 	call	0x90a	; 0x90a <fputc>
 88e:	89 14       	cp	r8, r9
 890:	38 f4       	brcc	.+14     	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
 892:	b6 01       	movw	r22, r12
 894:	80 e3       	ldi	r24, 0x30	; 48
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	0e 94 85 04 	call	0x90a	; 0x90a <fputc>
 89c:	9a 94       	dec	r9
 89e:	f7 cf       	rjmp	.-18     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
 8a0:	8a 94       	dec	r8
 8a2:	f3 01       	movw	r30, r6
 8a4:	e8 0d       	add	r30, r8
 8a6:	f1 1d       	adc	r31, r1
 8a8:	80 81       	ld	r24, Z
 8aa:	b6 01       	movw	r22, r12
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	0e 94 85 04 	call	0x90a	; 0x90a <fputc>
 8b2:	81 10       	cpse	r8, r1
 8b4:	f5 cf       	rjmp	.-22     	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
 8b6:	22 20       	and	r2, r2
 8b8:	09 f4       	brne	.+2      	; 0x8bc <__DATA_REGION_LENGTH__+0xbc>
 8ba:	42 ce       	rjmp	.-892    	; 0x540 <vfprintf+0x24>
 8bc:	b6 01       	movw	r22, r12
 8be:	80 e2       	ldi	r24, 0x20	; 32
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	0e 94 85 04 	call	0x90a	; 0x90a <fputc>
 8c6:	2a 94       	dec	r2
 8c8:	f6 cf       	rjmp	.-20     	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
 8ca:	f6 01       	movw	r30, r12
 8cc:	86 81       	ldd	r24, Z+6	; 0x06
 8ce:	97 81       	ldd	r25, Z+7	; 0x07
 8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <__DATA_REGION_LENGTH__+0xd6>
 8d2:	8f ef       	ldi	r24, 0xFF	; 255
 8d4:	9f ef       	ldi	r25, 0xFF	; 255
 8d6:	2b 96       	adiw	r28, 0x0b	; 11
 8d8:	e2 e1       	ldi	r30, 0x12	; 18
 8da:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <__epilogue_restores__>

000008de <strnlen_P>:
 8de:	fc 01       	movw	r30, r24
 8e0:	05 90       	lpm	r0, Z+
 8e2:	61 50       	subi	r22, 0x01	; 1
 8e4:	70 40       	sbci	r23, 0x00	; 0
 8e6:	01 10       	cpse	r0, r1
 8e8:	d8 f7       	brcc	.-10     	; 0x8e0 <strnlen_P+0x2>
 8ea:	80 95       	com	r24
 8ec:	90 95       	com	r25
 8ee:	8e 0f       	add	r24, r30
 8f0:	9f 1f       	adc	r25, r31
 8f2:	08 95       	ret

000008f4 <strnlen>:
 8f4:	fc 01       	movw	r30, r24
 8f6:	61 50       	subi	r22, 0x01	; 1
 8f8:	70 40       	sbci	r23, 0x00	; 0
 8fa:	01 90       	ld	r0, Z+
 8fc:	01 10       	cpse	r0, r1
 8fe:	d8 f7       	brcc	.-10     	; 0x8f6 <strnlen+0x2>
 900:	80 95       	com	r24
 902:	90 95       	com	r25
 904:	8e 0f       	add	r24, r30
 906:	9f 1f       	adc	r25, r31
 908:	08 95       	ret

0000090a <fputc>:
 90a:	0f 93       	push	r16
 90c:	1f 93       	push	r17
 90e:	cf 93       	push	r28
 910:	df 93       	push	r29
 912:	fb 01       	movw	r30, r22
 914:	23 81       	ldd	r18, Z+3	; 0x03
 916:	21 fd       	sbrc	r18, 1
 918:	03 c0       	rjmp	.+6      	; 0x920 <fputc+0x16>
 91a:	8f ef       	ldi	r24, 0xFF	; 255
 91c:	9f ef       	ldi	r25, 0xFF	; 255
 91e:	2c c0       	rjmp	.+88     	; 0x978 <fputc+0x6e>
 920:	22 ff       	sbrs	r18, 2
 922:	16 c0       	rjmp	.+44     	; 0x950 <fputc+0x46>
 924:	46 81       	ldd	r20, Z+6	; 0x06
 926:	57 81       	ldd	r21, Z+7	; 0x07
 928:	24 81       	ldd	r18, Z+4	; 0x04
 92a:	35 81       	ldd	r19, Z+5	; 0x05
 92c:	42 17       	cp	r20, r18
 92e:	53 07       	cpc	r21, r19
 930:	44 f4       	brge	.+16     	; 0x942 <fputc+0x38>
 932:	a0 81       	ld	r26, Z
 934:	b1 81       	ldd	r27, Z+1	; 0x01
 936:	9d 01       	movw	r18, r26
 938:	2f 5f       	subi	r18, 0xFF	; 255
 93a:	3f 4f       	sbci	r19, 0xFF	; 255
 93c:	31 83       	std	Z+1, r19	; 0x01
 93e:	20 83       	st	Z, r18
 940:	8c 93       	st	X, r24
 942:	26 81       	ldd	r18, Z+6	; 0x06
 944:	37 81       	ldd	r19, Z+7	; 0x07
 946:	2f 5f       	subi	r18, 0xFF	; 255
 948:	3f 4f       	sbci	r19, 0xFF	; 255
 94a:	37 83       	std	Z+7, r19	; 0x07
 94c:	26 83       	std	Z+6, r18	; 0x06
 94e:	14 c0       	rjmp	.+40     	; 0x978 <fputc+0x6e>
 950:	8b 01       	movw	r16, r22
 952:	ec 01       	movw	r28, r24
 954:	fb 01       	movw	r30, r22
 956:	00 84       	ldd	r0, Z+8	; 0x08
 958:	f1 85       	ldd	r31, Z+9	; 0x09
 95a:	e0 2d       	mov	r30, r0
 95c:	09 95       	icall
 95e:	89 2b       	or	r24, r25
 960:	e1 f6       	brne	.-72     	; 0x91a <fputc+0x10>
 962:	d8 01       	movw	r26, r16
 964:	16 96       	adiw	r26, 0x06	; 6
 966:	8d 91       	ld	r24, X+
 968:	9c 91       	ld	r25, X
 96a:	17 97       	sbiw	r26, 0x07	; 7
 96c:	01 96       	adiw	r24, 0x01	; 1
 96e:	17 96       	adiw	r26, 0x07	; 7
 970:	9c 93       	st	X, r25
 972:	8e 93       	st	-X, r24
 974:	16 97       	sbiw	r26, 0x06	; 6
 976:	ce 01       	movw	r24, r28
 978:	df 91       	pop	r29
 97a:	cf 91       	pop	r28
 97c:	1f 91       	pop	r17
 97e:	0f 91       	pop	r16
 980:	08 95       	ret

00000982 <__ultoa_invert>:
 982:	fa 01       	movw	r30, r20
 984:	aa 27       	eor	r26, r26
 986:	28 30       	cpi	r18, 0x08	; 8
 988:	51 f1       	breq	.+84     	; 0x9de <__ultoa_invert+0x5c>
 98a:	20 31       	cpi	r18, 0x10	; 16
 98c:	81 f1       	breq	.+96     	; 0x9ee <__ultoa_invert+0x6c>
 98e:	e8 94       	clt
 990:	6f 93       	push	r22
 992:	6e 7f       	andi	r22, 0xFE	; 254
 994:	6e 5f       	subi	r22, 0xFE	; 254
 996:	7f 4f       	sbci	r23, 0xFF	; 255
 998:	8f 4f       	sbci	r24, 0xFF	; 255
 99a:	9f 4f       	sbci	r25, 0xFF	; 255
 99c:	af 4f       	sbci	r26, 0xFF	; 255
 99e:	b1 e0       	ldi	r27, 0x01	; 1
 9a0:	3e d0       	rcall	.+124    	; 0xa1e <__ultoa_invert+0x9c>
 9a2:	b4 e0       	ldi	r27, 0x04	; 4
 9a4:	3c d0       	rcall	.+120    	; 0xa1e <__ultoa_invert+0x9c>
 9a6:	67 0f       	add	r22, r23
 9a8:	78 1f       	adc	r23, r24
 9aa:	89 1f       	adc	r24, r25
 9ac:	9a 1f       	adc	r25, r26
 9ae:	a1 1d       	adc	r26, r1
 9b0:	68 0f       	add	r22, r24
 9b2:	79 1f       	adc	r23, r25
 9b4:	8a 1f       	adc	r24, r26
 9b6:	91 1d       	adc	r25, r1
 9b8:	a1 1d       	adc	r26, r1
 9ba:	6a 0f       	add	r22, r26
 9bc:	71 1d       	adc	r23, r1
 9be:	81 1d       	adc	r24, r1
 9c0:	91 1d       	adc	r25, r1
 9c2:	a1 1d       	adc	r26, r1
 9c4:	20 d0       	rcall	.+64     	; 0xa06 <__ultoa_invert+0x84>
 9c6:	09 f4       	brne	.+2      	; 0x9ca <__ultoa_invert+0x48>
 9c8:	68 94       	set
 9ca:	3f 91       	pop	r19
 9cc:	2a e0       	ldi	r18, 0x0A	; 10
 9ce:	26 9f       	mul	r18, r22
 9d0:	11 24       	eor	r1, r1
 9d2:	30 19       	sub	r19, r0
 9d4:	30 5d       	subi	r19, 0xD0	; 208
 9d6:	31 93       	st	Z+, r19
 9d8:	de f6       	brtc	.-74     	; 0x990 <__ultoa_invert+0xe>
 9da:	cf 01       	movw	r24, r30
 9dc:	08 95       	ret
 9de:	46 2f       	mov	r20, r22
 9e0:	47 70       	andi	r20, 0x07	; 7
 9e2:	40 5d       	subi	r20, 0xD0	; 208
 9e4:	41 93       	st	Z+, r20
 9e6:	b3 e0       	ldi	r27, 0x03	; 3
 9e8:	0f d0       	rcall	.+30     	; 0xa08 <__ultoa_invert+0x86>
 9ea:	c9 f7       	brne	.-14     	; 0x9de <__ultoa_invert+0x5c>
 9ec:	f6 cf       	rjmp	.-20     	; 0x9da <__ultoa_invert+0x58>
 9ee:	46 2f       	mov	r20, r22
 9f0:	4f 70       	andi	r20, 0x0F	; 15
 9f2:	40 5d       	subi	r20, 0xD0	; 208
 9f4:	4a 33       	cpi	r20, 0x3A	; 58
 9f6:	18 f0       	brcs	.+6      	; 0x9fe <__ultoa_invert+0x7c>
 9f8:	49 5d       	subi	r20, 0xD9	; 217
 9fa:	31 fd       	sbrc	r19, 1
 9fc:	40 52       	subi	r20, 0x20	; 32
 9fe:	41 93       	st	Z+, r20
 a00:	02 d0       	rcall	.+4      	; 0xa06 <__ultoa_invert+0x84>
 a02:	a9 f7       	brne	.-22     	; 0x9ee <__ultoa_invert+0x6c>
 a04:	ea cf       	rjmp	.-44     	; 0x9da <__ultoa_invert+0x58>
 a06:	b4 e0       	ldi	r27, 0x04	; 4
 a08:	a6 95       	lsr	r26
 a0a:	97 95       	ror	r25
 a0c:	87 95       	ror	r24
 a0e:	77 95       	ror	r23
 a10:	67 95       	ror	r22
 a12:	ba 95       	dec	r27
 a14:	c9 f7       	brne	.-14     	; 0xa08 <__ultoa_invert+0x86>
 a16:	00 97       	sbiw	r24, 0x00	; 0
 a18:	61 05       	cpc	r22, r1
 a1a:	71 05       	cpc	r23, r1
 a1c:	08 95       	ret
 a1e:	9b 01       	movw	r18, r22
 a20:	ac 01       	movw	r20, r24
 a22:	0a 2e       	mov	r0, r26
 a24:	06 94       	lsr	r0
 a26:	57 95       	ror	r21
 a28:	47 95       	ror	r20
 a2a:	37 95       	ror	r19
 a2c:	27 95       	ror	r18
 a2e:	ba 95       	dec	r27
 a30:	c9 f7       	brne	.-14     	; 0xa24 <__ultoa_invert+0xa2>
 a32:	62 0f       	add	r22, r18
 a34:	73 1f       	adc	r23, r19
 a36:	84 1f       	adc	r24, r20
 a38:	95 1f       	adc	r25, r21
 a3a:	a0 1d       	adc	r26, r0
 a3c:	08 95       	ret

00000a3e <__prologue_saves__>:
 a3e:	2f 92       	push	r2
 a40:	3f 92       	push	r3
 a42:	4f 92       	push	r4
 a44:	5f 92       	push	r5
 a46:	6f 92       	push	r6
 a48:	7f 92       	push	r7
 a4a:	8f 92       	push	r8
 a4c:	9f 92       	push	r9
 a4e:	af 92       	push	r10
 a50:	bf 92       	push	r11
 a52:	cf 92       	push	r12
 a54:	df 92       	push	r13
 a56:	ef 92       	push	r14
 a58:	ff 92       	push	r15
 a5a:	0f 93       	push	r16
 a5c:	1f 93       	push	r17
 a5e:	cf 93       	push	r28
 a60:	df 93       	push	r29
 a62:	cd b7       	in	r28, 0x3d	; 61
 a64:	de b7       	in	r29, 0x3e	; 62
 a66:	ca 1b       	sub	r28, r26
 a68:	db 0b       	sbc	r29, r27
 a6a:	0f b6       	in	r0, 0x3f	; 63
 a6c:	f8 94       	cli
 a6e:	de bf       	out	0x3e, r29	; 62
 a70:	0f be       	out	0x3f, r0	; 63
 a72:	cd bf       	out	0x3d, r28	; 61
 a74:	09 94       	ijmp

00000a76 <__epilogue_restores__>:
 a76:	2a 88       	ldd	r2, Y+18	; 0x12
 a78:	39 88       	ldd	r3, Y+17	; 0x11
 a7a:	48 88       	ldd	r4, Y+16	; 0x10
 a7c:	5f 84       	ldd	r5, Y+15	; 0x0f
 a7e:	6e 84       	ldd	r6, Y+14	; 0x0e
 a80:	7d 84       	ldd	r7, Y+13	; 0x0d
 a82:	8c 84       	ldd	r8, Y+12	; 0x0c
 a84:	9b 84       	ldd	r9, Y+11	; 0x0b
 a86:	aa 84       	ldd	r10, Y+10	; 0x0a
 a88:	b9 84       	ldd	r11, Y+9	; 0x09
 a8a:	c8 84       	ldd	r12, Y+8	; 0x08
 a8c:	df 80       	ldd	r13, Y+7	; 0x07
 a8e:	ee 80       	ldd	r14, Y+6	; 0x06
 a90:	fd 80       	ldd	r15, Y+5	; 0x05
 a92:	0c 81       	ldd	r16, Y+4	; 0x04
 a94:	1b 81       	ldd	r17, Y+3	; 0x03
 a96:	aa 81       	ldd	r26, Y+2	; 0x02
 a98:	b9 81       	ldd	r27, Y+1	; 0x01
 a9a:	ce 0f       	add	r28, r30
 a9c:	d1 1d       	adc	r29, r1
 a9e:	0f b6       	in	r0, 0x3f	; 63
 aa0:	f8 94       	cli
 aa2:	de bf       	out	0x3e, r29	; 62
 aa4:	0f be       	out	0x3f, r0	; 63
 aa6:	cd bf       	out	0x3d, r28	; 61
 aa8:	ed 01       	movw	r28, r26
 aaa:	08 95       	ret

00000aac <_exit>:
 aac:	f8 94       	cli

00000aae <__stop_program>:
 aae:	ff cf       	rjmp	.-2      	; 0xaae <__stop_program>
