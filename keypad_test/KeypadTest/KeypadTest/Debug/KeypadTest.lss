
KeypadTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a4  00800100  00000b4e  00000be2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  008001a4  008001a4  00000c86  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c86  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ce4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e3d  00000000  00000000  00000d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087b  00000000  00000000  00001bc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a8  00000000  00000000  0000243c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00002ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a3  00000000  00000000  00002b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000050a  00000000  00000000  0000301f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00003529  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e4       	ldi	r30, 0x4E	; 78
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 3a       	cpi	r26, 0xA4	; 164
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 ea       	ldi	r26, 0xA4	; 164
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 3a       	cpi	r26, 0xAA	; 170
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 90 00 	call	0x120	; 0x120 <main>
  9e:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <led_test>:

#define BITMASK_D 0b11000000
#define BITMASK_B 0b00111111

void led_test(void){
    PORTD &= ~(1 << PD3);
  a6:	8b b1       	in	r24, 0x0b	; 11
  a8:	87 7f       	andi	r24, 0xF7	; 247
  aa:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	83 ed       	ldi	r24, 0xD3	; 211
  b0:	90 e3       	ldi	r25, 0x30	; 48
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <led_test+0xc>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <led_test+0x16>
  bc:	00 00       	nop
    _delay_ms(1000);
    PORTD |= (1 << PD3);
  be:	8b b1       	in	r24, 0x0b	; 11
  c0:	88 60       	ori	r24, 0x08	; 8
  c2:	8b b9       	out	0x0b, r24	; 11
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	83 ed       	ldi	r24, 0xD3	; 211
  c8:	90 e3       	ldi	r25, 0x30	; 48
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <led_test+0x24>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <led_test+0x2e>
  d4:	00 00       	nop
    _delay_ms(1000);
    PORTD &= ~(1 << PD3);
  d6:	8b b1       	in	r24, 0x0b	; 11
  d8:	87 7f       	andi	r24, 0xF7	; 247
  da:	8b b9       	out	0x0b, r24	; 11
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	83 ed       	ldi	r24, 0xD3	; 211
  e0:	90 e3       	ldi	r25, 0x30	; 48
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <led_test+0x3c>
  ea:	00 c0       	rjmp	.+0      	; 0xec <led_test+0x46>
  ec:	00 00       	nop
  ee:	08 95       	ret

000000f0 <compare>:
    _delay_ms(1000);
}

int compare(char *password, char *given_password){
    if (strcmp(password, given_password) != 0) {
  f0:	0e 94 be 02 	call	0x57c	; 0x57c <strcmp>
  f4:	89 2b       	or	r24, r25
  f6:	89 f0       	breq	.+34     	; 0x11a <compare+0x2a>
        led_test();
  f8:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
 104:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
 108:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
 10c:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
 110:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        return 0;
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	08 95       	ret
    }
    else {
        return 1;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
    }
}
 11e:	08 95       	ret

00000120 <main>:

int main(void)
{
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	6c 97       	sbiw	r28, 0x1c	; 28
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	f8 94       	cli
 12e:	de bf       	out	0x3e, r29	; 62
 130:	0f be       	out	0x3f, r0	; 63
 132:	cd bf       	out	0x3d, r28	; 61
    /********************testing****************************/
    
    char input;
    FILE uart_output = FDEV_SETUP_STREAM(USART_transmit, NULL, _FDEV_SETUP_WRITE);
 134:	8e e0       	ldi	r24, 0x0E	; 14
 136:	9e 01       	movw	r18, r28
 138:	2f 5f       	subi	r18, 0xFF	; 255
 13a:	3f 4f       	sbci	r19, 0xFF	; 255
 13c:	79 01       	movw	r14, r18
 13e:	f9 01       	movw	r30, r18
 140:	28 2f       	mov	r18, r24
 142:	11 92       	st	Z+, r1
 144:	2a 95       	dec	r18
 146:	e9 f7       	brne	.-6      	; 0x142 <main+0x22>
 148:	92 e0       	ldi	r25, 0x02	; 2
 14a:	9c 83       	std	Y+4, r25	; 0x04
 14c:	20 eb       	ldi	r18, 0xB0	; 176
 14e:	32 e0       	ldi	r19, 0x02	; 2
 150:	3a 87       	std	Y+10, r19	; 0x0a
 152:	29 87       	std	Y+9, r18	; 0x09
    FILE uart_input = FDEV_SETUP_STREAM(NULL, USART_receive, _FDEV_SETUP_READ);
 154:	8e 01       	movw	r16, r28
 156:	01 5f       	subi	r16, 0xF1	; 241
 158:	1f 4f       	sbci	r17, 0xFF	; 255
 15a:	f8 01       	movw	r30, r16
 15c:	11 92       	st	Z+, r1
 15e:	8a 95       	dec	r24
 160:	e9 f7       	brne	.-6      	; 0x15c <main+0x3c>
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	8a 8b       	std	Y+18, r24	; 0x12
 166:	87 eb       	ldi	r24, 0xB7	; 183
 168:	92 e0       	ldi	r25, 0x02	; 2
 16a:	9a 8f       	std	Y+26, r25	; 0x1a
 16c:	89 8f       	std	Y+25, r24	; 0x19
        
    USART_init(UBRR);
 16e:	87 e6       	ldi	r24, 0x67	; 103
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 a5 02 	call	0x54a	; 0x54a <USART_init>
        
    stdout = &uart_output;
 176:	e4 ea       	ldi	r30, 0xA4	; 164
 178:	f1 e0       	ldi	r31, 0x01	; 1
 17a:	f3 82       	std	Z+3, r15	; 0x03
 17c:	e2 82       	std	Z+2, r14	; 0x02
    stdin = &uart_input;
 17e:	11 83       	std	Z+1, r17	; 0x01
 180:	00 83       	st	Z, r16
    char* password = "0123";
    char* given_password = "xxxx";
    int idx = 0;
    
    // Set digital pins 6-9 (rows) as input and 10-13 (columns) as output
    DDRD &= 0b00111111;
 182:	8a b1       	in	r24, 0x0a	; 10
 184:	8f 73       	andi	r24, 0x3F	; 63
 186:	8a b9       	out	0x0a, r24	; 10
    DDRB = 0b00111100;
 188:	8c e3       	ldi	r24, 0x3C	; 60
 18a:	84 b9       	out	0x04, r24	; 4
 18c:	8f e3       	ldi	r24, 0x3F	; 63
 18e:	9c e9       	ldi	r25, 0x9C	; 156
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <main+0x70>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0x76>
 196:	00 00       	nop
    _delay_ms(10);
     
    // Power the row pins
    PORTD |= 0b11000000;
 198:	8b b1       	in	r24, 0x0b	; 11
 19a:	80 6c       	ori	r24, 0xC0	; 192
 19c:	8b b9       	out	0x0b, r24	; 11
    PORTB |= 0b00000011;
 19e:	85 b1       	in	r24, 0x05	; 5
 1a0:	83 60       	ori	r24, 0x03	; 3
 1a2:	85 b9       	out	0x05, r24	; 5
    PORTB &= 0b11000011;
 1a4:	85 b1       	in	r24, 0x05	; 5
 1a6:	83 7c       	andi	r24, 0xC3	; 195
 1a8:	85 b9       	out	0x05, r24	; 5
 1aa:	ef e3       	ldi	r30, 0x3F	; 63
 1ac:	fc e9       	ldi	r31, 0x9C	; 156
 1ae:	31 97       	sbiw	r30, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <main+0x8e>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0x94>
 1b4:	00 00       	nop
    stdin = &uart_input;
    /******************************************************/
    
    char* password = "0123";
    char* given_password = "xxxx";
    int idx = 0;
 1b6:	e1 2c       	mov	r14, r1
 1b8:	f1 2c       	mov	r15, r1
 1ba:	ff ef       	ldi	r31, 0xFF	; 255
 1bc:	21 ee       	ldi	r18, 0xE1	; 225
 1be:	34 e0       	ldi	r19, 0x04	; 4
 1c0:	f1 50       	subi	r31, 0x01	; 1
 1c2:	20 40       	sbci	r18, 0x00	; 0
 1c4:	30 40       	sbci	r19, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <main+0xa0>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <main+0xaa>
 1ca:	00 00       	nop
    uint8_t portd_vals;
    
    while (1) 
    { 
        _delay_ms(100);
        portd_vals = ((PIND & BITMASK_D) >> 6);
 1cc:	29 b1       	in	r18, 0x09	; 9
 1ce:	22 95       	swap	r18
 1d0:	26 95       	lsr	r18
 1d2:	26 95       	lsr	r18
 1d4:	23 70       	andi	r18, 0x03	; 3
        portb_vals = ((PINB & BITMASK_B) << 2);
 1d6:	83 b1       	in	r24, 0x03	; 3
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
        keypad_vals = portd_vals | portb_vals;
 1e2:	12 2f       	mov	r17, r18
 1e4:	18 2b       	or	r17, r24
        
        //printf("Keypad_vals %d ", keypad_vals);
        keypad_vals &= 0b00001111;
 1e6:	1f 70       	andi	r17, 0x0F	; 15
        printf("kp_vals: %d  portd_vals: %d  portb_vals: %d  PINB: %d\n\r", keypad_vals, portd_vals, portb_vals, PINB);
 1e8:	33 b1       	in	r19, 0x03	; 3
 1ea:	d1 2c       	mov	r13, r1
 1ec:	1f 92       	push	r1
 1ee:	3f 93       	push	r19
 1f0:	99 27       	eor	r25, r25
 1f2:	9f 93       	push	r25
 1f4:	8f 93       	push	r24
 1f6:	1f 92       	push	r1
 1f8:	2f 93       	push	r18
 1fa:	1f 92       	push	r1
 1fc:	1f 93       	push	r17
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	9f 93       	push	r25
 204:	8f 93       	push	r24
 206:	0e 94 c7 02 	call	0x58e	; 0x58e <printf>
        
        
        if (keypad_vals != 0b00000000) {     // If any of column pins goes low
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	f8 94       	cli
 20e:	de bf       	out	0x3e, r29	; 62
 210:	0f be       	out	0x3f, r0	; 63
 212:	cd bf       	out	0x3d, r28	; 61
 214:	11 23       	and	r17, r17
 216:	89 f2       	breq	.-94     	; 0x1ba <main+0x9a>
            printf("if\n\r");
 218:	88 e3       	ldi	r24, 0x38	; 56
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	9f 93       	push	r25
 21e:	8f 93       	push	r24
 220:	0e 94 c7 02 	call	0x58e	; 0x58e <printf>
 224:	ef e3       	ldi	r30, 0x3F	; 63
 226:	fc e9       	ldi	r31, 0x9C	; 156
 228:	31 97       	sbiw	r30, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <main+0x108>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <main+0x10e>
 22e:	00 00       	nop
            key_pressed = keypad_vals;
            _delay_ms(10);
            
            // Make columns as output and rows as input
            DDRD &= 0b00111111;
 230:	8a b1       	in	r24, 0x0a	; 10
 232:	8f 73       	andi	r24, 0x3F	; 63
 234:	8a b9       	out	0x0a, r24	; 10
            DDRB = 0b00111100;
 236:	8c e3       	ldi	r24, 0x3C	; 60
 238:	84 b9       	out	0x04, r24	; 4
 23a:	8f e3       	ldi	r24, 0x3F	; 63
 23c:	9c e9       	ldi	r25, 0x9C	; 156
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <main+0x11e>
 242:	00 c0       	rjmp	.+0      	; 0x244 <main+0x124>
 244:	00 00       	nop
            PORTB |= 0b00000011;
            PORTB &= 0b11000011;
            _delay_ms(10);*/
            
            // Power the column pins
            PORTB |= 0b00111100;
 246:	85 b1       	in	r24, 0x05	; 5
 248:	8c 63       	ori	r24, 0x3C	; 60
 24a:	85 b9       	out	0x05, r24	; 5
 24c:	9f ef       	ldi	r25, 0xFF	; 255
 24e:	e1 ee       	ldi	r30, 0xE1	; 225
 250:	f4 e0       	ldi	r31, 0x04	; 4
 252:	91 50       	subi	r25, 0x01	; 1
 254:	e0 40       	sbci	r30, 0x00	; 0
 256:	f0 40       	sbci	r31, 0x00	; 0
 258:	e1 f7       	brne	.-8      	; 0x252 <main+0x132>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <main+0x13c>
 25c:	00 00       	nop
            //PORTB &= 0b11111100;
            //PORTD &= 0b00111111;
            _delay_ms(100);
            
            portd_vals = ((PIND & BITMASK_D) >> 6);
 25e:	a9 b0       	in	r10, 0x09	; 9
 260:	0a 2d       	mov	r16, r10
 262:	02 95       	swap	r16
 264:	06 95       	lsr	r16
 266:	06 95       	lsr	r16
 268:	03 70       	andi	r16, 0x03	; 3
            portb_vals = ((PINB & BITMASK_B) << 2);
 26a:	a3 b0       	in	r10, 0x03	; 3
 26c:	b1 2c       	mov	r11, r1
 26e:	aa 0c       	add	r10, r10
 270:	bb 1c       	adc	r11, r11
 272:	aa 0c       	add	r10, r10
 274:	bb 1c       	adc	r11, r11
            printf("portb_vals %d   portd_vals %d PINB %d PIND %d", portb_vals, portd_vals, PINB, PIND);
 276:	99 b1       	in	r25, 0x09	; 9
 278:	83 b1       	in	r24, 0x03	; 3
 27a:	1f 92       	push	r1
 27c:	9f 93       	push	r25
 27e:	1f 92       	push	r1
 280:	8f 93       	push	r24
 282:	1f 92       	push	r1
 284:	0f 93       	push	r16
 286:	c5 01       	movw	r24, r10
 288:	99 27       	eor	r25, r25
 28a:	9f 93       	push	r25
 28c:	8f 93       	push	r24
 28e:	8d e3       	ldi	r24, 0x3D	; 61
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	9f 93       	push	r25
 294:	8f 93       	push	r24
 296:	0e 94 c7 02 	call	0x58e	; 0x58e <printf>
 29a:	8f e3       	ldi	r24, 0x3F	; 63
 29c:	9c e9       	ldi	r25, 0x9C	; 156
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <main+0x17e>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <main+0x184>
 2a4:	00 00       	nop
            
            _delay_ms(10);
            keypad_vals = portd_vals | portb_vals;
 2a6:	a0 2a       	or	r10, r16
            //keypad_vals &= 0b00001111;
            printf("Keypad vals %d   ", keypad_vals);
 2a8:	1f 92       	push	r1
 2aa:	af 92       	push	r10
 2ac:	8b e6       	ldi	r24, 0x6B	; 107
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	9f 93       	push	r25
 2b2:	8f 93       	push	r24
 2b4:	0e 94 c7 02 	call	0x58e	; 0x58e <printf>
            
            printf("PINB %d   ", PINB);
 2b8:	83 b1       	in	r24, 0x03	; 3
 2ba:	1f 92       	push	r1
 2bc:	8f 93       	push	r24
 2be:	8d e7       	ldi	r24, 0x7D	; 125
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	9f 93       	push	r25
 2c4:	8f 93       	push	r24
 2c6:	0e 94 c7 02 	call	0x58e	; 0x58e <printf>
            printf("Key pressed %d   ", key_pressed);
 2ca:	df 92       	push	r13
 2cc:	1f 93       	push	r17
 2ce:	88 e8       	ldi	r24, 0x88	; 136
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	9f 93       	push	r25
 2d4:	8f 93       	push	r24
 2d6:	0e 94 c7 02 	call	0x58e	; 0x58e <printf>
 2da:	ef e3       	ldi	r30, 0x3F	; 63
 2dc:	fc e9       	ldi	r31, 0x9C	; 156
 2de:	31 97       	sbiw	r30, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <main+0x1be>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <main+0x1c4>
 2e4:	00 00       	nop
            _delay_ms(10);
            key_pressed |= keypad_vals;    // The variable has now both row and column values
 2e6:	1a 29       	or	r17, r10
            printf("%d\n\r", key_pressed);
 2e8:	1f 92       	push	r1
 2ea:	1f 93       	push	r17
 2ec:	83 e3       	ldi	r24, 0x33	; 51
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	9f 93       	push	r25
 2f2:	8f 93       	push	r24
 2f4:	0e 94 c7 02 	call	0x58e	; 0x58e <printf>
            
            if (key_pressed == 0b01110111) {
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	f8 94       	cli
 2fc:	de bf       	out	0x3e, r29	; 62
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	cd bf       	out	0x3d, r28	; 61
 302:	17 37       	cpi	r17, 0x77	; 119
 304:	79 f4       	brne	.+30     	; 0x324 <main+0x204>
                // Key 1 pressed
                given_password[idx] = '1';
 306:	81 e3       	ldi	r24, 0x31	; 49
 308:	f7 01       	movw	r30, r14
 30a:	e6 56       	subi	r30, 0x66	; 102
 30c:	fe 4f       	sbci	r31, 0xFE	; 254
 30e:	80 83       	st	Z, r24
                if (password[idx] == '1') {
 310:	f7 01       	movw	r30, r14
 312:	e1 56       	subi	r30, 0x61	; 97
 314:	fe 4f       	sbci	r31, 0xFE	; 254
 316:	80 81       	ld	r24, Z
 318:	81 33       	cpi	r24, 0x31	; 49
 31a:	09 f0       	breq	.+2      	; 0x31e <main+0x1fe>
 31c:	f5 c0       	rjmp	.+490    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
                    led_test();
 31e:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 322:	f2 c0       	rjmp	.+484    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b01111011) {
 324:	1b 37       	cpi	r17, 0x7B	; 123
 326:	79 f4       	brne	.+30     	; 0x346 <main+0x226>
                // Key 2 pressed
                given_password[idx] = '2';
 328:	82 e3       	ldi	r24, 0x32	; 50
 32a:	f7 01       	movw	r30, r14
 32c:	e6 56       	subi	r30, 0x66	; 102
 32e:	fe 4f       	sbci	r31, 0xFE	; 254
 330:	80 83       	st	Z, r24
                if (password[idx] == '2') {
 332:	f7 01       	movw	r30, r14
 334:	e1 56       	subi	r30, 0x61	; 97
 336:	fe 4f       	sbci	r31, 0xFE	; 254
 338:	80 81       	ld	r24, Z
 33a:	82 33       	cpi	r24, 0x32	; 50
 33c:	09 f0       	breq	.+2      	; 0x340 <main+0x220>
 33e:	e4 c0       	rjmp	.+456    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
                    led_test();
 340:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 344:	e1 c0       	rjmp	.+450    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b01111101) {
 346:	1d 37       	cpi	r17, 0x7D	; 125
 348:	79 f4       	brne	.+30     	; 0x368 <main+0x248>
                // Key 3 pressed
                given_password[idx] = '3';
 34a:	83 e3       	ldi	r24, 0x33	; 51
 34c:	f7 01       	movw	r30, r14
 34e:	e6 56       	subi	r30, 0x66	; 102
 350:	fe 4f       	sbci	r31, 0xFE	; 254
 352:	80 83       	st	Z, r24
                if (password[idx] == '3') {
 354:	f7 01       	movw	r30, r14
 356:	e1 56       	subi	r30, 0x61	; 97
 358:	fe 4f       	sbci	r31, 0xFE	; 254
 35a:	80 81       	ld	r24, Z
 35c:	83 33       	cpi	r24, 0x33	; 51
 35e:	09 f0       	breq	.+2      	; 0x362 <main+0x242>
 360:	d3 c0       	rjmp	.+422    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
                    led_test();
 362:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 366:	d0 c0       	rjmp	.+416    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b01111110) {
 368:	1e 37       	cpi	r17, 0x7E	; 126
 36a:	79 f4       	brne	.+30     	; 0x38a <main+0x26a>
                // A
                given_password[idx] = 'A';
 36c:	81 e4       	ldi	r24, 0x41	; 65
 36e:	f7 01       	movw	r30, r14
 370:	e6 56       	subi	r30, 0x66	; 102
 372:	fe 4f       	sbci	r31, 0xFE	; 254
 374:	80 83       	st	Z, r24
                if (password[idx] == 'A') {
 376:	f7 01       	movw	r30, r14
 378:	e1 56       	subi	r30, 0x61	; 97
 37a:	fe 4f       	sbci	r31, 0xFE	; 254
 37c:	80 81       	ld	r24, Z
 37e:	81 34       	cpi	r24, 0x41	; 65
 380:	09 f0       	breq	.+2      	; 0x384 <main+0x264>
 382:	c2 c0       	rjmp	.+388    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
                    led_test();
 384:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 388:	bf c0       	rjmp	.+382    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b10110111) {
 38a:	17 3b       	cpi	r17, 0xB7	; 183
 38c:	79 f4       	brne	.+30     	; 0x3ac <main+0x28c>
                // 4
                given_password[idx] = '4';
 38e:	84 e3       	ldi	r24, 0x34	; 52
 390:	f7 01       	movw	r30, r14
 392:	e6 56       	subi	r30, 0x66	; 102
 394:	fe 4f       	sbci	r31, 0xFE	; 254
 396:	80 83       	st	Z, r24
                if (password[idx] == '4') {
 398:	f7 01       	movw	r30, r14
 39a:	e1 56       	subi	r30, 0x61	; 97
 39c:	fe 4f       	sbci	r31, 0xFE	; 254
 39e:	80 81       	ld	r24, Z
 3a0:	84 33       	cpi	r24, 0x34	; 52
 3a2:	09 f0       	breq	.+2      	; 0x3a6 <main+0x286>
 3a4:	b1 c0       	rjmp	.+354    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
                    led_test();
 3a6:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 3aa:	ae c0       	rjmp	.+348    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b10111011) {
 3ac:	1b 3b       	cpi	r17, 0xBB	; 187
 3ae:	79 f4       	brne	.+30     	; 0x3ce <main+0x2ae>
                // 5
                given_password[idx] = '5';
 3b0:	85 e3       	ldi	r24, 0x35	; 53
 3b2:	f7 01       	movw	r30, r14
 3b4:	e6 56       	subi	r30, 0x66	; 102
 3b6:	fe 4f       	sbci	r31, 0xFE	; 254
 3b8:	80 83       	st	Z, r24
                if (password[idx] == '5') {
 3ba:	f7 01       	movw	r30, r14
 3bc:	e1 56       	subi	r30, 0x61	; 97
 3be:	fe 4f       	sbci	r31, 0xFE	; 254
 3c0:	80 81       	ld	r24, Z
 3c2:	85 33       	cpi	r24, 0x35	; 53
 3c4:	09 f0       	breq	.+2      	; 0x3c8 <main+0x2a8>
 3c6:	a0 c0       	rjmp	.+320    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
                    led_test();
 3c8:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 3cc:	9d c0       	rjmp	.+314    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b10111101) {
 3ce:	1d 3b       	cpi	r17, 0xBD	; 189
 3d0:	79 f4       	brne	.+30     	; 0x3f0 <main+0x2d0>
                // 6
                given_password[idx] = '6';
 3d2:	86 e3       	ldi	r24, 0x36	; 54
 3d4:	f7 01       	movw	r30, r14
 3d6:	e6 56       	subi	r30, 0x66	; 102
 3d8:	fe 4f       	sbci	r31, 0xFE	; 254
 3da:	80 83       	st	Z, r24
                if (password[idx] == '6') {
 3dc:	f7 01       	movw	r30, r14
 3de:	e1 56       	subi	r30, 0x61	; 97
 3e0:	fe 4f       	sbci	r31, 0xFE	; 254
 3e2:	80 81       	ld	r24, Z
 3e4:	86 33       	cpi	r24, 0x36	; 54
 3e6:	09 f0       	breq	.+2      	; 0x3ea <main+0x2ca>
 3e8:	8f c0       	rjmp	.+286    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
                    led_test();
 3ea:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 3ee:	8c c0       	rjmp	.+280    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b10111110) {
 3f0:	1e 3b       	cpi	r17, 0xBE	; 190
 3f2:	79 f4       	brne	.+30     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
                // B
                given_password[idx] = 'B';
 3f4:	82 e4       	ldi	r24, 0x42	; 66
 3f6:	f7 01       	movw	r30, r14
 3f8:	e6 56       	subi	r30, 0x66	; 102
 3fa:	fe 4f       	sbci	r31, 0xFE	; 254
 3fc:	80 83       	st	Z, r24
                if (password[idx] == 'B') {
 3fe:	f7 01       	movw	r30, r14
 400:	e1 56       	subi	r30, 0x61	; 97
 402:	fe 4f       	sbci	r31, 0xFE	; 254
 404:	80 81       	ld	r24, Z
 406:	82 34       	cpi	r24, 0x42	; 66
 408:	09 f0       	breq	.+2      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 40a:	7e c0       	rjmp	.+252    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
                    led_test();
 40c:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 410:	7b c0       	rjmp	.+246    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11010111) {
 412:	17 3d       	cpi	r17, 0xD7	; 215
 414:	79 f4       	brne	.+30     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
                // 7
                given_password[idx] = '7';
 416:	87 e3       	ldi	r24, 0x37	; 55
 418:	f7 01       	movw	r30, r14
 41a:	e6 56       	subi	r30, 0x66	; 102
 41c:	fe 4f       	sbci	r31, 0xFE	; 254
 41e:	80 83       	st	Z, r24
                if (password[idx] == '7') {
 420:	f7 01       	movw	r30, r14
 422:	e1 56       	subi	r30, 0x61	; 97
 424:	fe 4f       	sbci	r31, 0xFE	; 254
 426:	80 81       	ld	r24, Z
 428:	87 33       	cpi	r24, 0x37	; 55
 42a:	09 f0       	breq	.+2      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42c:	6d c0       	rjmp	.+218    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
                    led_test();
 42e:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 432:	6a c0       	rjmp	.+212    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11011011) {
 434:	1b 3d       	cpi	r17, 0xDB	; 219
 436:	79 f4       	brne	.+30     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
                // 8
                given_password[idx] = '8';
 438:	88 e3       	ldi	r24, 0x38	; 56
 43a:	f7 01       	movw	r30, r14
 43c:	e6 56       	subi	r30, 0x66	; 102
 43e:	fe 4f       	sbci	r31, 0xFE	; 254
 440:	80 83       	st	Z, r24
                if (password[idx] == '8') {
 442:	f7 01       	movw	r30, r14
 444:	e1 56       	subi	r30, 0x61	; 97
 446:	fe 4f       	sbci	r31, 0xFE	; 254
 448:	80 81       	ld	r24, Z
 44a:	88 33       	cpi	r24, 0x38	; 56
 44c:	09 f0       	breq	.+2      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 44e:	5c c0       	rjmp	.+184    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
                    led_test();
 450:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 454:	59 c0       	rjmp	.+178    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11011101) {
 456:	1d 3d       	cpi	r17, 0xDD	; 221
 458:	79 f4       	brne	.+30     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
                // 9
                given_password[idx] = '9';
 45a:	89 e3       	ldi	r24, 0x39	; 57
 45c:	f7 01       	movw	r30, r14
 45e:	e6 56       	subi	r30, 0x66	; 102
 460:	fe 4f       	sbci	r31, 0xFE	; 254
 462:	80 83       	st	Z, r24
                if (password[idx] == '9') {
 464:	f7 01       	movw	r30, r14
 466:	e1 56       	subi	r30, 0x61	; 97
 468:	fe 4f       	sbci	r31, 0xFE	; 254
 46a:	80 81       	ld	r24, Z
 46c:	89 33       	cpi	r24, 0x39	; 57
 46e:	09 f0       	breq	.+2      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 470:	4b c0       	rjmp	.+150    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
                    led_test();
 472:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 476:	48 c0       	rjmp	.+144    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11011110) {
 478:	1e 3d       	cpi	r17, 0xDE	; 222
 47a:	71 f4       	brne	.+28     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
                // C
                given_password[idx] = 'C';
 47c:	83 e4       	ldi	r24, 0x43	; 67
 47e:	f7 01       	movw	r30, r14
 480:	e6 56       	subi	r30, 0x66	; 102
 482:	fe 4f       	sbci	r31, 0xFE	; 254
 484:	80 83       	st	Z, r24
                if (password[idx] == 'C') {
 486:	f7 01       	movw	r30, r14
 488:	e1 56       	subi	r30, 0x61	; 97
 48a:	fe 4f       	sbci	r31, 0xFE	; 254
 48c:	80 81       	ld	r24, Z
 48e:	83 34       	cpi	r24, 0x43	; 67
 490:	d9 f5       	brne	.+118    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
                    led_test();
 492:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 496:	38 c0       	rjmp	.+112    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11100111) {
 498:	17 3e       	cpi	r17, 0xE7	; 231
 49a:	71 f4       	brne	.+28     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
                // *
                // TODO: make this the backspace button
                given_password[idx] = '*';
 49c:	8a e2       	ldi	r24, 0x2A	; 42
 49e:	f7 01       	movw	r30, r14
 4a0:	e6 56       	subi	r30, 0x66	; 102
 4a2:	fe 4f       	sbci	r31, 0xFE	; 254
 4a4:	80 83       	st	Z, r24
                if (password[idx] == '*') {
 4a6:	f7 01       	movw	r30, r14
 4a8:	e1 56       	subi	r30, 0x61	; 97
 4aa:	fe 4f       	sbci	r31, 0xFE	; 254
 4ac:	80 81       	ld	r24, Z
 4ae:	8a 32       	cpi	r24, 0x2A	; 42
 4b0:	59 f5       	brne	.+86     	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
                    led_test();
 4b2:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 4b6:	28 c0       	rjmp	.+80     	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11101011) {
 4b8:	1b 3e       	cpi	r17, 0xEB	; 235
 4ba:	71 f4       	brne	.+28     	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
                // 0
                given_password[idx] = '0';
 4bc:	80 e3       	ldi	r24, 0x30	; 48
 4be:	f7 01       	movw	r30, r14
 4c0:	e6 56       	subi	r30, 0x66	; 102
 4c2:	fe 4f       	sbci	r31, 0xFE	; 254
 4c4:	80 83       	st	Z, r24
                if (password[idx] == '0') {
 4c6:	f7 01       	movw	r30, r14
 4c8:	e1 56       	subi	r30, 0x61	; 97
 4ca:	fe 4f       	sbci	r31, 0xFE	; 254
 4cc:	80 81       	ld	r24, Z
 4ce:	80 33       	cpi	r24, 0x30	; 48
 4d0:	d9 f4       	brne	.+54     	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
                    led_test();
 4d2:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 4d6:	18 c0       	rjmp	.+48     	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11101101) {
 4d8:	1d 3e       	cpi	r17, 0xED	; 237
 4da:	39 f4       	brne	.+14     	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
                // #
                compare(password, given_password);
 4dc:	6a e9       	ldi	r22, 0x9A	; 154
 4de:	71 e0       	ldi	r23, 0x01	; 1
 4e0:	8f e9       	ldi	r24, 0x9F	; 159
 4e2:	91 e0       	ldi	r25, 0x01	; 1
 4e4:	0e 94 78 00 	call	0xf0	; 0xf0 <compare>
 4e8:	0f c0       	rjmp	.+30     	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
                //printf("#");
                //given_password[idx] = '#';
            }
            else if (key_pressed == 0b11101110) {
 4ea:	1e 3e       	cpi	r17, 0xEE	; 238
 4ec:	69 f4       	brne	.+26     	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
                // D
                given_password[idx] = 'D';
 4ee:	84 e4       	ldi	r24, 0x44	; 68
 4f0:	f7 01       	movw	r30, r14
 4f2:	e6 56       	subi	r30, 0x66	; 102
 4f4:	fe 4f       	sbci	r31, 0xFE	; 254
 4f6:	80 83       	st	Z, r24
                if (password[idx] == 'D') {
 4f8:	f7 01       	movw	r30, r14
 4fa:	e1 56       	subi	r30, 0x61	; 97
 4fc:	fe 4f       	sbci	r31, 0xFE	; 254
 4fe:	80 81       	ld	r24, Z
 500:	84 34       	cpi	r24, 0x44	; 68
 502:	11 f4       	brne	.+4      	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
                    led_test();
 504:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
                }
            }
            
            /* Initialization for new loop */
            // Make rows as output and columns as input
            DDRD |= 0b11000000;
 508:	8a b1       	in	r24, 0x0a	; 10
 50a:	80 6c       	ori	r24, 0xC0	; 192
 50c:	8a b9       	out	0x0a, r24	; 10
            DDRB = 0b00000011;
 50e:	83 e0       	ldi	r24, 0x03	; 3
 510:	84 b9       	out	0x04, r24	; 4
 512:	8f e3       	ldi	r24, 0x3F	; 63
 514:	9c e9       	ldi	r25, 0x9C	; 156
 516:	01 97       	sbiw	r24, 0x01	; 1
 518:	f1 f7       	brne	.-4      	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
 51a:	00 c0       	rjmp	.+0      	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
 51c:	00 00       	nop
            PORTB &= 0b11111100;
            PORTD &= 0b00111111;
            _delay_ms(100);*/
            
            // Power the row pins
            PORTD |= 0b11000000;
 51e:	8b b1       	in	r24, 0x0b	; 11
 520:	80 6c       	ori	r24, 0xC0	; 192
 522:	8b b9       	out	0x0b, r24	; 11
            PORTB |= 0b00000011;
 524:	85 b1       	in	r24, 0x05	; 5
 526:	83 60       	ori	r24, 0x03	; 3
 528:	85 b9       	out	0x05, r24	; 5
 52a:	ef e3       	ldi	r30, 0x3F	; 63
 52c:	fc e9       	ldi	r31, 0x9C	; 156
 52e:	31 97       	sbiw	r30, 0x01	; 1
 530:	f1 f7       	brne	.-4      	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
 532:	00 c0       	rjmp	.+0      	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
 534:	00 00       	nop
            //PORTB &= 0b11000011;
            _delay_ms(10);
            
            key_pressed = 0;
            idx +=1;
 536:	ff ef       	ldi	r31, 0xFF	; 255
 538:	ef 1a       	sub	r14, r31
 53a:	ff 0a       	sbc	r15, r31
 53c:	8f e3       	ldi	r24, 0x3F	; 63
 53e:	9c e9       	ldi	r25, 0x9C	; 156
 540:	01 97       	sbiw	r24, 0x01	; 1
 542:	f1 f7       	brne	.-4      	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
 544:	00 c0       	rjmp	.+0      	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
 546:	00 00       	nop
 548:	38 ce       	rjmp	.-912    	; 0x1ba <main+0x9a>

0000054a <USART_init>:
#include <stdio.h>


void USART_init(unsigned int ubrr) {
	// Set baud rate
	UBRR0H = (unsigned char) (ubrr>>8);
 54a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char) ubrr;
 54e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 552:	88 e1       	ldi	r24, 0x18	; 24
 554:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	// Set frame format: 8data, 2stop bit
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);
 558:	8e e0       	ldi	r24, 0x0E	; 14
 55a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 55e:	08 95       	ret

00000560 <USART_transmit>:
}

void USART_transmit(unsigned char data) {
	// Wait for empty transmit buffer
	while(!(UCSR0A & (1<<UDRE0)));
 560:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 564:	95 ff       	sbrs	r25, 5
 566:	fc cf       	rjmp	.-8      	; 0x560 <USART_transmit>
    
	// Put data into buffer, send the data
	UDR0 = data;
 568:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 56c:	08 95       	ret

0000056e <USART_receive>:
}

unsigned char USART_receive(void) {
	// Wait for data to be received
	while(!(UCSR0A & (1<<RXC0)));
 56e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 572:	88 23       	and	r24, r24
 574:	e4 f7       	brge	.-8      	; 0x56e <USART_receive>
	
	// Get and return received data from buffer
	return UDR0;
 576:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 57a:	08 95       	ret

0000057c <strcmp>:
 57c:	fb 01       	movw	r30, r22
 57e:	dc 01       	movw	r26, r24
 580:	8d 91       	ld	r24, X+
 582:	01 90       	ld	r0, Z+
 584:	80 19       	sub	r24, r0
 586:	01 10       	cpse	r0, r1
 588:	d9 f3       	breq	.-10     	; 0x580 <strcmp+0x4>
 58a:	99 0b       	sbc	r25, r25
 58c:	08 95       	ret

0000058e <printf>:
 58e:	a0 e0       	ldi	r26, 0x00	; 0
 590:	b0 e0       	ldi	r27, 0x00	; 0
 592:	ed ec       	ldi	r30, 0xCD	; 205
 594:	f2 e0       	ldi	r31, 0x02	; 2
 596:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__prologue_saves__+0x20>
 59a:	ae 01       	movw	r20, r28
 59c:	4b 5f       	subi	r20, 0xFB	; 251
 59e:	5f 4f       	sbci	r21, 0xFF	; 255
 5a0:	fa 01       	movw	r30, r20
 5a2:	61 91       	ld	r22, Z+
 5a4:	71 91       	ld	r23, Z+
 5a6:	af 01       	movw	r20, r30
 5a8:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end+0x2>
 5ac:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <__data_end+0x3>
 5b0:	0e 94 dd 02 	call	0x5ba	; 0x5ba <vfprintf>
 5b4:	e2 e0       	ldi	r30, 0x02	; 2
 5b6:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__epilogue_restores__+0x20>

000005ba <vfprintf>:
 5ba:	ab e0       	ldi	r26, 0x0B	; 11
 5bc:	b0 e0       	ldi	r27, 0x00	; 0
 5be:	e3 ee       	ldi	r30, 0xE3	; 227
 5c0:	f2 e0       	ldi	r31, 0x02	; 2
 5c2:	0c 94 6e 05 	jmp	0xadc	; 0xadc <__prologue_saves__>
 5c6:	6c 01       	movw	r12, r24
 5c8:	7b 01       	movw	r14, r22
 5ca:	8a 01       	movw	r16, r20
 5cc:	fc 01       	movw	r30, r24
 5ce:	17 82       	std	Z+7, r1	; 0x07
 5d0:	16 82       	std	Z+6, r1	; 0x06
 5d2:	83 81       	ldd	r24, Z+3	; 0x03
 5d4:	81 ff       	sbrs	r24, 1
 5d6:	cc c1       	rjmp	.+920    	; 0x970 <__stack+0x71>
 5d8:	ce 01       	movw	r24, r28
 5da:	01 96       	adiw	r24, 0x01	; 1
 5dc:	3c 01       	movw	r6, r24
 5de:	f6 01       	movw	r30, r12
 5e0:	93 81       	ldd	r25, Z+3	; 0x03
 5e2:	f7 01       	movw	r30, r14
 5e4:	93 fd       	sbrc	r25, 3
 5e6:	85 91       	lpm	r24, Z+
 5e8:	93 ff       	sbrs	r25, 3
 5ea:	81 91       	ld	r24, Z+
 5ec:	7f 01       	movw	r14, r30
 5ee:	88 23       	and	r24, r24
 5f0:	09 f4       	brne	.+2      	; 0x5f4 <vfprintf+0x3a>
 5f2:	ba c1       	rjmp	.+884    	; 0x968 <__stack+0x69>
 5f4:	85 32       	cpi	r24, 0x25	; 37
 5f6:	39 f4       	brne	.+14     	; 0x606 <vfprintf+0x4c>
 5f8:	93 fd       	sbrc	r25, 3
 5fa:	85 91       	lpm	r24, Z+
 5fc:	93 ff       	sbrs	r25, 3
 5fe:	81 91       	ld	r24, Z+
 600:	7f 01       	movw	r14, r30
 602:	85 32       	cpi	r24, 0x25	; 37
 604:	29 f4       	brne	.+10     	; 0x610 <vfprintf+0x56>
 606:	b6 01       	movw	r22, r12
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <fputc>
 60e:	e7 cf       	rjmp	.-50     	; 0x5de <vfprintf+0x24>
 610:	91 2c       	mov	r9, r1
 612:	21 2c       	mov	r2, r1
 614:	31 2c       	mov	r3, r1
 616:	ff e1       	ldi	r31, 0x1F	; 31
 618:	f3 15       	cp	r31, r3
 61a:	d8 f0       	brcs	.+54     	; 0x652 <vfprintf+0x98>
 61c:	8b 32       	cpi	r24, 0x2B	; 43
 61e:	79 f0       	breq	.+30     	; 0x63e <vfprintf+0x84>
 620:	38 f4       	brcc	.+14     	; 0x630 <vfprintf+0x76>
 622:	80 32       	cpi	r24, 0x20	; 32
 624:	79 f0       	breq	.+30     	; 0x644 <vfprintf+0x8a>
 626:	83 32       	cpi	r24, 0x23	; 35
 628:	a1 f4       	brne	.+40     	; 0x652 <vfprintf+0x98>
 62a:	23 2d       	mov	r18, r3
 62c:	20 61       	ori	r18, 0x10	; 16
 62e:	1d c0       	rjmp	.+58     	; 0x66a <vfprintf+0xb0>
 630:	8d 32       	cpi	r24, 0x2D	; 45
 632:	61 f0       	breq	.+24     	; 0x64c <vfprintf+0x92>
 634:	80 33       	cpi	r24, 0x30	; 48
 636:	69 f4       	brne	.+26     	; 0x652 <vfprintf+0x98>
 638:	23 2d       	mov	r18, r3
 63a:	21 60       	ori	r18, 0x01	; 1
 63c:	16 c0       	rjmp	.+44     	; 0x66a <vfprintf+0xb0>
 63e:	83 2d       	mov	r24, r3
 640:	82 60       	ori	r24, 0x02	; 2
 642:	38 2e       	mov	r3, r24
 644:	e3 2d       	mov	r30, r3
 646:	e4 60       	ori	r30, 0x04	; 4
 648:	3e 2e       	mov	r3, r30
 64a:	2a c0       	rjmp	.+84     	; 0x6a0 <vfprintf+0xe6>
 64c:	f3 2d       	mov	r31, r3
 64e:	f8 60       	ori	r31, 0x08	; 8
 650:	1d c0       	rjmp	.+58     	; 0x68c <vfprintf+0xd2>
 652:	37 fc       	sbrc	r3, 7
 654:	2d c0       	rjmp	.+90     	; 0x6b0 <vfprintf+0xf6>
 656:	20 ed       	ldi	r18, 0xD0	; 208
 658:	28 0f       	add	r18, r24
 65a:	2a 30       	cpi	r18, 0x0A	; 10
 65c:	40 f0       	brcs	.+16     	; 0x66e <vfprintf+0xb4>
 65e:	8e 32       	cpi	r24, 0x2E	; 46
 660:	b9 f4       	brne	.+46     	; 0x690 <vfprintf+0xd6>
 662:	36 fc       	sbrc	r3, 6
 664:	81 c1       	rjmp	.+770    	; 0x968 <__stack+0x69>
 666:	23 2d       	mov	r18, r3
 668:	20 64       	ori	r18, 0x40	; 64
 66a:	32 2e       	mov	r3, r18
 66c:	19 c0       	rjmp	.+50     	; 0x6a0 <vfprintf+0xe6>
 66e:	36 fe       	sbrs	r3, 6
 670:	06 c0       	rjmp	.+12     	; 0x67e <vfprintf+0xc4>
 672:	8a e0       	ldi	r24, 0x0A	; 10
 674:	98 9e       	mul	r9, r24
 676:	20 0d       	add	r18, r0
 678:	11 24       	eor	r1, r1
 67a:	92 2e       	mov	r9, r18
 67c:	11 c0       	rjmp	.+34     	; 0x6a0 <vfprintf+0xe6>
 67e:	ea e0       	ldi	r30, 0x0A	; 10
 680:	2e 9e       	mul	r2, r30
 682:	20 0d       	add	r18, r0
 684:	11 24       	eor	r1, r1
 686:	22 2e       	mov	r2, r18
 688:	f3 2d       	mov	r31, r3
 68a:	f0 62       	ori	r31, 0x20	; 32
 68c:	3f 2e       	mov	r3, r31
 68e:	08 c0       	rjmp	.+16     	; 0x6a0 <vfprintf+0xe6>
 690:	8c 36       	cpi	r24, 0x6C	; 108
 692:	21 f4       	brne	.+8      	; 0x69c <vfprintf+0xe2>
 694:	83 2d       	mov	r24, r3
 696:	80 68       	ori	r24, 0x80	; 128
 698:	38 2e       	mov	r3, r24
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <vfprintf+0xe6>
 69c:	88 36       	cpi	r24, 0x68	; 104
 69e:	41 f4       	brne	.+16     	; 0x6b0 <vfprintf+0xf6>
 6a0:	f7 01       	movw	r30, r14
 6a2:	93 fd       	sbrc	r25, 3
 6a4:	85 91       	lpm	r24, Z+
 6a6:	93 ff       	sbrs	r25, 3
 6a8:	81 91       	ld	r24, Z+
 6aa:	7f 01       	movw	r14, r30
 6ac:	81 11       	cpse	r24, r1
 6ae:	b3 cf       	rjmp	.-154    	; 0x616 <vfprintf+0x5c>
 6b0:	98 2f       	mov	r25, r24
 6b2:	9f 7d       	andi	r25, 0xDF	; 223
 6b4:	95 54       	subi	r25, 0x45	; 69
 6b6:	93 30       	cpi	r25, 0x03	; 3
 6b8:	28 f4       	brcc	.+10     	; 0x6c4 <vfprintf+0x10a>
 6ba:	0c 5f       	subi	r16, 0xFC	; 252
 6bc:	1f 4f       	sbci	r17, 0xFF	; 255
 6be:	9f e3       	ldi	r25, 0x3F	; 63
 6c0:	99 83       	std	Y+1, r25	; 0x01
 6c2:	0d c0       	rjmp	.+26     	; 0x6de <vfprintf+0x124>
 6c4:	83 36       	cpi	r24, 0x63	; 99
 6c6:	31 f0       	breq	.+12     	; 0x6d4 <vfprintf+0x11a>
 6c8:	83 37       	cpi	r24, 0x73	; 115
 6ca:	71 f0       	breq	.+28     	; 0x6e8 <vfprintf+0x12e>
 6cc:	83 35       	cpi	r24, 0x53	; 83
 6ce:	09 f0       	breq	.+2      	; 0x6d2 <vfprintf+0x118>
 6d0:	59 c0       	rjmp	.+178    	; 0x784 <vfprintf+0x1ca>
 6d2:	21 c0       	rjmp	.+66     	; 0x716 <vfprintf+0x15c>
 6d4:	f8 01       	movw	r30, r16
 6d6:	80 81       	ld	r24, Z
 6d8:	89 83       	std	Y+1, r24	; 0x01
 6da:	0e 5f       	subi	r16, 0xFE	; 254
 6dc:	1f 4f       	sbci	r17, 0xFF	; 255
 6de:	88 24       	eor	r8, r8
 6e0:	83 94       	inc	r8
 6e2:	91 2c       	mov	r9, r1
 6e4:	53 01       	movw	r10, r6
 6e6:	13 c0       	rjmp	.+38     	; 0x70e <vfprintf+0x154>
 6e8:	28 01       	movw	r4, r16
 6ea:	f2 e0       	ldi	r31, 0x02	; 2
 6ec:	4f 0e       	add	r4, r31
 6ee:	51 1c       	adc	r5, r1
 6f0:	f8 01       	movw	r30, r16
 6f2:	a0 80       	ld	r10, Z
 6f4:	b1 80       	ldd	r11, Z+1	; 0x01
 6f6:	36 fe       	sbrs	r3, 6
 6f8:	03 c0       	rjmp	.+6      	; 0x700 <vfprintf+0x146>
 6fa:	69 2d       	mov	r22, r9
 6fc:	70 e0       	ldi	r23, 0x00	; 0
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <vfprintf+0x14a>
 700:	6f ef       	ldi	r22, 0xFF	; 255
 702:	7f ef       	ldi	r23, 0xFF	; 255
 704:	c5 01       	movw	r24, r10
 706:	0e 94 c9 04 	call	0x992	; 0x992 <strnlen>
 70a:	4c 01       	movw	r8, r24
 70c:	82 01       	movw	r16, r4
 70e:	f3 2d       	mov	r31, r3
 710:	ff 77       	andi	r31, 0x7F	; 127
 712:	3f 2e       	mov	r3, r31
 714:	16 c0       	rjmp	.+44     	; 0x742 <vfprintf+0x188>
 716:	28 01       	movw	r4, r16
 718:	22 e0       	ldi	r18, 0x02	; 2
 71a:	42 0e       	add	r4, r18
 71c:	51 1c       	adc	r5, r1
 71e:	f8 01       	movw	r30, r16
 720:	a0 80       	ld	r10, Z
 722:	b1 80       	ldd	r11, Z+1	; 0x01
 724:	36 fe       	sbrs	r3, 6
 726:	03 c0       	rjmp	.+6      	; 0x72e <vfprintf+0x174>
 728:	69 2d       	mov	r22, r9
 72a:	70 e0       	ldi	r23, 0x00	; 0
 72c:	02 c0       	rjmp	.+4      	; 0x732 <vfprintf+0x178>
 72e:	6f ef       	ldi	r22, 0xFF	; 255
 730:	7f ef       	ldi	r23, 0xFF	; 255
 732:	c5 01       	movw	r24, r10
 734:	0e 94 be 04 	call	0x97c	; 0x97c <strnlen_P>
 738:	4c 01       	movw	r8, r24
 73a:	f3 2d       	mov	r31, r3
 73c:	f0 68       	ori	r31, 0x80	; 128
 73e:	3f 2e       	mov	r3, r31
 740:	82 01       	movw	r16, r4
 742:	33 fc       	sbrc	r3, 3
 744:	1b c0       	rjmp	.+54     	; 0x77c <vfprintf+0x1c2>
 746:	82 2d       	mov	r24, r2
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	88 16       	cp	r8, r24
 74c:	99 06       	cpc	r9, r25
 74e:	b0 f4       	brcc	.+44     	; 0x77c <vfprintf+0x1c2>
 750:	b6 01       	movw	r22, r12
 752:	80 e2       	ldi	r24, 0x20	; 32
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <fputc>
 75a:	2a 94       	dec	r2
 75c:	f4 cf       	rjmp	.-24     	; 0x746 <vfprintf+0x18c>
 75e:	f5 01       	movw	r30, r10
 760:	37 fc       	sbrc	r3, 7
 762:	85 91       	lpm	r24, Z+
 764:	37 fe       	sbrs	r3, 7
 766:	81 91       	ld	r24, Z+
 768:	5f 01       	movw	r10, r30
 76a:	b6 01       	movw	r22, r12
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <fputc>
 772:	21 10       	cpse	r2, r1
 774:	2a 94       	dec	r2
 776:	21 e0       	ldi	r18, 0x01	; 1
 778:	82 1a       	sub	r8, r18
 77a:	91 08       	sbc	r9, r1
 77c:	81 14       	cp	r8, r1
 77e:	91 04       	cpc	r9, r1
 780:	71 f7       	brne	.-36     	; 0x75e <vfprintf+0x1a4>
 782:	e8 c0       	rjmp	.+464    	; 0x954 <__stack+0x55>
 784:	84 36       	cpi	r24, 0x64	; 100
 786:	11 f0       	breq	.+4      	; 0x78c <vfprintf+0x1d2>
 788:	89 36       	cpi	r24, 0x69	; 105
 78a:	41 f5       	brne	.+80     	; 0x7dc <vfprintf+0x222>
 78c:	f8 01       	movw	r30, r16
 78e:	37 fe       	sbrs	r3, 7
 790:	07 c0       	rjmp	.+14     	; 0x7a0 <vfprintf+0x1e6>
 792:	60 81       	ld	r22, Z
 794:	71 81       	ldd	r23, Z+1	; 0x01
 796:	82 81       	ldd	r24, Z+2	; 0x02
 798:	93 81       	ldd	r25, Z+3	; 0x03
 79a:	0c 5f       	subi	r16, 0xFC	; 252
 79c:	1f 4f       	sbci	r17, 0xFF	; 255
 79e:	08 c0       	rjmp	.+16     	; 0x7b0 <vfprintf+0x1f6>
 7a0:	60 81       	ld	r22, Z
 7a2:	71 81       	ldd	r23, Z+1	; 0x01
 7a4:	07 2e       	mov	r0, r23
 7a6:	00 0c       	add	r0, r0
 7a8:	88 0b       	sbc	r24, r24
 7aa:	99 0b       	sbc	r25, r25
 7ac:	0e 5f       	subi	r16, 0xFE	; 254
 7ae:	1f 4f       	sbci	r17, 0xFF	; 255
 7b0:	f3 2d       	mov	r31, r3
 7b2:	ff 76       	andi	r31, 0x6F	; 111
 7b4:	3f 2e       	mov	r3, r31
 7b6:	97 ff       	sbrs	r25, 7
 7b8:	09 c0       	rjmp	.+18     	; 0x7cc <vfprintf+0x212>
 7ba:	90 95       	com	r25
 7bc:	80 95       	com	r24
 7be:	70 95       	com	r23
 7c0:	61 95       	neg	r22
 7c2:	7f 4f       	sbci	r23, 0xFF	; 255
 7c4:	8f 4f       	sbci	r24, 0xFF	; 255
 7c6:	9f 4f       	sbci	r25, 0xFF	; 255
 7c8:	f0 68       	ori	r31, 0x80	; 128
 7ca:	3f 2e       	mov	r3, r31
 7cc:	2a e0       	ldi	r18, 0x0A	; 10
 7ce:	30 e0       	ldi	r19, 0x00	; 0
 7d0:	a3 01       	movw	r20, r6
 7d2:	0e 94 10 05 	call	0xa20	; 0xa20 <__ultoa_invert>
 7d6:	88 2e       	mov	r8, r24
 7d8:	86 18       	sub	r8, r6
 7da:	45 c0       	rjmp	.+138    	; 0x866 <__DATA_REGION_LENGTH__+0x66>
 7dc:	85 37       	cpi	r24, 0x75	; 117
 7de:	31 f4       	brne	.+12     	; 0x7ec <vfprintf+0x232>
 7e0:	23 2d       	mov	r18, r3
 7e2:	2f 7e       	andi	r18, 0xEF	; 239
 7e4:	b2 2e       	mov	r11, r18
 7e6:	2a e0       	ldi	r18, 0x0A	; 10
 7e8:	30 e0       	ldi	r19, 0x00	; 0
 7ea:	25 c0       	rjmp	.+74     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 7ec:	93 2d       	mov	r25, r3
 7ee:	99 7f       	andi	r25, 0xF9	; 249
 7f0:	b9 2e       	mov	r11, r25
 7f2:	8f 36       	cpi	r24, 0x6F	; 111
 7f4:	c1 f0       	breq	.+48     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 7f6:	18 f4       	brcc	.+6      	; 0x7fe <vfprintf+0x244>
 7f8:	88 35       	cpi	r24, 0x58	; 88
 7fa:	79 f0       	breq	.+30     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7fc:	b5 c0       	rjmp	.+362    	; 0x968 <__stack+0x69>
 7fe:	80 37       	cpi	r24, 0x70	; 112
 800:	19 f0       	breq	.+6      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 802:	88 37       	cpi	r24, 0x78	; 120
 804:	21 f0       	breq	.+8      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 806:	b0 c0       	rjmp	.+352    	; 0x968 <__stack+0x69>
 808:	e9 2f       	mov	r30, r25
 80a:	e0 61       	ori	r30, 0x10	; 16
 80c:	be 2e       	mov	r11, r30
 80e:	b4 fe       	sbrs	r11, 4
 810:	0d c0       	rjmp	.+26     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 812:	fb 2d       	mov	r31, r11
 814:	f4 60       	ori	r31, 0x04	; 4
 816:	bf 2e       	mov	r11, r31
 818:	09 c0       	rjmp	.+18     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 81a:	34 fe       	sbrs	r3, 4
 81c:	0a c0       	rjmp	.+20     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 81e:	29 2f       	mov	r18, r25
 820:	26 60       	ori	r18, 0x06	; 6
 822:	b2 2e       	mov	r11, r18
 824:	06 c0       	rjmp	.+12     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 826:	28 e0       	ldi	r18, 0x08	; 8
 828:	30 e0       	ldi	r19, 0x00	; 0
 82a:	05 c0       	rjmp	.+10     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 82c:	20 e1       	ldi	r18, 0x10	; 16
 82e:	30 e0       	ldi	r19, 0x00	; 0
 830:	02 c0       	rjmp	.+4      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 832:	20 e1       	ldi	r18, 0x10	; 16
 834:	32 e0       	ldi	r19, 0x02	; 2
 836:	f8 01       	movw	r30, r16
 838:	b7 fe       	sbrs	r11, 7
 83a:	07 c0       	rjmp	.+14     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 83c:	60 81       	ld	r22, Z
 83e:	71 81       	ldd	r23, Z+1	; 0x01
 840:	82 81       	ldd	r24, Z+2	; 0x02
 842:	93 81       	ldd	r25, Z+3	; 0x03
 844:	0c 5f       	subi	r16, 0xFC	; 252
 846:	1f 4f       	sbci	r17, 0xFF	; 255
 848:	06 c0       	rjmp	.+12     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 84a:	60 81       	ld	r22, Z
 84c:	71 81       	ldd	r23, Z+1	; 0x01
 84e:	80 e0       	ldi	r24, 0x00	; 0
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	0e 5f       	subi	r16, 0xFE	; 254
 854:	1f 4f       	sbci	r17, 0xFF	; 255
 856:	a3 01       	movw	r20, r6
 858:	0e 94 10 05 	call	0xa20	; 0xa20 <__ultoa_invert>
 85c:	88 2e       	mov	r8, r24
 85e:	86 18       	sub	r8, r6
 860:	fb 2d       	mov	r31, r11
 862:	ff 77       	andi	r31, 0x7F	; 127
 864:	3f 2e       	mov	r3, r31
 866:	36 fe       	sbrs	r3, 6
 868:	0d c0       	rjmp	.+26     	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 86a:	23 2d       	mov	r18, r3
 86c:	2e 7f       	andi	r18, 0xFE	; 254
 86e:	a2 2e       	mov	r10, r18
 870:	89 14       	cp	r8, r9
 872:	58 f4       	brcc	.+22     	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
 874:	34 fe       	sbrs	r3, 4
 876:	0b c0       	rjmp	.+22     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
 878:	32 fc       	sbrc	r3, 2
 87a:	09 c0       	rjmp	.+18     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
 87c:	83 2d       	mov	r24, r3
 87e:	8e 7e       	andi	r24, 0xEE	; 238
 880:	a8 2e       	mov	r10, r24
 882:	05 c0       	rjmp	.+10     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
 884:	b8 2c       	mov	r11, r8
 886:	a3 2c       	mov	r10, r3
 888:	03 c0       	rjmp	.+6      	; 0x890 <__DATA_REGION_LENGTH__+0x90>
 88a:	b8 2c       	mov	r11, r8
 88c:	01 c0       	rjmp	.+2      	; 0x890 <__DATA_REGION_LENGTH__+0x90>
 88e:	b9 2c       	mov	r11, r9
 890:	a4 fe       	sbrs	r10, 4
 892:	0f c0       	rjmp	.+30     	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
 894:	fe 01       	movw	r30, r28
 896:	e8 0d       	add	r30, r8
 898:	f1 1d       	adc	r31, r1
 89a:	80 81       	ld	r24, Z
 89c:	80 33       	cpi	r24, 0x30	; 48
 89e:	21 f4       	brne	.+8      	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 8a0:	9a 2d       	mov	r25, r10
 8a2:	99 7e       	andi	r25, 0xE9	; 233
 8a4:	a9 2e       	mov	r10, r25
 8a6:	09 c0       	rjmp	.+18     	; 0x8ba <__DATA_REGION_LENGTH__+0xba>
 8a8:	a2 fe       	sbrs	r10, 2
 8aa:	06 c0       	rjmp	.+12     	; 0x8b8 <__DATA_REGION_LENGTH__+0xb8>
 8ac:	b3 94       	inc	r11
 8ae:	b3 94       	inc	r11
 8b0:	04 c0       	rjmp	.+8      	; 0x8ba <__DATA_REGION_LENGTH__+0xba>
 8b2:	8a 2d       	mov	r24, r10
 8b4:	86 78       	andi	r24, 0x86	; 134
 8b6:	09 f0       	breq	.+2      	; 0x8ba <__DATA_REGION_LENGTH__+0xba>
 8b8:	b3 94       	inc	r11
 8ba:	a3 fc       	sbrc	r10, 3
 8bc:	11 c0       	rjmp	.+34     	; 0x8e0 <__DATA_REGION_LENGTH__+0xe0>
 8be:	a0 fe       	sbrs	r10, 0
 8c0:	06 c0       	rjmp	.+12     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 8c2:	b2 14       	cp	r11, r2
 8c4:	88 f4       	brcc	.+34     	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
 8c6:	28 0c       	add	r2, r8
 8c8:	92 2c       	mov	r9, r2
 8ca:	9b 18       	sub	r9, r11
 8cc:	0e c0       	rjmp	.+28     	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
 8ce:	b2 14       	cp	r11, r2
 8d0:	60 f4       	brcc	.+24     	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
 8d2:	b6 01       	movw	r22, r12
 8d4:	80 e2       	ldi	r24, 0x20	; 32
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <fputc>
 8dc:	b3 94       	inc	r11
 8de:	f7 cf       	rjmp	.-18     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 8e0:	b2 14       	cp	r11, r2
 8e2:	18 f4       	brcc	.+6      	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
 8e4:	2b 18       	sub	r2, r11
 8e6:	02 c0       	rjmp	.+4      	; 0x8ec <__DATA_REGION_LENGTH__+0xec>
 8e8:	98 2c       	mov	r9, r8
 8ea:	21 2c       	mov	r2, r1
 8ec:	a4 fe       	sbrs	r10, 4
 8ee:	10 c0       	rjmp	.+32     	; 0x910 <__stack+0x11>
 8f0:	b6 01       	movw	r22, r12
 8f2:	80 e3       	ldi	r24, 0x30	; 48
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <fputc>
 8fa:	a2 fe       	sbrs	r10, 2
 8fc:	17 c0       	rjmp	.+46     	; 0x92c <__stack+0x2d>
 8fe:	a1 fc       	sbrc	r10, 1
 900:	03 c0       	rjmp	.+6      	; 0x908 <__stack+0x9>
 902:	88 e7       	ldi	r24, 0x78	; 120
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	02 c0       	rjmp	.+4      	; 0x90c <__stack+0xd>
 908:	88 e5       	ldi	r24, 0x58	; 88
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	b6 01       	movw	r22, r12
 90e:	0c c0       	rjmp	.+24     	; 0x928 <__stack+0x29>
 910:	8a 2d       	mov	r24, r10
 912:	86 78       	andi	r24, 0x86	; 134
 914:	59 f0       	breq	.+22     	; 0x92c <__stack+0x2d>
 916:	a1 fe       	sbrs	r10, 1
 918:	02 c0       	rjmp	.+4      	; 0x91e <__stack+0x1f>
 91a:	8b e2       	ldi	r24, 0x2B	; 43
 91c:	01 c0       	rjmp	.+2      	; 0x920 <__stack+0x21>
 91e:	80 e2       	ldi	r24, 0x20	; 32
 920:	a7 fc       	sbrc	r10, 7
 922:	8d e2       	ldi	r24, 0x2D	; 45
 924:	b6 01       	movw	r22, r12
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <fputc>
 92c:	89 14       	cp	r8, r9
 92e:	38 f4       	brcc	.+14     	; 0x93e <__stack+0x3f>
 930:	b6 01       	movw	r22, r12
 932:	80 e3       	ldi	r24, 0x30	; 48
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <fputc>
 93a:	9a 94       	dec	r9
 93c:	f7 cf       	rjmp	.-18     	; 0x92c <__stack+0x2d>
 93e:	8a 94       	dec	r8
 940:	f3 01       	movw	r30, r6
 942:	e8 0d       	add	r30, r8
 944:	f1 1d       	adc	r31, r1
 946:	80 81       	ld	r24, Z
 948:	b6 01       	movw	r22, r12
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <fputc>
 950:	81 10       	cpse	r8, r1
 952:	f5 cf       	rjmp	.-22     	; 0x93e <__stack+0x3f>
 954:	22 20       	and	r2, r2
 956:	09 f4       	brne	.+2      	; 0x95a <__stack+0x5b>
 958:	42 ce       	rjmp	.-892    	; 0x5de <vfprintf+0x24>
 95a:	b6 01       	movw	r22, r12
 95c:	80 e2       	ldi	r24, 0x20	; 32
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <fputc>
 964:	2a 94       	dec	r2
 966:	f6 cf       	rjmp	.-20     	; 0x954 <__stack+0x55>
 968:	f6 01       	movw	r30, r12
 96a:	86 81       	ldd	r24, Z+6	; 0x06
 96c:	97 81       	ldd	r25, Z+7	; 0x07
 96e:	02 c0       	rjmp	.+4      	; 0x974 <__stack+0x75>
 970:	8f ef       	ldi	r24, 0xFF	; 255
 972:	9f ef       	ldi	r25, 0xFF	; 255
 974:	2b 96       	adiw	r28, 0x0b	; 11
 976:	e2 e1       	ldi	r30, 0x12	; 18
 978:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__epilogue_restores__>

0000097c <strnlen_P>:
 97c:	fc 01       	movw	r30, r24
 97e:	05 90       	lpm	r0, Z+
 980:	61 50       	subi	r22, 0x01	; 1
 982:	70 40       	sbci	r23, 0x00	; 0
 984:	01 10       	cpse	r0, r1
 986:	d8 f7       	brcc	.-10     	; 0x97e <strnlen_P+0x2>
 988:	80 95       	com	r24
 98a:	90 95       	com	r25
 98c:	8e 0f       	add	r24, r30
 98e:	9f 1f       	adc	r25, r31
 990:	08 95       	ret

00000992 <strnlen>:
 992:	fc 01       	movw	r30, r24
 994:	61 50       	subi	r22, 0x01	; 1
 996:	70 40       	sbci	r23, 0x00	; 0
 998:	01 90       	ld	r0, Z+
 99a:	01 10       	cpse	r0, r1
 99c:	d8 f7       	brcc	.-10     	; 0x994 <strnlen+0x2>
 99e:	80 95       	com	r24
 9a0:	90 95       	com	r25
 9a2:	8e 0f       	add	r24, r30
 9a4:	9f 1f       	adc	r25, r31
 9a6:	08 95       	ret

000009a8 <fputc>:
 9a8:	0f 93       	push	r16
 9aa:	1f 93       	push	r17
 9ac:	cf 93       	push	r28
 9ae:	df 93       	push	r29
 9b0:	fb 01       	movw	r30, r22
 9b2:	23 81       	ldd	r18, Z+3	; 0x03
 9b4:	21 fd       	sbrc	r18, 1
 9b6:	03 c0       	rjmp	.+6      	; 0x9be <fputc+0x16>
 9b8:	8f ef       	ldi	r24, 0xFF	; 255
 9ba:	9f ef       	ldi	r25, 0xFF	; 255
 9bc:	2c c0       	rjmp	.+88     	; 0xa16 <fputc+0x6e>
 9be:	22 ff       	sbrs	r18, 2
 9c0:	16 c0       	rjmp	.+44     	; 0x9ee <fputc+0x46>
 9c2:	46 81       	ldd	r20, Z+6	; 0x06
 9c4:	57 81       	ldd	r21, Z+7	; 0x07
 9c6:	24 81       	ldd	r18, Z+4	; 0x04
 9c8:	35 81       	ldd	r19, Z+5	; 0x05
 9ca:	42 17       	cp	r20, r18
 9cc:	53 07       	cpc	r21, r19
 9ce:	44 f4       	brge	.+16     	; 0x9e0 <fputc+0x38>
 9d0:	a0 81       	ld	r26, Z
 9d2:	b1 81       	ldd	r27, Z+1	; 0x01
 9d4:	9d 01       	movw	r18, r26
 9d6:	2f 5f       	subi	r18, 0xFF	; 255
 9d8:	3f 4f       	sbci	r19, 0xFF	; 255
 9da:	31 83       	std	Z+1, r19	; 0x01
 9dc:	20 83       	st	Z, r18
 9de:	8c 93       	st	X, r24
 9e0:	26 81       	ldd	r18, Z+6	; 0x06
 9e2:	37 81       	ldd	r19, Z+7	; 0x07
 9e4:	2f 5f       	subi	r18, 0xFF	; 255
 9e6:	3f 4f       	sbci	r19, 0xFF	; 255
 9e8:	37 83       	std	Z+7, r19	; 0x07
 9ea:	26 83       	std	Z+6, r18	; 0x06
 9ec:	14 c0       	rjmp	.+40     	; 0xa16 <fputc+0x6e>
 9ee:	8b 01       	movw	r16, r22
 9f0:	ec 01       	movw	r28, r24
 9f2:	fb 01       	movw	r30, r22
 9f4:	00 84       	ldd	r0, Z+8	; 0x08
 9f6:	f1 85       	ldd	r31, Z+9	; 0x09
 9f8:	e0 2d       	mov	r30, r0
 9fa:	09 95       	icall
 9fc:	89 2b       	or	r24, r25
 9fe:	e1 f6       	brne	.-72     	; 0x9b8 <fputc+0x10>
 a00:	d8 01       	movw	r26, r16
 a02:	16 96       	adiw	r26, 0x06	; 6
 a04:	8d 91       	ld	r24, X+
 a06:	9c 91       	ld	r25, X
 a08:	17 97       	sbiw	r26, 0x07	; 7
 a0a:	01 96       	adiw	r24, 0x01	; 1
 a0c:	17 96       	adiw	r26, 0x07	; 7
 a0e:	9c 93       	st	X, r25
 a10:	8e 93       	st	-X, r24
 a12:	16 97       	sbiw	r26, 0x06	; 6
 a14:	ce 01       	movw	r24, r28
 a16:	df 91       	pop	r29
 a18:	cf 91       	pop	r28
 a1a:	1f 91       	pop	r17
 a1c:	0f 91       	pop	r16
 a1e:	08 95       	ret

00000a20 <__ultoa_invert>:
 a20:	fa 01       	movw	r30, r20
 a22:	aa 27       	eor	r26, r26
 a24:	28 30       	cpi	r18, 0x08	; 8
 a26:	51 f1       	breq	.+84     	; 0xa7c <__ultoa_invert+0x5c>
 a28:	20 31       	cpi	r18, 0x10	; 16
 a2a:	81 f1       	breq	.+96     	; 0xa8c <__ultoa_invert+0x6c>
 a2c:	e8 94       	clt
 a2e:	6f 93       	push	r22
 a30:	6e 7f       	andi	r22, 0xFE	; 254
 a32:	6e 5f       	subi	r22, 0xFE	; 254
 a34:	7f 4f       	sbci	r23, 0xFF	; 255
 a36:	8f 4f       	sbci	r24, 0xFF	; 255
 a38:	9f 4f       	sbci	r25, 0xFF	; 255
 a3a:	af 4f       	sbci	r26, 0xFF	; 255
 a3c:	b1 e0       	ldi	r27, 0x01	; 1
 a3e:	3e d0       	rcall	.+124    	; 0xabc <__ultoa_invert+0x9c>
 a40:	b4 e0       	ldi	r27, 0x04	; 4
 a42:	3c d0       	rcall	.+120    	; 0xabc <__ultoa_invert+0x9c>
 a44:	67 0f       	add	r22, r23
 a46:	78 1f       	adc	r23, r24
 a48:	89 1f       	adc	r24, r25
 a4a:	9a 1f       	adc	r25, r26
 a4c:	a1 1d       	adc	r26, r1
 a4e:	68 0f       	add	r22, r24
 a50:	79 1f       	adc	r23, r25
 a52:	8a 1f       	adc	r24, r26
 a54:	91 1d       	adc	r25, r1
 a56:	a1 1d       	adc	r26, r1
 a58:	6a 0f       	add	r22, r26
 a5a:	71 1d       	adc	r23, r1
 a5c:	81 1d       	adc	r24, r1
 a5e:	91 1d       	adc	r25, r1
 a60:	a1 1d       	adc	r26, r1
 a62:	20 d0       	rcall	.+64     	; 0xaa4 <__ultoa_invert+0x84>
 a64:	09 f4       	brne	.+2      	; 0xa68 <__ultoa_invert+0x48>
 a66:	68 94       	set
 a68:	3f 91       	pop	r19
 a6a:	2a e0       	ldi	r18, 0x0A	; 10
 a6c:	26 9f       	mul	r18, r22
 a6e:	11 24       	eor	r1, r1
 a70:	30 19       	sub	r19, r0
 a72:	30 5d       	subi	r19, 0xD0	; 208
 a74:	31 93       	st	Z+, r19
 a76:	de f6       	brtc	.-74     	; 0xa2e <__ultoa_invert+0xe>
 a78:	cf 01       	movw	r24, r30
 a7a:	08 95       	ret
 a7c:	46 2f       	mov	r20, r22
 a7e:	47 70       	andi	r20, 0x07	; 7
 a80:	40 5d       	subi	r20, 0xD0	; 208
 a82:	41 93       	st	Z+, r20
 a84:	b3 e0       	ldi	r27, 0x03	; 3
 a86:	0f d0       	rcall	.+30     	; 0xaa6 <__ultoa_invert+0x86>
 a88:	c9 f7       	brne	.-14     	; 0xa7c <__ultoa_invert+0x5c>
 a8a:	f6 cf       	rjmp	.-20     	; 0xa78 <__ultoa_invert+0x58>
 a8c:	46 2f       	mov	r20, r22
 a8e:	4f 70       	andi	r20, 0x0F	; 15
 a90:	40 5d       	subi	r20, 0xD0	; 208
 a92:	4a 33       	cpi	r20, 0x3A	; 58
 a94:	18 f0       	brcs	.+6      	; 0xa9c <__ultoa_invert+0x7c>
 a96:	49 5d       	subi	r20, 0xD9	; 217
 a98:	31 fd       	sbrc	r19, 1
 a9a:	40 52       	subi	r20, 0x20	; 32
 a9c:	41 93       	st	Z+, r20
 a9e:	02 d0       	rcall	.+4      	; 0xaa4 <__ultoa_invert+0x84>
 aa0:	a9 f7       	brne	.-22     	; 0xa8c <__ultoa_invert+0x6c>
 aa2:	ea cf       	rjmp	.-44     	; 0xa78 <__ultoa_invert+0x58>
 aa4:	b4 e0       	ldi	r27, 0x04	; 4
 aa6:	a6 95       	lsr	r26
 aa8:	97 95       	ror	r25
 aaa:	87 95       	ror	r24
 aac:	77 95       	ror	r23
 aae:	67 95       	ror	r22
 ab0:	ba 95       	dec	r27
 ab2:	c9 f7       	brne	.-14     	; 0xaa6 <__ultoa_invert+0x86>
 ab4:	00 97       	sbiw	r24, 0x00	; 0
 ab6:	61 05       	cpc	r22, r1
 ab8:	71 05       	cpc	r23, r1
 aba:	08 95       	ret
 abc:	9b 01       	movw	r18, r22
 abe:	ac 01       	movw	r20, r24
 ac0:	0a 2e       	mov	r0, r26
 ac2:	06 94       	lsr	r0
 ac4:	57 95       	ror	r21
 ac6:	47 95       	ror	r20
 ac8:	37 95       	ror	r19
 aca:	27 95       	ror	r18
 acc:	ba 95       	dec	r27
 ace:	c9 f7       	brne	.-14     	; 0xac2 <__ultoa_invert+0xa2>
 ad0:	62 0f       	add	r22, r18
 ad2:	73 1f       	adc	r23, r19
 ad4:	84 1f       	adc	r24, r20
 ad6:	95 1f       	adc	r25, r21
 ad8:	a0 1d       	adc	r26, r0
 ada:	08 95       	ret

00000adc <__prologue_saves__>:
 adc:	2f 92       	push	r2
 ade:	3f 92       	push	r3
 ae0:	4f 92       	push	r4
 ae2:	5f 92       	push	r5
 ae4:	6f 92       	push	r6
 ae6:	7f 92       	push	r7
 ae8:	8f 92       	push	r8
 aea:	9f 92       	push	r9
 aec:	af 92       	push	r10
 aee:	bf 92       	push	r11
 af0:	cf 92       	push	r12
 af2:	df 92       	push	r13
 af4:	ef 92       	push	r14
 af6:	ff 92       	push	r15
 af8:	0f 93       	push	r16
 afa:	1f 93       	push	r17
 afc:	cf 93       	push	r28
 afe:	df 93       	push	r29
 b00:	cd b7       	in	r28, 0x3d	; 61
 b02:	de b7       	in	r29, 0x3e	; 62
 b04:	ca 1b       	sub	r28, r26
 b06:	db 0b       	sbc	r29, r27
 b08:	0f b6       	in	r0, 0x3f	; 63
 b0a:	f8 94       	cli
 b0c:	de bf       	out	0x3e, r29	; 62
 b0e:	0f be       	out	0x3f, r0	; 63
 b10:	cd bf       	out	0x3d, r28	; 61
 b12:	09 94       	ijmp

00000b14 <__epilogue_restores__>:
 b14:	2a 88       	ldd	r2, Y+18	; 0x12
 b16:	39 88       	ldd	r3, Y+17	; 0x11
 b18:	48 88       	ldd	r4, Y+16	; 0x10
 b1a:	5f 84       	ldd	r5, Y+15	; 0x0f
 b1c:	6e 84       	ldd	r6, Y+14	; 0x0e
 b1e:	7d 84       	ldd	r7, Y+13	; 0x0d
 b20:	8c 84       	ldd	r8, Y+12	; 0x0c
 b22:	9b 84       	ldd	r9, Y+11	; 0x0b
 b24:	aa 84       	ldd	r10, Y+10	; 0x0a
 b26:	b9 84       	ldd	r11, Y+9	; 0x09
 b28:	c8 84       	ldd	r12, Y+8	; 0x08
 b2a:	df 80       	ldd	r13, Y+7	; 0x07
 b2c:	ee 80       	ldd	r14, Y+6	; 0x06
 b2e:	fd 80       	ldd	r15, Y+5	; 0x05
 b30:	0c 81       	ldd	r16, Y+4	; 0x04
 b32:	1b 81       	ldd	r17, Y+3	; 0x03
 b34:	aa 81       	ldd	r26, Y+2	; 0x02
 b36:	b9 81       	ldd	r27, Y+1	; 0x01
 b38:	ce 0f       	add	r28, r30
 b3a:	d1 1d       	adc	r29, r1
 b3c:	0f b6       	in	r0, 0x3f	; 63
 b3e:	f8 94       	cli
 b40:	de bf       	out	0x3e, r29	; 62
 b42:	0f be       	out	0x3f, r0	; 63
 b44:	cd bf       	out	0x3d, r28	; 61
 b46:	ed 01       	movw	r28, r26
 b48:	08 95       	ret

00000b4a <_exit>:
 b4a:	f8 94       	cli

00000b4c <__stop_program>:
 b4c:	ff cf       	rjmp	.-2      	; 0xb4c <__stop_program>
