
KeypadTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000003e2  00000456  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000490  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a97  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074c  00000000  00000000  00000f97  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004dc  00000000  00000000  000016e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000401  00000000  00000000  00001c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003d8  00000000  00000000  00002005  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000023dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ee       	ldi	r30, 0xE2	; 226
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  8e:	0c 94 ef 01 	jmp	0x3de	; 0x3de <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <led_test>:
    }
    return 0;
}

void led_test(){
    PORTB &= ~(1 << PB0);
  96:	85 b1       	in	r24, 0x05	; 5
  98:	8e 7f       	andi	r24, 0xFE	; 254
  9a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	2f e3       	ldi	r18, 0x3F	; 63
  9e:	8d e0       	ldi	r24, 0x0D	; 13
  a0:	93 e0       	ldi	r25, 0x03	; 3
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <led_test+0xc>
  aa:	00 c0       	rjmp	.+0      	; 0xac <led_test+0x16>
  ac:	00 00       	nop
    _delay_ms(1000);
    PORTB |= (1 << PB0);
  ae:	85 b1       	in	r24, 0x05	; 5
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	85 b9       	out	0x05, r24	; 5
  b4:	2f e3       	ldi	r18, 0x3F	; 63
  b6:	8d e0       	ldi	r24, 0x0D	; 13
  b8:	93 e0       	ldi	r25, 0x03	; 3
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <led_test+0x24>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <led_test+0x2e>
  c4:	00 00       	nop
    _delay_ms(1000);
    PORTB &= ~(1 << PB0);
  c6:	85 b1       	in	r24, 0x05	; 5
  c8:	8e 7f       	andi	r24, 0xFE	; 254
  ca:	85 b9       	out	0x05, r24	; 5
  cc:	2f e3       	ldi	r18, 0x3F	; 63
  ce:	8d e0       	ldi	r24, 0x0D	; 13
  d0:	93 e0       	ldi	r25, 0x03	; 3
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <led_test+0x3c>
  da:	00 c0       	rjmp	.+0      	; 0xdc <led_test+0x46>
  dc:	00 00       	nop
  de:	08 95       	ret

000000e0 <compare>:
    }
}

int compare(char *password, char *given_password){
    //printf("%s", given_password);
    if (strcmp(password, given_password) != 0) {
  e0:	0e 94 e6 01 	call	0x3cc	; 0x3cc <strcmp>
  e4:	89 2b       	or	r24, r25
  e6:	19 f0       	breq	.+6      	; 0xee <compare+0xe>
        // Wrong password
        led_test();
  e8:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
  ec:	0c c0       	rjmp	.+24     	; 0x106 <compare+0x26>
    } 
    else {
        // Correct password
        led_test();
  ee:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
        led_test();
  f2:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
        led_test();
  f6:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
        led_test();
  fa:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
        led_test();
  fe:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
        led_test();
 102:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
    }
    return 0;
}
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	08 95       	ret

0000010c <main>:
int compare(char *password, char *given_password);

int main(void)
{
    /********************testing****************************/
    DDRB |= (1 << PB0);
 10c:	84 b1       	in	r24, 0x04	; 4
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	84 b9       	out	0x04, r24	; 4
    DDRB |= (1 << PB1);
 112:	84 b1       	in	r24, 0x04	; 4
 114:	82 60       	ori	r24, 0x02	; 2
 116:	84 b9       	out	0x04, r24	; 4
    DDRB |= (1 << PB2);
 118:	84 b1       	in	r24, 0x04	; 4
 11a:	84 60       	ori	r24, 0x04	; 4
 11c:	84 b9       	out	0x04, r24	; 4
    DDRB |= (1 << PB3);
 11e:	84 b1       	in	r24, 0x04	; 4
 120:	88 60       	ori	r24, 0x08	; 8
 122:	84 b9       	out	0x04, r24	; 4
    char* password = "0123";
    char* given_password = "xxxx";
    int idx = 0;
    
    // Set digital pins 0-3 (rows) as output and 4-7 (columns) as input
    DDRD |= 0b00001111;
 124:	8a b1       	in	r24, 0x0a	; 10
 126:	8f 60       	ori	r24, 0x0F	; 15
 128:	8a b9       	out	0x0a, r24	; 10
 12a:	89 ef       	ldi	r24, 0xF9	; 249
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <main+0x22>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x28>
 134:	00 00       	nop
    _delay_ms(1);
    
    PORTD = 0b11110000;    // Power the row pins
 136:	80 ef       	ldi	r24, 0xF0	; 240
 138:	8b b9       	out	0x0b, r24	; 11
    stdin = &uart_input;*/
    /******************************************************/
    
    char* password = "0123";
    char* given_password = "xxxx";
    int idx = 0;
 13a:	c0 e0       	ldi	r28, 0x00	; 0
 13c:	d0 e0       	ldi	r29, 0x00	; 0
    int key_pressed = 0;
    
    while (1) 
    {
        
        if (PIND != 0b11110000) {     // If any of row pins goes low (!??)
 13e:	89 b1       	in	r24, 0x09	; 9
 140:	80 3f       	cpi	r24, 0xF0	; 240
 142:	e9 f3       	breq	.-6      	; 0x13e <main+0x32>
            key_pressed = PIND;
 144:	29 b1       	in	r18, 0x09	; 9
 146:	83 ec       	ldi	r24, 0xC3	; 195
 148:	99 e0       	ldi	r25, 0x09	; 9
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <main+0x3e>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0x44>
 150:	00 00       	nop
            _delay_ms(10);
            DDRD ^= 0b11111111;      // Make rows as inputs and columns as outputs
 152:	9a b1       	in	r25, 0x0a	; 10
 154:	90 95       	com	r25
 156:	9a b9       	out	0x0a, r25	; 10
 158:	89 ef       	ldi	r24, 0xF9	; 249
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <main+0x50>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x56>
 162:	00 00       	nop
            _delay_ms(1);
             PORTD ^= 0b11111111;        // Power the columns
 164:	9b b1       	in	r25, 0x0b	; 11
 166:	90 95       	com	r25
 168:	9b b9       	out	0x0b, r25	; 11
 16a:	87 ea       	ldi	r24, 0xA7	; 167
 16c:	91 e6       	ldi	r25, 0x61	; 97
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <main+0x62>
 172:	00 c0       	rjmp	.+0      	; 0x174 <main+0x68>
 174:	00 00       	nop
            _delay_ms(100);
            
            key_pressed |= PIND;    // The variable has now both row and column values as 0, others as 1
 176:	89 b1       	in	r24, 0x09	; 9
 178:	82 2b       	or	r24, r18
 17a:	90 e0       	ldi	r25, 0x00	; 0
            
            if (key_pressed == 0b01110111) {
 17c:	87 37       	cpi	r24, 0x77	; 119
 17e:	91 05       	cpc	r25, r1
 180:	79 f4       	brne	.+30     	; 0x1a0 <main+0x94>
                // Key 1 pressed
                //printf("1");
                given_password[idx] = '1';
 182:	81 e3       	ldi	r24, 0x31	; 49
 184:	fe 01       	movw	r30, r28
 186:	e0 50       	subi	r30, 0x00	; 0
 188:	ff 4f       	sbci	r31, 0xFF	; 255
 18a:	80 83       	st	Z, r24
                if (password[idx] == '1') {
 18c:	fe 01       	movw	r30, r28
 18e:	eb 5f       	subi	r30, 0xFB	; 251
 190:	fe 4f       	sbci	r31, 0xFE	; 254
 192:	80 81       	ld	r24, Z
 194:	81 33       	cpi	r24, 0x31	; 49
 196:	09 f0       	breq	.+2      	; 0x19a <main+0x8e>
 198:	05 c1       	rjmp	.+522    	; 0x3a4 <main+0x298>
                    led_test();
 19a:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
 19e:	02 c1       	rjmp	.+516    	; 0x3a4 <main+0x298>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b01111011) {
 1a0:	8b 37       	cpi	r24, 0x7B	; 123
 1a2:	91 05       	cpc	r25, r1
 1a4:	79 f4       	brne	.+30     	; 0x1c4 <main+0xb8>
                // Key 2 pressed
                given_password[idx] = '2';
 1a6:	82 e3       	ldi	r24, 0x32	; 50
 1a8:	fe 01       	movw	r30, r28
 1aa:	e0 50       	subi	r30, 0x00	; 0
 1ac:	ff 4f       	sbci	r31, 0xFF	; 255
 1ae:	80 83       	st	Z, r24
                if (password[idx] == '2') {
 1b0:	fe 01       	movw	r30, r28
 1b2:	eb 5f       	subi	r30, 0xFB	; 251
 1b4:	fe 4f       	sbci	r31, 0xFE	; 254
 1b6:	80 81       	ld	r24, Z
 1b8:	82 33       	cpi	r24, 0x32	; 50
 1ba:	09 f0       	breq	.+2      	; 0x1be <main+0xb2>
 1bc:	f3 c0       	rjmp	.+486    	; 0x3a4 <main+0x298>
                    led_test();
 1be:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
 1c2:	f0 c0       	rjmp	.+480    	; 0x3a4 <main+0x298>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b01111101) {
 1c4:	8d 37       	cpi	r24, 0x7D	; 125
 1c6:	91 05       	cpc	r25, r1
 1c8:	79 f4       	brne	.+30     	; 0x1e8 <main+0xdc>
                // Key 3 pressed
                given_password[idx] = '3';
 1ca:	83 e3       	ldi	r24, 0x33	; 51
 1cc:	fe 01       	movw	r30, r28
 1ce:	e0 50       	subi	r30, 0x00	; 0
 1d0:	ff 4f       	sbci	r31, 0xFF	; 255
 1d2:	80 83       	st	Z, r24
                if (password[idx] == '3') {
 1d4:	fe 01       	movw	r30, r28
 1d6:	eb 5f       	subi	r30, 0xFB	; 251
 1d8:	fe 4f       	sbci	r31, 0xFE	; 254
 1da:	80 81       	ld	r24, Z
 1dc:	83 33       	cpi	r24, 0x33	; 51
 1de:	09 f0       	breq	.+2      	; 0x1e2 <main+0xd6>
 1e0:	e1 c0       	rjmp	.+450    	; 0x3a4 <main+0x298>
                    led_test();
 1e2:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
 1e6:	de c0       	rjmp	.+444    	; 0x3a4 <main+0x298>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b01111110) {
 1e8:	8e 37       	cpi	r24, 0x7E	; 126
 1ea:	91 05       	cpc	r25, r1
 1ec:	79 f4       	brne	.+30     	; 0x20c <main+0x100>
                // A
                given_password[idx] = 'A';
 1ee:	81 e4       	ldi	r24, 0x41	; 65
 1f0:	fe 01       	movw	r30, r28
 1f2:	e0 50       	subi	r30, 0x00	; 0
 1f4:	ff 4f       	sbci	r31, 0xFF	; 255
 1f6:	80 83       	st	Z, r24
                if (password[idx] == 'A') {
 1f8:	fe 01       	movw	r30, r28
 1fa:	eb 5f       	subi	r30, 0xFB	; 251
 1fc:	fe 4f       	sbci	r31, 0xFE	; 254
 1fe:	80 81       	ld	r24, Z
 200:	81 34       	cpi	r24, 0x41	; 65
 202:	09 f0       	breq	.+2      	; 0x206 <main+0xfa>
 204:	cf c0       	rjmp	.+414    	; 0x3a4 <main+0x298>
                    led_test();
 206:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
 20a:	cc c0       	rjmp	.+408    	; 0x3a4 <main+0x298>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b10110111) {
 20c:	87 3b       	cpi	r24, 0xB7	; 183
 20e:	91 05       	cpc	r25, r1
 210:	79 f4       	brne	.+30     	; 0x230 <main+0x124>
                // 4
                given_password[idx] = '4';
 212:	84 e3       	ldi	r24, 0x34	; 52
 214:	fe 01       	movw	r30, r28
 216:	e0 50       	subi	r30, 0x00	; 0
 218:	ff 4f       	sbci	r31, 0xFF	; 255
 21a:	80 83       	st	Z, r24
                if (password[idx] == '4') {
 21c:	fe 01       	movw	r30, r28
 21e:	eb 5f       	subi	r30, 0xFB	; 251
 220:	fe 4f       	sbci	r31, 0xFE	; 254
 222:	80 81       	ld	r24, Z
 224:	84 33       	cpi	r24, 0x34	; 52
 226:	09 f0       	breq	.+2      	; 0x22a <main+0x11e>
 228:	bd c0       	rjmp	.+378    	; 0x3a4 <main+0x298>
                    led_test();
 22a:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
 22e:	ba c0       	rjmp	.+372    	; 0x3a4 <main+0x298>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b10111011) {
 230:	8b 3b       	cpi	r24, 0xBB	; 187
 232:	91 05       	cpc	r25, r1
 234:	79 f4       	brne	.+30     	; 0x254 <main+0x148>
                // 5
                given_password[idx] = '5';
 236:	85 e3       	ldi	r24, 0x35	; 53
 238:	fe 01       	movw	r30, r28
 23a:	e0 50       	subi	r30, 0x00	; 0
 23c:	ff 4f       	sbci	r31, 0xFF	; 255
 23e:	80 83       	st	Z, r24
                if (password[idx] == '5') {
 240:	fe 01       	movw	r30, r28
 242:	eb 5f       	subi	r30, 0xFB	; 251
 244:	fe 4f       	sbci	r31, 0xFE	; 254
 246:	80 81       	ld	r24, Z
 248:	85 33       	cpi	r24, 0x35	; 53
 24a:	09 f0       	breq	.+2      	; 0x24e <main+0x142>
 24c:	ab c0       	rjmp	.+342    	; 0x3a4 <main+0x298>
                    led_test();
 24e:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
 252:	a8 c0       	rjmp	.+336    	; 0x3a4 <main+0x298>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b10111101) {
 254:	8d 3b       	cpi	r24, 0xBD	; 189
 256:	91 05       	cpc	r25, r1
 258:	79 f4       	brne	.+30     	; 0x278 <main+0x16c>
                // 6
                given_password[idx] = '6';
 25a:	86 e3       	ldi	r24, 0x36	; 54
 25c:	fe 01       	movw	r30, r28
 25e:	e0 50       	subi	r30, 0x00	; 0
 260:	ff 4f       	sbci	r31, 0xFF	; 255
 262:	80 83       	st	Z, r24
                if (password[idx] == '6') {
 264:	fe 01       	movw	r30, r28
 266:	eb 5f       	subi	r30, 0xFB	; 251
 268:	fe 4f       	sbci	r31, 0xFE	; 254
 26a:	80 81       	ld	r24, Z
 26c:	86 33       	cpi	r24, 0x36	; 54
 26e:	09 f0       	breq	.+2      	; 0x272 <main+0x166>
 270:	99 c0       	rjmp	.+306    	; 0x3a4 <main+0x298>
                    led_test();
 272:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
 276:	96 c0       	rjmp	.+300    	; 0x3a4 <main+0x298>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b10111110) {
 278:	8e 3b       	cpi	r24, 0xBE	; 190
 27a:	91 05       	cpc	r25, r1
 27c:	79 f4       	brne	.+30     	; 0x29c <main+0x190>
                // B
                given_password[idx] = 'B';
 27e:	82 e4       	ldi	r24, 0x42	; 66
 280:	fe 01       	movw	r30, r28
 282:	e0 50       	subi	r30, 0x00	; 0
 284:	ff 4f       	sbci	r31, 0xFF	; 255
 286:	80 83       	st	Z, r24
                if (password[idx] == 'B') {
 288:	fe 01       	movw	r30, r28
 28a:	eb 5f       	subi	r30, 0xFB	; 251
 28c:	fe 4f       	sbci	r31, 0xFE	; 254
 28e:	80 81       	ld	r24, Z
 290:	82 34       	cpi	r24, 0x42	; 66
 292:	09 f0       	breq	.+2      	; 0x296 <main+0x18a>
 294:	87 c0       	rjmp	.+270    	; 0x3a4 <main+0x298>
                    led_test();
 296:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
 29a:	84 c0       	rjmp	.+264    	; 0x3a4 <main+0x298>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11010111) {
 29c:	87 3d       	cpi	r24, 0xD7	; 215
 29e:	91 05       	cpc	r25, r1
 2a0:	79 f4       	brne	.+30     	; 0x2c0 <main+0x1b4>
                // 7
                given_password[idx] = '7';
 2a2:	87 e3       	ldi	r24, 0x37	; 55
 2a4:	fe 01       	movw	r30, r28
 2a6:	e0 50       	subi	r30, 0x00	; 0
 2a8:	ff 4f       	sbci	r31, 0xFF	; 255
 2aa:	80 83       	st	Z, r24
                if (password[idx] == '7') {
 2ac:	fe 01       	movw	r30, r28
 2ae:	eb 5f       	subi	r30, 0xFB	; 251
 2b0:	fe 4f       	sbci	r31, 0xFE	; 254
 2b2:	80 81       	ld	r24, Z
 2b4:	87 33       	cpi	r24, 0x37	; 55
 2b6:	09 f0       	breq	.+2      	; 0x2ba <main+0x1ae>
 2b8:	75 c0       	rjmp	.+234    	; 0x3a4 <main+0x298>
                    led_test();
 2ba:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
 2be:	72 c0       	rjmp	.+228    	; 0x3a4 <main+0x298>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11011011) {
 2c0:	8b 3d       	cpi	r24, 0xDB	; 219
 2c2:	91 05       	cpc	r25, r1
 2c4:	79 f4       	brne	.+30     	; 0x2e4 <main+0x1d8>
                // 8
                given_password[idx] = '8';
 2c6:	88 e3       	ldi	r24, 0x38	; 56
 2c8:	fe 01       	movw	r30, r28
 2ca:	e0 50       	subi	r30, 0x00	; 0
 2cc:	ff 4f       	sbci	r31, 0xFF	; 255
 2ce:	80 83       	st	Z, r24
                if (password[idx] == '8') {
 2d0:	fe 01       	movw	r30, r28
 2d2:	eb 5f       	subi	r30, 0xFB	; 251
 2d4:	fe 4f       	sbci	r31, 0xFE	; 254
 2d6:	80 81       	ld	r24, Z
 2d8:	88 33       	cpi	r24, 0x38	; 56
 2da:	09 f0       	breq	.+2      	; 0x2de <main+0x1d2>
 2dc:	63 c0       	rjmp	.+198    	; 0x3a4 <main+0x298>
                    led_test();
 2de:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
 2e2:	60 c0       	rjmp	.+192    	; 0x3a4 <main+0x298>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11011101) {
 2e4:	8d 3d       	cpi	r24, 0xDD	; 221
 2e6:	91 05       	cpc	r25, r1
 2e8:	79 f4       	brne	.+30     	; 0x308 <main+0x1fc>
                // 9
                given_password[idx] = '9';
 2ea:	89 e3       	ldi	r24, 0x39	; 57
 2ec:	fe 01       	movw	r30, r28
 2ee:	e0 50       	subi	r30, 0x00	; 0
 2f0:	ff 4f       	sbci	r31, 0xFF	; 255
 2f2:	80 83       	st	Z, r24
                if (password[idx] == '9') {
 2f4:	fe 01       	movw	r30, r28
 2f6:	eb 5f       	subi	r30, 0xFB	; 251
 2f8:	fe 4f       	sbci	r31, 0xFE	; 254
 2fa:	80 81       	ld	r24, Z
 2fc:	89 33       	cpi	r24, 0x39	; 57
 2fe:	09 f0       	breq	.+2      	; 0x302 <main+0x1f6>
 300:	51 c0       	rjmp	.+162    	; 0x3a4 <main+0x298>
                    led_test();
 302:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
 306:	4e c0       	rjmp	.+156    	; 0x3a4 <main+0x298>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11011110) {
 308:	8e 3d       	cpi	r24, 0xDE	; 222
 30a:	91 05       	cpc	r25, r1
 30c:	79 f4       	brne	.+30     	; 0x32c <main+0x220>
                // C
                given_password[idx] = 'C';
 30e:	83 e4       	ldi	r24, 0x43	; 67
 310:	fe 01       	movw	r30, r28
 312:	e0 50       	subi	r30, 0x00	; 0
 314:	ff 4f       	sbci	r31, 0xFF	; 255
 316:	80 83       	st	Z, r24
                if (password[idx] == 'C') {
 318:	fe 01       	movw	r30, r28
 31a:	eb 5f       	subi	r30, 0xFB	; 251
 31c:	fe 4f       	sbci	r31, 0xFE	; 254
 31e:	80 81       	ld	r24, Z
 320:	83 34       	cpi	r24, 0x43	; 67
 322:	09 f0       	breq	.+2      	; 0x326 <main+0x21a>
 324:	3f c0       	rjmp	.+126    	; 0x3a4 <main+0x298>
                    led_test();
 326:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
 32a:	3c c0       	rjmp	.+120    	; 0x3a4 <main+0x298>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11100111) {
 32c:	87 3e       	cpi	r24, 0xE7	; 231
 32e:	91 05       	cpc	r25, r1
 330:	71 f4       	brne	.+28     	; 0x34e <main+0x242>
                // *
                // TODO: make this the backspace button
                given_password[idx] = '*';
 332:	8a e2       	ldi	r24, 0x2A	; 42
 334:	fe 01       	movw	r30, r28
 336:	e0 50       	subi	r30, 0x00	; 0
 338:	ff 4f       	sbci	r31, 0xFF	; 255
 33a:	80 83       	st	Z, r24
                if (password[idx] == '*') {
 33c:	fe 01       	movw	r30, r28
 33e:	eb 5f       	subi	r30, 0xFB	; 251
 340:	fe 4f       	sbci	r31, 0xFE	; 254
 342:	80 81       	ld	r24, Z
 344:	8a 32       	cpi	r24, 0x2A	; 42
 346:	71 f5       	brne	.+92     	; 0x3a4 <main+0x298>
                    led_test();
 348:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
 34c:	2b c0       	rjmp	.+86     	; 0x3a4 <main+0x298>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11101011) {
 34e:	8b 3e       	cpi	r24, 0xEB	; 235
 350:	91 05       	cpc	r25, r1
 352:	71 f4       	brne	.+28     	; 0x370 <main+0x264>
                // 0
                given_password[idx] = '0';
 354:	80 e3       	ldi	r24, 0x30	; 48
 356:	fe 01       	movw	r30, r28
 358:	e0 50       	subi	r30, 0x00	; 0
 35a:	ff 4f       	sbci	r31, 0xFF	; 255
 35c:	80 83       	st	Z, r24
                if (password[idx] == '0') {
 35e:	fe 01       	movw	r30, r28
 360:	eb 5f       	subi	r30, 0xFB	; 251
 362:	fe 4f       	sbci	r31, 0xFE	; 254
 364:	80 81       	ld	r24, Z
 366:	80 33       	cpi	r24, 0x30	; 48
 368:	e9 f4       	brne	.+58     	; 0x3a4 <main+0x298>
                    led_test();
 36a:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
 36e:	1a c0       	rjmp	.+52     	; 0x3a4 <main+0x298>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11101101) {
 370:	8d 3e       	cpi	r24, 0xED	; 237
 372:	91 05       	cpc	r25, r1
 374:	39 f4       	brne	.+14     	; 0x384 <main+0x278>
                // #
                compare(password, given_password);
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	71 e0       	ldi	r23, 0x01	; 1
 37a:	85 e0       	ldi	r24, 0x05	; 5
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	0e 94 70 00 	call	0xe0	; 0xe0 <compare>
 382:	10 c0       	rjmp	.+32     	; 0x3a4 <main+0x298>
                //printf("#");
                //given_password[idx] = '#';
                //led_test();
            }
            else if (key_pressed == 0b11101110) {
 384:	8e 3e       	cpi	r24, 0xEE	; 238
 386:	91 05       	cpc	r25, r1
 388:	69 f4       	brne	.+26     	; 0x3a4 <main+0x298>
                // D
                given_password[idx] = 'D';
 38a:	84 e4       	ldi	r24, 0x44	; 68
 38c:	fe 01       	movw	r30, r28
 38e:	e0 50       	subi	r30, 0x00	; 0
 390:	ff 4f       	sbci	r31, 0xFF	; 255
 392:	80 83       	st	Z, r24
                if (password[idx] == 'D') {
 394:	fe 01       	movw	r30, r28
 396:	eb 5f       	subi	r30, 0xFB	; 251
 398:	fe 4f       	sbci	r31, 0xFE	; 254
 39a:	80 81       	ld	r24, Z
 39c:	84 34       	cpi	r24, 0x44	; 68
 39e:	11 f4       	brne	.+4      	; 0x3a4 <main+0x298>
                    led_test();
 3a0:	0e 94 4b 00 	call	0x96	; 0x96 <led_test>
                    _delay_ms(5);
                    //wait
                }
            }*/
            
            DDRD ^= 0b11111111;
 3a4:	8a b1       	in	r24, 0x0a	; 10
 3a6:	80 95       	com	r24
 3a8:	8a b9       	out	0x0a, r24	; 10
 3aa:	89 ef       	ldi	r24, 0xF9	; 249
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <main+0x2a2>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <main+0x2a8>
 3b4:	00 00       	nop
            _delay_ms(1);
            PORTD ^= 0b11111111;
 3b6:	8b b1       	in	r24, 0x0b	; 11
 3b8:	80 95       	com	r24
 3ba:	8b b9       	out	0x0b, r24	; 11
            key_pressed = 0;
            idx +=1;
 3bc:	21 96       	adiw	r28, 0x01	; 1
 3be:	83 ec       	ldi	r24, 0xC3	; 195
 3c0:	99 e0       	ldi	r25, 0x09	; 9
 3c2:	01 97       	sbiw	r24, 0x01	; 1
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <main+0x2b6>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <main+0x2bc>
 3c8:	00 00       	nop
 3ca:	b9 ce       	rjmp	.-654    	; 0x13e <main+0x32>

000003cc <strcmp>:
 3cc:	fb 01       	movw	r30, r22
 3ce:	dc 01       	movw	r26, r24
 3d0:	8d 91       	ld	r24, X+
 3d2:	01 90       	ld	r0, Z+
 3d4:	80 19       	sub	r24, r0
 3d6:	01 10       	cpse	r0, r1
 3d8:	d9 f3       	breq	.-10     	; 0x3d0 <strcmp+0x4>
 3da:	99 0b       	sbc	r25, r25
 3dc:	08 95       	ret

000003de <_exit>:
 3de:	f8 94       	cli

000003e0 <__stop_program>:
 3e0:	ff cf       	rjmp	.-2      	; 0x3e0 <__stop_program>
