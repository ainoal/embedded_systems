
KeypadTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000094  00800100  00000b48  00000bdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800194  00800194  00000c70  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ccc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dca  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087b  00000000  00000000  00001b36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000699  00000000  00000000  000023b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00002a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a3  00000000  00000000  00002ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004c6  00000000  00000000  00002f87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000344d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e4       	ldi	r30, 0x48	; 72
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 39       	cpi	r26, 0x94	; 148
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e9       	ldi	r26, 0x94	; 148
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 39       	cpi	r26, 0x9A	; 154
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 90 00 	call	0x120	; 0x120 <main>
  9e:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <led_test>:

#define BITMASK_D 0b11000000
#define BITMASK_B 0b00111111

void led_test(void){
    PORTD &= ~(1 << PD3);
  a6:	8b b1       	in	r24, 0x0b	; 11
  a8:	87 7f       	andi	r24, 0xF7	; 247
  aa:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	83 ed       	ldi	r24, 0xD3	; 211
  b0:	90 e3       	ldi	r25, 0x30	; 48
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <led_test+0xc>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <led_test+0x16>
  bc:	00 00       	nop
    _delay_ms(1000);
    PORTD |= (1 << PD3);
  be:	8b b1       	in	r24, 0x0b	; 11
  c0:	88 60       	ori	r24, 0x08	; 8
  c2:	8b b9       	out	0x0b, r24	; 11
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	83 ed       	ldi	r24, 0xD3	; 211
  c8:	90 e3       	ldi	r25, 0x30	; 48
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <led_test+0x24>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <led_test+0x2e>
  d4:	00 00       	nop
    _delay_ms(1000);
    PORTD &= ~(1 << PD3);
  d6:	8b b1       	in	r24, 0x0b	; 11
  d8:	87 7f       	andi	r24, 0xF7	; 247
  da:	8b b9       	out	0x0b, r24	; 11
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	83 ed       	ldi	r24, 0xD3	; 211
  e0:	90 e3       	ldi	r25, 0x30	; 48
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <led_test+0x3c>
  ea:	00 c0       	rjmp	.+0      	; 0xec <led_test+0x46>
  ec:	00 00       	nop
  ee:	08 95       	ret

000000f0 <compare>:
    _delay_ms(1000);
}

int compare(char *password, char *given_password){
    if (strcmp(password, given_password) != 0) {
  f0:	0e 94 bb 02 	call	0x576	; 0x576 <strcmp>
  f4:	89 2b       	or	r24, r25
  f6:	89 f0       	breq	.+34     	; 0x11a <compare+0x2a>
        led_test();
  f8:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
 104:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
 108:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
 10c:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        led_test();
 110:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
        return 0;
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	08 95       	ret
    }
    else {
        return 1;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
    }
}
 11e:	08 95       	ret

00000120 <main>:

int main(void)
{
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	6c 97       	sbiw	r28, 0x1c	; 28
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	f8 94       	cli
 12e:	de bf       	out	0x3e, r29	; 62
 130:	0f be       	out	0x3f, r0	; 63
 132:	cd bf       	out	0x3d, r28	; 61
    /********************testing****************************/
    
    char input;
    FILE uart_output = FDEV_SETUP_STREAM(USART_transmit, NULL, _FDEV_SETUP_WRITE);
 134:	8e e0       	ldi	r24, 0x0E	; 14
 136:	9e 01       	movw	r18, r28
 138:	2f 5f       	subi	r18, 0xFF	; 255
 13a:	3f 4f       	sbci	r19, 0xFF	; 255
 13c:	79 01       	movw	r14, r18
 13e:	f9 01       	movw	r30, r18
 140:	28 2f       	mov	r18, r24
 142:	11 92       	st	Z+, r1
 144:	2a 95       	dec	r18
 146:	e9 f7       	brne	.-6      	; 0x142 <main+0x22>
 148:	92 e0       	ldi	r25, 0x02	; 2
 14a:	9c 83       	std	Y+4, r25	; 0x04
 14c:	2d ea       	ldi	r18, 0xAD	; 173
 14e:	32 e0       	ldi	r19, 0x02	; 2
 150:	3a 87       	std	Y+10, r19	; 0x0a
 152:	29 87       	std	Y+9, r18	; 0x09
    FILE uart_input = FDEV_SETUP_STREAM(NULL, USART_receive, _FDEV_SETUP_READ);
 154:	8e 01       	movw	r16, r28
 156:	01 5f       	subi	r16, 0xF1	; 241
 158:	1f 4f       	sbci	r17, 0xFF	; 255
 15a:	f8 01       	movw	r30, r16
 15c:	11 92       	st	Z+, r1
 15e:	8a 95       	dec	r24
 160:	e9 f7       	brne	.-6      	; 0x15c <main+0x3c>
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	8a 8b       	std	Y+18, r24	; 0x12
 166:	84 eb       	ldi	r24, 0xB4	; 180
 168:	92 e0       	ldi	r25, 0x02	; 2
 16a:	9a 8f       	std	Y+26, r25	; 0x1a
 16c:	89 8f       	std	Y+25, r24	; 0x19
        
    USART_init(UBRR);
 16e:	87 e6       	ldi	r24, 0x67	; 103
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 a2 02 	call	0x544	; 0x544 <USART_init>
        
    stdout = &uart_output;
 176:	e4 e9       	ldi	r30, 0x94	; 148
 178:	f1 e0       	ldi	r31, 0x01	; 1
 17a:	f3 82       	std	Z+3, r15	; 0x03
 17c:	e2 82       	std	Z+2, r14	; 0x02
    stdin = &uart_input;
 17e:	11 83       	std	Z+1, r17	; 0x01
 180:	00 83       	st	Z, r16
    char* password = "0123";
    char* given_password = "xxxx";
    int idx = 0;
    
    // Set digital pins 6-9 (rows) as input and 10-13 (columns) as output
    DDRD &= 0b00111111;
 182:	8a b1       	in	r24, 0x0a	; 10
 184:	8f 73       	andi	r24, 0x3F	; 63
 186:	8a b9       	out	0x0a, r24	; 10
    DDRB &= 0b11111100;
 188:	84 b1       	in	r24, 0x04	; 4
 18a:	8c 7f       	andi	r24, 0xFC	; 252
 18c:	84 b9       	out	0x04, r24	; 4
    DDRB |= 0b00111100;
 18e:	84 b1       	in	r24, 0x04	; 4
 190:	8c 63       	ori	r24, 0x3C	; 60
 192:	84 b9       	out	0x04, r24	; 4
 194:	8f e3       	ldi	r24, 0x3F	; 63
 196:	9c e9       	ldi	r25, 0x9C	; 156
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <main+0x78>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x7e>
 19e:	00 00       	nop
    _delay_ms(10);
    
    // Power the row pins
    PORTD |= 0b11000000;
 1a0:	8b b1       	in	r24, 0x0b	; 11
 1a2:	80 6c       	ori	r24, 0xC0	; 192
 1a4:	8b b9       	out	0x0b, r24	; 11
    PORTB |= 0b00000011;
 1a6:	85 b1       	in	r24, 0x05	; 5
 1a8:	83 60       	ori	r24, 0x03	; 3
 1aa:	85 b9       	out	0x05, r24	; 5
 1ac:	ef e3       	ldi	r30, 0x3F	; 63
 1ae:	fc e9       	ldi	r31, 0x9C	; 156
 1b0:	31 97       	sbiw	r30, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <main+0x90>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0x96>
 1b6:	00 00       	nop
    stdin = &uart_input;
    /******************************************************/
    
    char* password = "0123";
    char* given_password = "xxxx";
    int idx = 0;
 1b8:	c1 2c       	mov	r12, r1
 1ba:	d1 2c       	mov	r13, r1
 1bc:	ff ef       	ldi	r31, 0xFF	; 255
 1be:	21 ee       	ldi	r18, 0xE1	; 225
 1c0:	34 e0       	ldi	r19, 0x04	; 4
 1c2:	f1 50       	subi	r31, 0x01	; 1
 1c4:	20 40       	sbci	r18, 0x00	; 0
 1c6:	30 40       	sbci	r19, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <main+0xa2>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <main+0xac>
 1cc:	00 00       	nop
    uint8_t portd_vals;
    
    while (1) 
    { 
        _delay_ms(100);
        portd_vals = ((PIND & BITMASK_D) >> 6);
 1ce:	e9 b0       	in	r14, 0x09	; 9
 1d0:	e6 94       	lsr	r14
 1d2:	e6 94       	lsr	r14
 1d4:	e6 94       	lsr	r14
 1d6:	e6 94       	lsr	r14
 1d8:	e6 94       	lsr	r14
 1da:	e6 94       	lsr	r14
        portb_vals = ((PINB & BITMASK_B) << 2);
 1dc:	03 b1       	in	r16, 0x03	; 3
 1de:	10 e0       	ldi	r17, 0x00	; 0
 1e0:	00 0f       	add	r16, r16
 1e2:	11 1f       	adc	r17, r17
 1e4:	00 0f       	add	r16, r16
 1e6:	11 1f       	adc	r17, r17
        keypad_vals = portd_vals | portb_vals;
 1e8:	fe 2c       	mov	r15, r14
 1ea:	f0 2a       	or	r15, r16
        
        printf("Keypad_vals %d", keypad_vals);
 1ec:	1f 92       	push	r1
 1ee:	ff 92       	push	r15
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	91 e0       	ldi	r25, 0x01	; 1
 1f4:	9f 93       	push	r25
 1f6:	8f 93       	push	r24
 1f8:	0e 94 c4 02 	call	0x588	; 0x588 <printf>
        keypad_vals &= 0b00001111;
 1fc:	8f 2d       	mov	r24, r15
 1fe:	8f 70       	andi	r24, 0x0F	; 15
 200:	f8 2e       	mov	r15, r24
        printf("kp_vals: %d  portd_vals: %d  portb_vals: %d  PINB: %d\n\r", keypad_vals, portd_vals, portb_vals, PINB);
 202:	83 b1       	in	r24, 0x03	; 3
 204:	b1 2c       	mov	r11, r1
 206:	1f 92       	push	r1
 208:	8f 93       	push	r24
 20a:	11 27       	eor	r17, r17
 20c:	1f 93       	push	r17
 20e:	0f 93       	push	r16
 210:	1f 92       	push	r1
 212:	ef 92       	push	r14
 214:	1f 92       	push	r1
 216:	ff 92       	push	r15
 218:	8f e0       	ldi	r24, 0x0F	; 15
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	9f 93       	push	r25
 21e:	8f 93       	push	r24
 220:	0e 94 c4 02 	call	0x588	; 0x588 <printf>
        if (keypad_vals != 0b00001111) {     // If any of column pins goes high
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	f8 94       	cli
 228:	de bf       	out	0x3e, r29	; 62
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	cd bf       	out	0x3d, r28	; 61
 22e:	ff e0       	ldi	r31, 0x0F	; 15
 230:	ff 16       	cp	r15, r31
 232:	21 f2       	breq	.-120    	; 0x1bc <main+0x9c>
            printf("loop\n\r");
 234:	87 e4       	ldi	r24, 0x47	; 71
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	9f 93       	push	r25
 23a:	8f 93       	push	r24
 23c:	0e 94 c4 02 	call	0x588	; 0x588 <printf>
 240:	8f e3       	ldi	r24, 0x3F	; 63
 242:	9c e9       	ldi	r25, 0x9C	; 156
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <main+0x124>
 248:	00 c0       	rjmp	.+0      	; 0x24a <main+0x12a>
 24a:	00 00       	nop
            _delay_ms(10);
    
            // Power the column pins
            PORTB |= 0b00111100;
            _delay_ms(10);*/
            DDRD ^= 0b00000011;
 24c:	9a b1       	in	r25, 0x0a	; 10
 24e:	83 e0       	ldi	r24, 0x03	; 3
 250:	98 27       	eor	r25, r24
 252:	9a b9       	out	0x0a, r25	; 10
            DDRB ^= 0b11111111;
 254:	94 b1       	in	r25, 0x04	; 4
 256:	90 95       	com	r25
 258:	94 b9       	out	0x04, r25	; 4
            PORTD ^= 0b00000011;
 25a:	9b b1       	in	r25, 0x0b	; 11
 25c:	89 27       	eor	r24, r25
 25e:	8b b9       	out	0x0b, r24	; 11
            PORTB ^= 0b11111111;
 260:	85 b1       	in	r24, 0x05	; 5
 262:	80 95       	com	r24
 264:	85 b9       	out	0x05, r24	; 5
 266:	9f ef       	ldi	r25, 0xFF	; 255
 268:	e1 ee       	ldi	r30, 0xE1	; 225
 26a:	f4 e0       	ldi	r31, 0x04	; 4
 26c:	91 50       	subi	r25, 0x01	; 1
 26e:	e0 40       	sbci	r30, 0x00	; 0
 270:	f0 40       	sbci	r31, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <main+0x14c>
 274:	00 c0       	rjmp	.+0      	; 0x276 <main+0x156>
 276:	00 00       	nop
            _delay_ms(100);
            
            portd_vals = ((PIND & BITMASK_D) >> 6);
 278:	89 b1       	in	r24, 0x09	; 9
 27a:	82 95       	swap	r24
 27c:	86 95       	lsr	r24
 27e:	86 95       	lsr	r24
 280:	83 70       	andi	r24, 0x03	; 3
            portb_vals = ((PINB & BITMASK_B) << 2);
 282:	03 b1       	in	r16, 0x03	; 3
 284:	10 e0       	ldi	r17, 0x00	; 0
 286:	00 0f       	add	r16, r16
 288:	11 1f       	adc	r17, r17
 28a:	00 0f       	add	r16, r16
 28c:	11 1f       	adc	r17, r17
            printf("portb_vals %d   portd_vals %d ", portb_vals, portd_vals);
 28e:	1f 92       	push	r1
 290:	8f 93       	push	r24
 292:	c8 01       	movw	r24, r16
 294:	99 27       	eor	r25, r25
 296:	9f 93       	push	r25
 298:	8f 93       	push	r24
 29a:	8e e4       	ldi	r24, 0x4E	; 78
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	9f 93       	push	r25
 2a0:	8f 93       	push	r24
 2a2:	0e 94 c4 02 	call	0x588	; 0x588 <printf>
 2a6:	8f e3       	ldi	r24, 0x3F	; 63
 2a8:	9c e9       	ldi	r25, 0x9C	; 156
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <main+0x18a>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <main+0x190>
 2b0:	00 00       	nop
            
            _delay_ms(10);
            keypad_vals = portd_vals | portb_vals;
            keypad_vals &= 0b11110000;
 2b2:	00 7f       	andi	r16, 0xF0	; 240
            
            printf("PINB %d   ", PINB);
 2b4:	83 b1       	in	r24, 0x03	; 3
 2b6:	1f 92       	push	r1
 2b8:	8f 93       	push	r24
 2ba:	8d e6       	ldi	r24, 0x6D	; 109
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	9f 93       	push	r25
 2c0:	8f 93       	push	r24
 2c2:	0e 94 c4 02 	call	0x588	; 0x588 <printf>
            printf("Key pressed %d   ", key_pressed);
 2c6:	bf 92       	push	r11
 2c8:	ff 92       	push	r15
 2ca:	88 e7       	ldi	r24, 0x78	; 120
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	9f 93       	push	r25
 2d0:	8f 93       	push	r24
 2d2:	0e 94 c4 02 	call	0x588	; 0x588 <printf>
 2d6:	ef e3       	ldi	r30, 0x3F	; 63
 2d8:	fc e9       	ldi	r31, 0x9C	; 156
 2da:	31 97       	sbiw	r30, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <main+0x1ba>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <main+0x1c0>
 2e0:	00 00       	nop
            _delay_ms(10);
            key_pressed |= keypad_vals;    // The variable has now both row and column values
 2e2:	0f 29       	or	r16, r15
            printf("%d\n\r", key_pressed);
 2e4:	1f 92       	push	r1
 2e6:	0f 93       	push	r16
 2e8:	82 e4       	ldi	r24, 0x42	; 66
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	9f 93       	push	r25
 2ee:	8f 93       	push	r24
 2f0:	0e 94 c4 02 	call	0x588	; 0x588 <printf>
            
            if (key_pressed == 0b01110111) {
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	f8 94       	cli
 2f8:	de bf       	out	0x3e, r29	; 62
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	cd bf       	out	0x3d, r28	; 61
 2fe:	07 37       	cpi	r16, 0x77	; 119
 300:	79 f4       	brne	.+30     	; 0x320 <main+0x200>
                // Key 1 pressed
                given_password[idx] = '1';
 302:	81 e3       	ldi	r24, 0x31	; 49
 304:	f6 01       	movw	r30, r12
 306:	e6 57       	subi	r30, 0x76	; 118
 308:	fe 4f       	sbci	r31, 0xFE	; 254
 30a:	80 83       	st	Z, r24
                if (password[idx] == '1') {
 30c:	f6 01       	movw	r30, r12
 30e:	e1 57       	subi	r30, 0x71	; 113
 310:	fe 4f       	sbci	r31, 0xFE	; 254
 312:	80 81       	ld	r24, Z
 314:	81 33       	cpi	r24, 0x31	; 49
 316:	09 f0       	breq	.+2      	; 0x31a <main+0x1fa>
 318:	f5 c0       	rjmp	.+490    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
                    led_test();
 31a:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 31e:	f2 c0       	rjmp	.+484    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b01111011) {
 320:	0b 37       	cpi	r16, 0x7B	; 123
 322:	79 f4       	brne	.+30     	; 0x342 <main+0x222>
                // Key 2 pressed
                given_password[idx] = '2';
 324:	82 e3       	ldi	r24, 0x32	; 50
 326:	f6 01       	movw	r30, r12
 328:	e6 57       	subi	r30, 0x76	; 118
 32a:	fe 4f       	sbci	r31, 0xFE	; 254
 32c:	80 83       	st	Z, r24
                if (password[idx] == '2') {
 32e:	f6 01       	movw	r30, r12
 330:	e1 57       	subi	r30, 0x71	; 113
 332:	fe 4f       	sbci	r31, 0xFE	; 254
 334:	80 81       	ld	r24, Z
 336:	82 33       	cpi	r24, 0x32	; 50
 338:	09 f0       	breq	.+2      	; 0x33c <main+0x21c>
 33a:	e4 c0       	rjmp	.+456    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
                    led_test();
 33c:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 340:	e1 c0       	rjmp	.+450    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b01111101) {
 342:	0d 37       	cpi	r16, 0x7D	; 125
 344:	79 f4       	brne	.+30     	; 0x364 <main+0x244>
                // Key 3 pressed
                given_password[idx] = '3';
 346:	83 e3       	ldi	r24, 0x33	; 51
 348:	f6 01       	movw	r30, r12
 34a:	e6 57       	subi	r30, 0x76	; 118
 34c:	fe 4f       	sbci	r31, 0xFE	; 254
 34e:	80 83       	st	Z, r24
                if (password[idx] == '3') {
 350:	f6 01       	movw	r30, r12
 352:	e1 57       	subi	r30, 0x71	; 113
 354:	fe 4f       	sbci	r31, 0xFE	; 254
 356:	80 81       	ld	r24, Z
 358:	83 33       	cpi	r24, 0x33	; 51
 35a:	09 f0       	breq	.+2      	; 0x35e <main+0x23e>
 35c:	d3 c0       	rjmp	.+422    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
                    led_test();
 35e:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 362:	d0 c0       	rjmp	.+416    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b01111110) {
 364:	0e 37       	cpi	r16, 0x7E	; 126
 366:	79 f4       	brne	.+30     	; 0x386 <main+0x266>
                // A
                given_password[idx] = 'A';
 368:	81 e4       	ldi	r24, 0x41	; 65
 36a:	f6 01       	movw	r30, r12
 36c:	e6 57       	subi	r30, 0x76	; 118
 36e:	fe 4f       	sbci	r31, 0xFE	; 254
 370:	80 83       	st	Z, r24
                if (password[idx] == 'A') {
 372:	f6 01       	movw	r30, r12
 374:	e1 57       	subi	r30, 0x71	; 113
 376:	fe 4f       	sbci	r31, 0xFE	; 254
 378:	80 81       	ld	r24, Z
 37a:	81 34       	cpi	r24, 0x41	; 65
 37c:	09 f0       	breq	.+2      	; 0x380 <main+0x260>
 37e:	c2 c0       	rjmp	.+388    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
                    led_test();
 380:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 384:	bf c0       	rjmp	.+382    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b10110111) {
 386:	07 3b       	cpi	r16, 0xB7	; 183
 388:	79 f4       	brne	.+30     	; 0x3a8 <main+0x288>
                // 4
                given_password[idx] = '4';
 38a:	84 e3       	ldi	r24, 0x34	; 52
 38c:	f6 01       	movw	r30, r12
 38e:	e6 57       	subi	r30, 0x76	; 118
 390:	fe 4f       	sbci	r31, 0xFE	; 254
 392:	80 83       	st	Z, r24
                if (password[idx] == '4') {
 394:	f6 01       	movw	r30, r12
 396:	e1 57       	subi	r30, 0x71	; 113
 398:	fe 4f       	sbci	r31, 0xFE	; 254
 39a:	80 81       	ld	r24, Z
 39c:	84 33       	cpi	r24, 0x34	; 52
 39e:	09 f0       	breq	.+2      	; 0x3a2 <main+0x282>
 3a0:	b1 c0       	rjmp	.+354    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
                    led_test();
 3a2:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 3a6:	ae c0       	rjmp	.+348    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b10111011) {
 3a8:	0b 3b       	cpi	r16, 0xBB	; 187
 3aa:	79 f4       	brne	.+30     	; 0x3ca <main+0x2aa>
                // 5
                given_password[idx] = '5';
 3ac:	85 e3       	ldi	r24, 0x35	; 53
 3ae:	f6 01       	movw	r30, r12
 3b0:	e6 57       	subi	r30, 0x76	; 118
 3b2:	fe 4f       	sbci	r31, 0xFE	; 254
 3b4:	80 83       	st	Z, r24
                if (password[idx] == '5') {
 3b6:	f6 01       	movw	r30, r12
 3b8:	e1 57       	subi	r30, 0x71	; 113
 3ba:	fe 4f       	sbci	r31, 0xFE	; 254
 3bc:	80 81       	ld	r24, Z
 3be:	85 33       	cpi	r24, 0x35	; 53
 3c0:	09 f0       	breq	.+2      	; 0x3c4 <main+0x2a4>
 3c2:	a0 c0       	rjmp	.+320    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
                    led_test();
 3c4:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 3c8:	9d c0       	rjmp	.+314    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b10111101) {
 3ca:	0d 3b       	cpi	r16, 0xBD	; 189
 3cc:	79 f4       	brne	.+30     	; 0x3ec <main+0x2cc>
                // 6
                given_password[idx] = '6';
 3ce:	86 e3       	ldi	r24, 0x36	; 54
 3d0:	f6 01       	movw	r30, r12
 3d2:	e6 57       	subi	r30, 0x76	; 118
 3d4:	fe 4f       	sbci	r31, 0xFE	; 254
 3d6:	80 83       	st	Z, r24
                if (password[idx] == '6') {
 3d8:	f6 01       	movw	r30, r12
 3da:	e1 57       	subi	r30, 0x71	; 113
 3dc:	fe 4f       	sbci	r31, 0xFE	; 254
 3de:	80 81       	ld	r24, Z
 3e0:	86 33       	cpi	r24, 0x36	; 54
 3e2:	09 f0       	breq	.+2      	; 0x3e6 <main+0x2c6>
 3e4:	8f c0       	rjmp	.+286    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
                    led_test();
 3e6:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 3ea:	8c c0       	rjmp	.+280    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b10111110) {
 3ec:	0e 3b       	cpi	r16, 0xBE	; 190
 3ee:	79 f4       	brne	.+30     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
                // B
                given_password[idx] = 'B';
 3f0:	82 e4       	ldi	r24, 0x42	; 66
 3f2:	f6 01       	movw	r30, r12
 3f4:	e6 57       	subi	r30, 0x76	; 118
 3f6:	fe 4f       	sbci	r31, 0xFE	; 254
 3f8:	80 83       	st	Z, r24
                if (password[idx] == 'B') {
 3fa:	f6 01       	movw	r30, r12
 3fc:	e1 57       	subi	r30, 0x71	; 113
 3fe:	fe 4f       	sbci	r31, 0xFE	; 254
 400:	80 81       	ld	r24, Z
 402:	82 34       	cpi	r24, 0x42	; 66
 404:	09 f0       	breq	.+2      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 406:	7e c0       	rjmp	.+252    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
                    led_test();
 408:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 40c:	7b c0       	rjmp	.+246    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11010111) {
 40e:	07 3d       	cpi	r16, 0xD7	; 215
 410:	79 f4       	brne	.+30     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
                // 7
                given_password[idx] = '7';
 412:	87 e3       	ldi	r24, 0x37	; 55
 414:	f6 01       	movw	r30, r12
 416:	e6 57       	subi	r30, 0x76	; 118
 418:	fe 4f       	sbci	r31, 0xFE	; 254
 41a:	80 83       	st	Z, r24
                if (password[idx] == '7') {
 41c:	f6 01       	movw	r30, r12
 41e:	e1 57       	subi	r30, 0x71	; 113
 420:	fe 4f       	sbci	r31, 0xFE	; 254
 422:	80 81       	ld	r24, Z
 424:	87 33       	cpi	r24, 0x37	; 55
 426:	09 f0       	breq	.+2      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 428:	6d c0       	rjmp	.+218    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
                    led_test();
 42a:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 42e:	6a c0       	rjmp	.+212    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11011011) {
 430:	0b 3d       	cpi	r16, 0xDB	; 219
 432:	79 f4       	brne	.+30     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
                // 8
                given_password[idx] = '8';
 434:	88 e3       	ldi	r24, 0x38	; 56
 436:	f6 01       	movw	r30, r12
 438:	e6 57       	subi	r30, 0x76	; 118
 43a:	fe 4f       	sbci	r31, 0xFE	; 254
 43c:	80 83       	st	Z, r24
                if (password[idx] == '8') {
 43e:	f6 01       	movw	r30, r12
 440:	e1 57       	subi	r30, 0x71	; 113
 442:	fe 4f       	sbci	r31, 0xFE	; 254
 444:	80 81       	ld	r24, Z
 446:	88 33       	cpi	r24, 0x38	; 56
 448:	09 f0       	breq	.+2      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 44a:	5c c0       	rjmp	.+184    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
                    led_test();
 44c:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 450:	59 c0       	rjmp	.+178    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11011101) {
 452:	0d 3d       	cpi	r16, 0xDD	; 221
 454:	79 f4       	brne	.+30     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
                // 9
                given_password[idx] = '9';
 456:	89 e3       	ldi	r24, 0x39	; 57
 458:	f6 01       	movw	r30, r12
 45a:	e6 57       	subi	r30, 0x76	; 118
 45c:	fe 4f       	sbci	r31, 0xFE	; 254
 45e:	80 83       	st	Z, r24
                if (password[idx] == '9') {
 460:	f6 01       	movw	r30, r12
 462:	e1 57       	subi	r30, 0x71	; 113
 464:	fe 4f       	sbci	r31, 0xFE	; 254
 466:	80 81       	ld	r24, Z
 468:	89 33       	cpi	r24, 0x39	; 57
 46a:	09 f0       	breq	.+2      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 46c:	4b c0       	rjmp	.+150    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
                    led_test();
 46e:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 472:	48 c0       	rjmp	.+144    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11011110) {
 474:	0e 3d       	cpi	r16, 0xDE	; 222
 476:	71 f4       	brne	.+28     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
                // C
                given_password[idx] = 'C';
 478:	83 e4       	ldi	r24, 0x43	; 67
 47a:	f6 01       	movw	r30, r12
 47c:	e6 57       	subi	r30, 0x76	; 118
 47e:	fe 4f       	sbci	r31, 0xFE	; 254
 480:	80 83       	st	Z, r24
                if (password[idx] == 'C') {
 482:	f6 01       	movw	r30, r12
 484:	e1 57       	subi	r30, 0x71	; 113
 486:	fe 4f       	sbci	r31, 0xFE	; 254
 488:	80 81       	ld	r24, Z
 48a:	83 34       	cpi	r24, 0x43	; 67
 48c:	d9 f5       	brne	.+118    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
                    led_test();
 48e:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 492:	38 c0       	rjmp	.+112    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11100111) {
 494:	07 3e       	cpi	r16, 0xE7	; 231
 496:	71 f4       	brne	.+28     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
                // *
                // TODO: make this the backspace button
                given_password[idx] = '*';
 498:	8a e2       	ldi	r24, 0x2A	; 42
 49a:	f6 01       	movw	r30, r12
 49c:	e6 57       	subi	r30, 0x76	; 118
 49e:	fe 4f       	sbci	r31, 0xFE	; 254
 4a0:	80 83       	st	Z, r24
                if (password[idx] == '*') {
 4a2:	f6 01       	movw	r30, r12
 4a4:	e1 57       	subi	r30, 0x71	; 113
 4a6:	fe 4f       	sbci	r31, 0xFE	; 254
 4a8:	80 81       	ld	r24, Z
 4aa:	8a 32       	cpi	r24, 0x2A	; 42
 4ac:	59 f5       	brne	.+86     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
                    led_test();
 4ae:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 4b2:	28 c0       	rjmp	.+80     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11101011) {
 4b4:	0b 3e       	cpi	r16, 0xEB	; 235
 4b6:	71 f4       	brne	.+28     	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
                // 0
                given_password[idx] = '0';
 4b8:	80 e3       	ldi	r24, 0x30	; 48
 4ba:	f6 01       	movw	r30, r12
 4bc:	e6 57       	subi	r30, 0x76	; 118
 4be:	fe 4f       	sbci	r31, 0xFE	; 254
 4c0:	80 83       	st	Z, r24
                if (password[idx] == '0') {
 4c2:	f6 01       	movw	r30, r12
 4c4:	e1 57       	subi	r30, 0x71	; 113
 4c6:	fe 4f       	sbci	r31, 0xFE	; 254
 4c8:	80 81       	ld	r24, Z
 4ca:	80 33       	cpi	r24, 0x30	; 48
 4cc:	d9 f4       	brne	.+54     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
                    led_test();
 4ce:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
 4d2:	18 c0       	rjmp	.+48     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
                }
                else {
                    ;
                }
            }
            else if (key_pressed == 0b11101101) {
 4d4:	0d 3e       	cpi	r16, 0xED	; 237
 4d6:	39 f4       	brne	.+14     	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
                // #
                compare(password, given_password);
 4d8:	6a e8       	ldi	r22, 0x8A	; 138
 4da:	71 e0       	ldi	r23, 0x01	; 1
 4dc:	8f e8       	ldi	r24, 0x8F	; 143
 4de:	91 e0       	ldi	r25, 0x01	; 1
 4e0:	0e 94 78 00 	call	0xf0	; 0xf0 <compare>
 4e4:	0f c0       	rjmp	.+30     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
                //printf("#");
                //given_password[idx] = '#';
                //led_test();
            }
            else if (key_pressed == 0b11101110) {
 4e6:	0e 3e       	cpi	r16, 0xEE	; 238
 4e8:	69 f4       	brne	.+26     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
                // D
                given_password[idx] = 'D';
 4ea:	84 e4       	ldi	r24, 0x44	; 68
 4ec:	f6 01       	movw	r30, r12
 4ee:	e6 57       	subi	r30, 0x76	; 118
 4f0:	fe 4f       	sbci	r31, 0xFE	; 254
 4f2:	80 83       	st	Z, r24
                if (password[idx] == 'D') {
 4f4:	f6 01       	movw	r30, r12
 4f6:	e1 57       	subi	r30, 0x71	; 113
 4f8:	fe 4f       	sbci	r31, 0xFE	; 254
 4fa:	80 81       	ld	r24, Z
 4fc:	84 34       	cpi	r24, 0x44	; 68
 4fe:	11 f4       	brne	.+4      	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
                    led_test();
 500:	0e 94 53 00 	call	0xa6	; 0xa6 <led_test>
            // Power the row pins
            PORTD |= 0b11000000;
            PORTB |= 0b00000011;
            _delay_ms(100);*/
            
            DDRD ^= 0b00000011;
 504:	9a b1       	in	r25, 0x0a	; 10
 506:	83 e0       	ldi	r24, 0x03	; 3
 508:	98 27       	eor	r25, r24
 50a:	9a b9       	out	0x0a, r25	; 10
            DDRB ^= 0b11111111;
 50c:	94 b1       	in	r25, 0x04	; 4
 50e:	90 95       	com	r25
 510:	94 b9       	out	0x04, r25	; 4
            PORTD ^= 0b00000011;
 512:	9b b1       	in	r25, 0x0b	; 11
 514:	89 27       	eor	r24, r25
 516:	8b b9       	out	0x0b, r24	; 11
            PORTB ^= 0b11111111;
 518:	85 b1       	in	r24, 0x05	; 5
 51a:	80 95       	com	r24
 51c:	85 b9       	out	0x05, r24	; 5
 51e:	3f ef       	ldi	r19, 0xFF	; 255
 520:	81 ee       	ldi	r24, 0xE1	; 225
 522:	94 e0       	ldi	r25, 0x04	; 4
 524:	31 50       	subi	r19, 0x01	; 1
 526:	80 40       	sbci	r24, 0x00	; 0
 528:	90 40       	sbci	r25, 0x00	; 0
 52a:	e1 f7       	brne	.-8      	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
 52c:	00 c0       	rjmp	.+0      	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
 52e:	00 00       	nop
            _delay_ms(100);
            
            key_pressed = 0;
            idx +=1;
 530:	ef ef       	ldi	r30, 0xFF	; 255
 532:	ce 1a       	sub	r12, r30
 534:	de 0a       	sbc	r13, r30
 536:	8f e3       	ldi	r24, 0x3F	; 63
 538:	9c e9       	ldi	r25, 0x9C	; 156
 53a:	01 97       	sbiw	r24, 0x01	; 1
 53c:	f1 f7       	brne	.-4      	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
 540:	00 00       	nop
 542:	3c ce       	rjmp	.-904    	; 0x1bc <main+0x9c>

00000544 <USART_init>:
#include <stdio.h>


void USART_init(unsigned int ubrr) {
	// Set baud rate
	UBRR0H = (unsigned char) (ubrr>>8);
 544:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char) ubrr;
 548:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 54c:	88 e1       	ldi	r24, 0x18	; 24
 54e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	// Set frame format: 8data, 2stop bit
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);
 552:	8e e0       	ldi	r24, 0x0E	; 14
 554:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 558:	08 95       	ret

0000055a <USART_transmit>:
}

void USART_transmit(unsigned char data) {
	// Wait for empty transmit buffer
	while(!(UCSR0A & (1<<UDRE0)));
 55a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 55e:	95 ff       	sbrs	r25, 5
 560:	fc cf       	rjmp	.-8      	; 0x55a <USART_transmit>
    
	// Put data into buffer, send the data
	UDR0 = data;
 562:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 566:	08 95       	ret

00000568 <USART_receive>:
}

unsigned char USART_receive(void) {
	// Wait for data to be received
	while(!(UCSR0A & (1<<RXC0)));
 568:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 56c:	88 23       	and	r24, r24
 56e:	e4 f7       	brge	.-8      	; 0x568 <USART_receive>
	
	// Get and return received data from buffer
	return UDR0;
 570:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 574:	08 95       	ret

00000576 <strcmp>:
 576:	fb 01       	movw	r30, r22
 578:	dc 01       	movw	r26, r24
 57a:	8d 91       	ld	r24, X+
 57c:	01 90       	ld	r0, Z+
 57e:	80 19       	sub	r24, r0
 580:	01 10       	cpse	r0, r1
 582:	d9 f3       	breq	.-10     	; 0x57a <strcmp+0x4>
 584:	99 0b       	sbc	r25, r25
 586:	08 95       	ret

00000588 <printf>:
 588:	a0 e0       	ldi	r26, 0x00	; 0
 58a:	b0 e0       	ldi	r27, 0x00	; 0
 58c:	ea ec       	ldi	r30, 0xCA	; 202
 58e:	f2 e0       	ldi	r31, 0x02	; 2
 590:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__prologue_saves__+0x20>
 594:	ae 01       	movw	r20, r28
 596:	4b 5f       	subi	r20, 0xFB	; 251
 598:	5f 4f       	sbci	r21, 0xFF	; 255
 59a:	fa 01       	movw	r30, r20
 59c:	61 91       	ld	r22, Z+
 59e:	71 91       	ld	r23, Z+
 5a0:	af 01       	movw	r20, r30
 5a2:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <__data_end+0x2>
 5a6:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <__data_end+0x3>
 5aa:	0e 94 da 02 	call	0x5b4	; 0x5b4 <vfprintf>
 5ae:	e2 e0       	ldi	r30, 0x02	; 2
 5b0:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <__epilogue_restores__+0x20>

000005b4 <vfprintf>:
 5b4:	ab e0       	ldi	r26, 0x0B	; 11
 5b6:	b0 e0       	ldi	r27, 0x00	; 0
 5b8:	e0 ee       	ldi	r30, 0xE0	; 224
 5ba:	f2 e0       	ldi	r31, 0x02	; 2
 5bc:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <__prologue_saves__>
 5c0:	6c 01       	movw	r12, r24
 5c2:	7b 01       	movw	r14, r22
 5c4:	8a 01       	movw	r16, r20
 5c6:	fc 01       	movw	r30, r24
 5c8:	17 82       	std	Z+7, r1	; 0x07
 5ca:	16 82       	std	Z+6, r1	; 0x06
 5cc:	83 81       	ldd	r24, Z+3	; 0x03
 5ce:	81 ff       	sbrs	r24, 1
 5d0:	cc c1       	rjmp	.+920    	; 0x96a <__stack+0x6b>
 5d2:	ce 01       	movw	r24, r28
 5d4:	01 96       	adiw	r24, 0x01	; 1
 5d6:	3c 01       	movw	r6, r24
 5d8:	f6 01       	movw	r30, r12
 5da:	93 81       	ldd	r25, Z+3	; 0x03
 5dc:	f7 01       	movw	r30, r14
 5de:	93 fd       	sbrc	r25, 3
 5e0:	85 91       	lpm	r24, Z+
 5e2:	93 ff       	sbrs	r25, 3
 5e4:	81 91       	ld	r24, Z+
 5e6:	7f 01       	movw	r14, r30
 5e8:	88 23       	and	r24, r24
 5ea:	09 f4       	brne	.+2      	; 0x5ee <vfprintf+0x3a>
 5ec:	ba c1       	rjmp	.+884    	; 0x962 <__stack+0x63>
 5ee:	85 32       	cpi	r24, 0x25	; 37
 5f0:	39 f4       	brne	.+14     	; 0x600 <vfprintf+0x4c>
 5f2:	93 fd       	sbrc	r25, 3
 5f4:	85 91       	lpm	r24, Z+
 5f6:	93 ff       	sbrs	r25, 3
 5f8:	81 91       	ld	r24, Z+
 5fa:	7f 01       	movw	r14, r30
 5fc:	85 32       	cpi	r24, 0x25	; 37
 5fe:	29 f4       	brne	.+10     	; 0x60a <vfprintf+0x56>
 600:	b6 01       	movw	r22, r12
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <fputc>
 608:	e7 cf       	rjmp	.-50     	; 0x5d8 <vfprintf+0x24>
 60a:	91 2c       	mov	r9, r1
 60c:	21 2c       	mov	r2, r1
 60e:	31 2c       	mov	r3, r1
 610:	ff e1       	ldi	r31, 0x1F	; 31
 612:	f3 15       	cp	r31, r3
 614:	d8 f0       	brcs	.+54     	; 0x64c <vfprintf+0x98>
 616:	8b 32       	cpi	r24, 0x2B	; 43
 618:	79 f0       	breq	.+30     	; 0x638 <vfprintf+0x84>
 61a:	38 f4       	brcc	.+14     	; 0x62a <vfprintf+0x76>
 61c:	80 32       	cpi	r24, 0x20	; 32
 61e:	79 f0       	breq	.+30     	; 0x63e <vfprintf+0x8a>
 620:	83 32       	cpi	r24, 0x23	; 35
 622:	a1 f4       	brne	.+40     	; 0x64c <vfprintf+0x98>
 624:	23 2d       	mov	r18, r3
 626:	20 61       	ori	r18, 0x10	; 16
 628:	1d c0       	rjmp	.+58     	; 0x664 <vfprintf+0xb0>
 62a:	8d 32       	cpi	r24, 0x2D	; 45
 62c:	61 f0       	breq	.+24     	; 0x646 <vfprintf+0x92>
 62e:	80 33       	cpi	r24, 0x30	; 48
 630:	69 f4       	brne	.+26     	; 0x64c <vfprintf+0x98>
 632:	23 2d       	mov	r18, r3
 634:	21 60       	ori	r18, 0x01	; 1
 636:	16 c0       	rjmp	.+44     	; 0x664 <vfprintf+0xb0>
 638:	83 2d       	mov	r24, r3
 63a:	82 60       	ori	r24, 0x02	; 2
 63c:	38 2e       	mov	r3, r24
 63e:	e3 2d       	mov	r30, r3
 640:	e4 60       	ori	r30, 0x04	; 4
 642:	3e 2e       	mov	r3, r30
 644:	2a c0       	rjmp	.+84     	; 0x69a <vfprintf+0xe6>
 646:	f3 2d       	mov	r31, r3
 648:	f8 60       	ori	r31, 0x08	; 8
 64a:	1d c0       	rjmp	.+58     	; 0x686 <vfprintf+0xd2>
 64c:	37 fc       	sbrc	r3, 7
 64e:	2d c0       	rjmp	.+90     	; 0x6aa <vfprintf+0xf6>
 650:	20 ed       	ldi	r18, 0xD0	; 208
 652:	28 0f       	add	r18, r24
 654:	2a 30       	cpi	r18, 0x0A	; 10
 656:	40 f0       	brcs	.+16     	; 0x668 <vfprintf+0xb4>
 658:	8e 32       	cpi	r24, 0x2E	; 46
 65a:	b9 f4       	brne	.+46     	; 0x68a <vfprintf+0xd6>
 65c:	36 fc       	sbrc	r3, 6
 65e:	81 c1       	rjmp	.+770    	; 0x962 <__stack+0x63>
 660:	23 2d       	mov	r18, r3
 662:	20 64       	ori	r18, 0x40	; 64
 664:	32 2e       	mov	r3, r18
 666:	19 c0       	rjmp	.+50     	; 0x69a <vfprintf+0xe6>
 668:	36 fe       	sbrs	r3, 6
 66a:	06 c0       	rjmp	.+12     	; 0x678 <vfprintf+0xc4>
 66c:	8a e0       	ldi	r24, 0x0A	; 10
 66e:	98 9e       	mul	r9, r24
 670:	20 0d       	add	r18, r0
 672:	11 24       	eor	r1, r1
 674:	92 2e       	mov	r9, r18
 676:	11 c0       	rjmp	.+34     	; 0x69a <vfprintf+0xe6>
 678:	ea e0       	ldi	r30, 0x0A	; 10
 67a:	2e 9e       	mul	r2, r30
 67c:	20 0d       	add	r18, r0
 67e:	11 24       	eor	r1, r1
 680:	22 2e       	mov	r2, r18
 682:	f3 2d       	mov	r31, r3
 684:	f0 62       	ori	r31, 0x20	; 32
 686:	3f 2e       	mov	r3, r31
 688:	08 c0       	rjmp	.+16     	; 0x69a <vfprintf+0xe6>
 68a:	8c 36       	cpi	r24, 0x6C	; 108
 68c:	21 f4       	brne	.+8      	; 0x696 <vfprintf+0xe2>
 68e:	83 2d       	mov	r24, r3
 690:	80 68       	ori	r24, 0x80	; 128
 692:	38 2e       	mov	r3, r24
 694:	02 c0       	rjmp	.+4      	; 0x69a <vfprintf+0xe6>
 696:	88 36       	cpi	r24, 0x68	; 104
 698:	41 f4       	brne	.+16     	; 0x6aa <vfprintf+0xf6>
 69a:	f7 01       	movw	r30, r14
 69c:	93 fd       	sbrc	r25, 3
 69e:	85 91       	lpm	r24, Z+
 6a0:	93 ff       	sbrs	r25, 3
 6a2:	81 91       	ld	r24, Z+
 6a4:	7f 01       	movw	r14, r30
 6a6:	81 11       	cpse	r24, r1
 6a8:	b3 cf       	rjmp	.-154    	; 0x610 <vfprintf+0x5c>
 6aa:	98 2f       	mov	r25, r24
 6ac:	9f 7d       	andi	r25, 0xDF	; 223
 6ae:	95 54       	subi	r25, 0x45	; 69
 6b0:	93 30       	cpi	r25, 0x03	; 3
 6b2:	28 f4       	brcc	.+10     	; 0x6be <vfprintf+0x10a>
 6b4:	0c 5f       	subi	r16, 0xFC	; 252
 6b6:	1f 4f       	sbci	r17, 0xFF	; 255
 6b8:	9f e3       	ldi	r25, 0x3F	; 63
 6ba:	99 83       	std	Y+1, r25	; 0x01
 6bc:	0d c0       	rjmp	.+26     	; 0x6d8 <vfprintf+0x124>
 6be:	83 36       	cpi	r24, 0x63	; 99
 6c0:	31 f0       	breq	.+12     	; 0x6ce <vfprintf+0x11a>
 6c2:	83 37       	cpi	r24, 0x73	; 115
 6c4:	71 f0       	breq	.+28     	; 0x6e2 <vfprintf+0x12e>
 6c6:	83 35       	cpi	r24, 0x53	; 83
 6c8:	09 f0       	breq	.+2      	; 0x6cc <vfprintf+0x118>
 6ca:	59 c0       	rjmp	.+178    	; 0x77e <vfprintf+0x1ca>
 6cc:	21 c0       	rjmp	.+66     	; 0x710 <vfprintf+0x15c>
 6ce:	f8 01       	movw	r30, r16
 6d0:	80 81       	ld	r24, Z
 6d2:	89 83       	std	Y+1, r24	; 0x01
 6d4:	0e 5f       	subi	r16, 0xFE	; 254
 6d6:	1f 4f       	sbci	r17, 0xFF	; 255
 6d8:	88 24       	eor	r8, r8
 6da:	83 94       	inc	r8
 6dc:	91 2c       	mov	r9, r1
 6de:	53 01       	movw	r10, r6
 6e0:	13 c0       	rjmp	.+38     	; 0x708 <vfprintf+0x154>
 6e2:	28 01       	movw	r4, r16
 6e4:	f2 e0       	ldi	r31, 0x02	; 2
 6e6:	4f 0e       	add	r4, r31
 6e8:	51 1c       	adc	r5, r1
 6ea:	f8 01       	movw	r30, r16
 6ec:	a0 80       	ld	r10, Z
 6ee:	b1 80       	ldd	r11, Z+1	; 0x01
 6f0:	36 fe       	sbrs	r3, 6
 6f2:	03 c0       	rjmp	.+6      	; 0x6fa <vfprintf+0x146>
 6f4:	69 2d       	mov	r22, r9
 6f6:	70 e0       	ldi	r23, 0x00	; 0
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <vfprintf+0x14a>
 6fa:	6f ef       	ldi	r22, 0xFF	; 255
 6fc:	7f ef       	ldi	r23, 0xFF	; 255
 6fe:	c5 01       	movw	r24, r10
 700:	0e 94 c6 04 	call	0x98c	; 0x98c <strnlen>
 704:	4c 01       	movw	r8, r24
 706:	82 01       	movw	r16, r4
 708:	f3 2d       	mov	r31, r3
 70a:	ff 77       	andi	r31, 0x7F	; 127
 70c:	3f 2e       	mov	r3, r31
 70e:	16 c0       	rjmp	.+44     	; 0x73c <vfprintf+0x188>
 710:	28 01       	movw	r4, r16
 712:	22 e0       	ldi	r18, 0x02	; 2
 714:	42 0e       	add	r4, r18
 716:	51 1c       	adc	r5, r1
 718:	f8 01       	movw	r30, r16
 71a:	a0 80       	ld	r10, Z
 71c:	b1 80       	ldd	r11, Z+1	; 0x01
 71e:	36 fe       	sbrs	r3, 6
 720:	03 c0       	rjmp	.+6      	; 0x728 <vfprintf+0x174>
 722:	69 2d       	mov	r22, r9
 724:	70 e0       	ldi	r23, 0x00	; 0
 726:	02 c0       	rjmp	.+4      	; 0x72c <vfprintf+0x178>
 728:	6f ef       	ldi	r22, 0xFF	; 255
 72a:	7f ef       	ldi	r23, 0xFF	; 255
 72c:	c5 01       	movw	r24, r10
 72e:	0e 94 bb 04 	call	0x976	; 0x976 <strnlen_P>
 732:	4c 01       	movw	r8, r24
 734:	f3 2d       	mov	r31, r3
 736:	f0 68       	ori	r31, 0x80	; 128
 738:	3f 2e       	mov	r3, r31
 73a:	82 01       	movw	r16, r4
 73c:	33 fc       	sbrc	r3, 3
 73e:	1b c0       	rjmp	.+54     	; 0x776 <vfprintf+0x1c2>
 740:	82 2d       	mov	r24, r2
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	88 16       	cp	r8, r24
 746:	99 06       	cpc	r9, r25
 748:	b0 f4       	brcc	.+44     	; 0x776 <vfprintf+0x1c2>
 74a:	b6 01       	movw	r22, r12
 74c:	80 e2       	ldi	r24, 0x20	; 32
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <fputc>
 754:	2a 94       	dec	r2
 756:	f4 cf       	rjmp	.-24     	; 0x740 <vfprintf+0x18c>
 758:	f5 01       	movw	r30, r10
 75a:	37 fc       	sbrc	r3, 7
 75c:	85 91       	lpm	r24, Z+
 75e:	37 fe       	sbrs	r3, 7
 760:	81 91       	ld	r24, Z+
 762:	5f 01       	movw	r10, r30
 764:	b6 01       	movw	r22, r12
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <fputc>
 76c:	21 10       	cpse	r2, r1
 76e:	2a 94       	dec	r2
 770:	21 e0       	ldi	r18, 0x01	; 1
 772:	82 1a       	sub	r8, r18
 774:	91 08       	sbc	r9, r1
 776:	81 14       	cp	r8, r1
 778:	91 04       	cpc	r9, r1
 77a:	71 f7       	brne	.-36     	; 0x758 <vfprintf+0x1a4>
 77c:	e8 c0       	rjmp	.+464    	; 0x94e <__stack+0x4f>
 77e:	84 36       	cpi	r24, 0x64	; 100
 780:	11 f0       	breq	.+4      	; 0x786 <vfprintf+0x1d2>
 782:	89 36       	cpi	r24, 0x69	; 105
 784:	41 f5       	brne	.+80     	; 0x7d6 <vfprintf+0x222>
 786:	f8 01       	movw	r30, r16
 788:	37 fe       	sbrs	r3, 7
 78a:	07 c0       	rjmp	.+14     	; 0x79a <vfprintf+0x1e6>
 78c:	60 81       	ld	r22, Z
 78e:	71 81       	ldd	r23, Z+1	; 0x01
 790:	82 81       	ldd	r24, Z+2	; 0x02
 792:	93 81       	ldd	r25, Z+3	; 0x03
 794:	0c 5f       	subi	r16, 0xFC	; 252
 796:	1f 4f       	sbci	r17, 0xFF	; 255
 798:	08 c0       	rjmp	.+16     	; 0x7aa <vfprintf+0x1f6>
 79a:	60 81       	ld	r22, Z
 79c:	71 81       	ldd	r23, Z+1	; 0x01
 79e:	07 2e       	mov	r0, r23
 7a0:	00 0c       	add	r0, r0
 7a2:	88 0b       	sbc	r24, r24
 7a4:	99 0b       	sbc	r25, r25
 7a6:	0e 5f       	subi	r16, 0xFE	; 254
 7a8:	1f 4f       	sbci	r17, 0xFF	; 255
 7aa:	f3 2d       	mov	r31, r3
 7ac:	ff 76       	andi	r31, 0x6F	; 111
 7ae:	3f 2e       	mov	r3, r31
 7b0:	97 ff       	sbrs	r25, 7
 7b2:	09 c0       	rjmp	.+18     	; 0x7c6 <vfprintf+0x212>
 7b4:	90 95       	com	r25
 7b6:	80 95       	com	r24
 7b8:	70 95       	com	r23
 7ba:	61 95       	neg	r22
 7bc:	7f 4f       	sbci	r23, 0xFF	; 255
 7be:	8f 4f       	sbci	r24, 0xFF	; 255
 7c0:	9f 4f       	sbci	r25, 0xFF	; 255
 7c2:	f0 68       	ori	r31, 0x80	; 128
 7c4:	3f 2e       	mov	r3, r31
 7c6:	2a e0       	ldi	r18, 0x0A	; 10
 7c8:	30 e0       	ldi	r19, 0x00	; 0
 7ca:	a3 01       	movw	r20, r6
 7cc:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__ultoa_invert>
 7d0:	88 2e       	mov	r8, r24
 7d2:	86 18       	sub	r8, r6
 7d4:	45 c0       	rjmp	.+138    	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 7d6:	85 37       	cpi	r24, 0x75	; 117
 7d8:	31 f4       	brne	.+12     	; 0x7e6 <vfprintf+0x232>
 7da:	23 2d       	mov	r18, r3
 7dc:	2f 7e       	andi	r18, 0xEF	; 239
 7de:	b2 2e       	mov	r11, r18
 7e0:	2a e0       	ldi	r18, 0x0A	; 10
 7e2:	30 e0       	ldi	r19, 0x00	; 0
 7e4:	25 c0       	rjmp	.+74     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 7e6:	93 2d       	mov	r25, r3
 7e8:	99 7f       	andi	r25, 0xF9	; 249
 7ea:	b9 2e       	mov	r11, r25
 7ec:	8f 36       	cpi	r24, 0x6F	; 111
 7ee:	c1 f0       	breq	.+48     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 7f0:	18 f4       	brcc	.+6      	; 0x7f8 <vfprintf+0x244>
 7f2:	88 35       	cpi	r24, 0x58	; 88
 7f4:	79 f0       	breq	.+30     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7f6:	b5 c0       	rjmp	.+362    	; 0x962 <__stack+0x63>
 7f8:	80 37       	cpi	r24, 0x70	; 112
 7fa:	19 f0       	breq	.+6      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7fc:	88 37       	cpi	r24, 0x78	; 120
 7fe:	21 f0       	breq	.+8      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 800:	b0 c0       	rjmp	.+352    	; 0x962 <__stack+0x63>
 802:	e9 2f       	mov	r30, r25
 804:	e0 61       	ori	r30, 0x10	; 16
 806:	be 2e       	mov	r11, r30
 808:	b4 fe       	sbrs	r11, 4
 80a:	0d c0       	rjmp	.+26     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 80c:	fb 2d       	mov	r31, r11
 80e:	f4 60       	ori	r31, 0x04	; 4
 810:	bf 2e       	mov	r11, r31
 812:	09 c0       	rjmp	.+18     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 814:	34 fe       	sbrs	r3, 4
 816:	0a c0       	rjmp	.+20     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 818:	29 2f       	mov	r18, r25
 81a:	26 60       	ori	r18, 0x06	; 6
 81c:	b2 2e       	mov	r11, r18
 81e:	06 c0       	rjmp	.+12     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 820:	28 e0       	ldi	r18, 0x08	; 8
 822:	30 e0       	ldi	r19, 0x00	; 0
 824:	05 c0       	rjmp	.+10     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 826:	20 e1       	ldi	r18, 0x10	; 16
 828:	30 e0       	ldi	r19, 0x00	; 0
 82a:	02 c0       	rjmp	.+4      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 82c:	20 e1       	ldi	r18, 0x10	; 16
 82e:	32 e0       	ldi	r19, 0x02	; 2
 830:	f8 01       	movw	r30, r16
 832:	b7 fe       	sbrs	r11, 7
 834:	07 c0       	rjmp	.+14     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 836:	60 81       	ld	r22, Z
 838:	71 81       	ldd	r23, Z+1	; 0x01
 83a:	82 81       	ldd	r24, Z+2	; 0x02
 83c:	93 81       	ldd	r25, Z+3	; 0x03
 83e:	0c 5f       	subi	r16, 0xFC	; 252
 840:	1f 4f       	sbci	r17, 0xFF	; 255
 842:	06 c0       	rjmp	.+12     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 844:	60 81       	ld	r22, Z
 846:	71 81       	ldd	r23, Z+1	; 0x01
 848:	80 e0       	ldi	r24, 0x00	; 0
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	0e 5f       	subi	r16, 0xFE	; 254
 84e:	1f 4f       	sbci	r17, 0xFF	; 255
 850:	a3 01       	movw	r20, r6
 852:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__ultoa_invert>
 856:	88 2e       	mov	r8, r24
 858:	86 18       	sub	r8, r6
 85a:	fb 2d       	mov	r31, r11
 85c:	ff 77       	andi	r31, 0x7F	; 127
 85e:	3f 2e       	mov	r3, r31
 860:	36 fe       	sbrs	r3, 6
 862:	0d c0       	rjmp	.+26     	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
 864:	23 2d       	mov	r18, r3
 866:	2e 7f       	andi	r18, 0xFE	; 254
 868:	a2 2e       	mov	r10, r18
 86a:	89 14       	cp	r8, r9
 86c:	58 f4       	brcc	.+22     	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 86e:	34 fe       	sbrs	r3, 4
 870:	0b c0       	rjmp	.+22     	; 0x888 <__DATA_REGION_LENGTH__+0x88>
 872:	32 fc       	sbrc	r3, 2
 874:	09 c0       	rjmp	.+18     	; 0x888 <__DATA_REGION_LENGTH__+0x88>
 876:	83 2d       	mov	r24, r3
 878:	8e 7e       	andi	r24, 0xEE	; 238
 87a:	a8 2e       	mov	r10, r24
 87c:	05 c0       	rjmp	.+10     	; 0x888 <__DATA_REGION_LENGTH__+0x88>
 87e:	b8 2c       	mov	r11, r8
 880:	a3 2c       	mov	r10, r3
 882:	03 c0       	rjmp	.+6      	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
 884:	b8 2c       	mov	r11, r8
 886:	01 c0       	rjmp	.+2      	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
 888:	b9 2c       	mov	r11, r9
 88a:	a4 fe       	sbrs	r10, 4
 88c:	0f c0       	rjmp	.+30     	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
 88e:	fe 01       	movw	r30, r28
 890:	e8 0d       	add	r30, r8
 892:	f1 1d       	adc	r31, r1
 894:	80 81       	ld	r24, Z
 896:	80 33       	cpi	r24, 0x30	; 48
 898:	21 f4       	brne	.+8      	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
 89a:	9a 2d       	mov	r25, r10
 89c:	99 7e       	andi	r25, 0xE9	; 233
 89e:	a9 2e       	mov	r10, r25
 8a0:	09 c0       	rjmp	.+18     	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
 8a2:	a2 fe       	sbrs	r10, 2
 8a4:	06 c0       	rjmp	.+12     	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
 8a6:	b3 94       	inc	r11
 8a8:	b3 94       	inc	r11
 8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
 8ac:	8a 2d       	mov	r24, r10
 8ae:	86 78       	andi	r24, 0x86	; 134
 8b0:	09 f0       	breq	.+2      	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
 8b2:	b3 94       	inc	r11
 8b4:	a3 fc       	sbrc	r10, 3
 8b6:	11 c0       	rjmp	.+34     	; 0x8da <__DATA_REGION_LENGTH__+0xda>
 8b8:	a0 fe       	sbrs	r10, 0
 8ba:	06 c0       	rjmp	.+12     	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 8bc:	b2 14       	cp	r11, r2
 8be:	88 f4       	brcc	.+34     	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
 8c0:	28 0c       	add	r2, r8
 8c2:	92 2c       	mov	r9, r2
 8c4:	9b 18       	sub	r9, r11
 8c6:	0e c0       	rjmp	.+28     	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
 8c8:	b2 14       	cp	r11, r2
 8ca:	60 f4       	brcc	.+24     	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
 8cc:	b6 01       	movw	r22, r12
 8ce:	80 e2       	ldi	r24, 0x20	; 32
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <fputc>
 8d6:	b3 94       	inc	r11
 8d8:	f7 cf       	rjmp	.-18     	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 8da:	b2 14       	cp	r11, r2
 8dc:	18 f4       	brcc	.+6      	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
 8de:	2b 18       	sub	r2, r11
 8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
 8e2:	98 2c       	mov	r9, r8
 8e4:	21 2c       	mov	r2, r1
 8e6:	a4 fe       	sbrs	r10, 4
 8e8:	10 c0       	rjmp	.+32     	; 0x90a <__stack+0xb>
 8ea:	b6 01       	movw	r22, r12
 8ec:	80 e3       	ldi	r24, 0x30	; 48
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <fputc>
 8f4:	a2 fe       	sbrs	r10, 2
 8f6:	17 c0       	rjmp	.+46     	; 0x926 <__stack+0x27>
 8f8:	a1 fc       	sbrc	r10, 1
 8fa:	03 c0       	rjmp	.+6      	; 0x902 <__stack+0x3>
 8fc:	88 e7       	ldi	r24, 0x78	; 120
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	02 c0       	rjmp	.+4      	; 0x906 <__stack+0x7>
 902:	88 e5       	ldi	r24, 0x58	; 88
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	b6 01       	movw	r22, r12
 908:	0c c0       	rjmp	.+24     	; 0x922 <__stack+0x23>
 90a:	8a 2d       	mov	r24, r10
 90c:	86 78       	andi	r24, 0x86	; 134
 90e:	59 f0       	breq	.+22     	; 0x926 <__stack+0x27>
 910:	a1 fe       	sbrs	r10, 1
 912:	02 c0       	rjmp	.+4      	; 0x918 <__stack+0x19>
 914:	8b e2       	ldi	r24, 0x2B	; 43
 916:	01 c0       	rjmp	.+2      	; 0x91a <__stack+0x1b>
 918:	80 e2       	ldi	r24, 0x20	; 32
 91a:	a7 fc       	sbrc	r10, 7
 91c:	8d e2       	ldi	r24, 0x2D	; 45
 91e:	b6 01       	movw	r22, r12
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <fputc>
 926:	89 14       	cp	r8, r9
 928:	38 f4       	brcc	.+14     	; 0x938 <__stack+0x39>
 92a:	b6 01       	movw	r22, r12
 92c:	80 e3       	ldi	r24, 0x30	; 48
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <fputc>
 934:	9a 94       	dec	r9
 936:	f7 cf       	rjmp	.-18     	; 0x926 <__stack+0x27>
 938:	8a 94       	dec	r8
 93a:	f3 01       	movw	r30, r6
 93c:	e8 0d       	add	r30, r8
 93e:	f1 1d       	adc	r31, r1
 940:	80 81       	ld	r24, Z
 942:	b6 01       	movw	r22, r12
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <fputc>
 94a:	81 10       	cpse	r8, r1
 94c:	f5 cf       	rjmp	.-22     	; 0x938 <__stack+0x39>
 94e:	22 20       	and	r2, r2
 950:	09 f4       	brne	.+2      	; 0x954 <__stack+0x55>
 952:	42 ce       	rjmp	.-892    	; 0x5d8 <vfprintf+0x24>
 954:	b6 01       	movw	r22, r12
 956:	80 e2       	ldi	r24, 0x20	; 32
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <fputc>
 95e:	2a 94       	dec	r2
 960:	f6 cf       	rjmp	.-20     	; 0x94e <__stack+0x4f>
 962:	f6 01       	movw	r30, r12
 964:	86 81       	ldd	r24, Z+6	; 0x06
 966:	97 81       	ldd	r25, Z+7	; 0x07
 968:	02 c0       	rjmp	.+4      	; 0x96e <__stack+0x6f>
 96a:	8f ef       	ldi	r24, 0xFF	; 255
 96c:	9f ef       	ldi	r25, 0xFF	; 255
 96e:	2b 96       	adiw	r28, 0x0b	; 11
 970:	e2 e1       	ldi	r30, 0x12	; 18
 972:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <__epilogue_restores__>

00000976 <strnlen_P>:
 976:	fc 01       	movw	r30, r24
 978:	05 90       	lpm	r0, Z+
 97a:	61 50       	subi	r22, 0x01	; 1
 97c:	70 40       	sbci	r23, 0x00	; 0
 97e:	01 10       	cpse	r0, r1
 980:	d8 f7       	brcc	.-10     	; 0x978 <strnlen_P+0x2>
 982:	80 95       	com	r24
 984:	90 95       	com	r25
 986:	8e 0f       	add	r24, r30
 988:	9f 1f       	adc	r25, r31
 98a:	08 95       	ret

0000098c <strnlen>:
 98c:	fc 01       	movw	r30, r24
 98e:	61 50       	subi	r22, 0x01	; 1
 990:	70 40       	sbci	r23, 0x00	; 0
 992:	01 90       	ld	r0, Z+
 994:	01 10       	cpse	r0, r1
 996:	d8 f7       	brcc	.-10     	; 0x98e <strnlen+0x2>
 998:	80 95       	com	r24
 99a:	90 95       	com	r25
 99c:	8e 0f       	add	r24, r30
 99e:	9f 1f       	adc	r25, r31
 9a0:	08 95       	ret

000009a2 <fputc>:
 9a2:	0f 93       	push	r16
 9a4:	1f 93       	push	r17
 9a6:	cf 93       	push	r28
 9a8:	df 93       	push	r29
 9aa:	fb 01       	movw	r30, r22
 9ac:	23 81       	ldd	r18, Z+3	; 0x03
 9ae:	21 fd       	sbrc	r18, 1
 9b0:	03 c0       	rjmp	.+6      	; 0x9b8 <fputc+0x16>
 9b2:	8f ef       	ldi	r24, 0xFF	; 255
 9b4:	9f ef       	ldi	r25, 0xFF	; 255
 9b6:	2c c0       	rjmp	.+88     	; 0xa10 <fputc+0x6e>
 9b8:	22 ff       	sbrs	r18, 2
 9ba:	16 c0       	rjmp	.+44     	; 0x9e8 <fputc+0x46>
 9bc:	46 81       	ldd	r20, Z+6	; 0x06
 9be:	57 81       	ldd	r21, Z+7	; 0x07
 9c0:	24 81       	ldd	r18, Z+4	; 0x04
 9c2:	35 81       	ldd	r19, Z+5	; 0x05
 9c4:	42 17       	cp	r20, r18
 9c6:	53 07       	cpc	r21, r19
 9c8:	44 f4       	brge	.+16     	; 0x9da <fputc+0x38>
 9ca:	a0 81       	ld	r26, Z
 9cc:	b1 81       	ldd	r27, Z+1	; 0x01
 9ce:	9d 01       	movw	r18, r26
 9d0:	2f 5f       	subi	r18, 0xFF	; 255
 9d2:	3f 4f       	sbci	r19, 0xFF	; 255
 9d4:	31 83       	std	Z+1, r19	; 0x01
 9d6:	20 83       	st	Z, r18
 9d8:	8c 93       	st	X, r24
 9da:	26 81       	ldd	r18, Z+6	; 0x06
 9dc:	37 81       	ldd	r19, Z+7	; 0x07
 9de:	2f 5f       	subi	r18, 0xFF	; 255
 9e0:	3f 4f       	sbci	r19, 0xFF	; 255
 9e2:	37 83       	std	Z+7, r19	; 0x07
 9e4:	26 83       	std	Z+6, r18	; 0x06
 9e6:	14 c0       	rjmp	.+40     	; 0xa10 <fputc+0x6e>
 9e8:	8b 01       	movw	r16, r22
 9ea:	ec 01       	movw	r28, r24
 9ec:	fb 01       	movw	r30, r22
 9ee:	00 84       	ldd	r0, Z+8	; 0x08
 9f0:	f1 85       	ldd	r31, Z+9	; 0x09
 9f2:	e0 2d       	mov	r30, r0
 9f4:	09 95       	icall
 9f6:	89 2b       	or	r24, r25
 9f8:	e1 f6       	brne	.-72     	; 0x9b2 <fputc+0x10>
 9fa:	d8 01       	movw	r26, r16
 9fc:	16 96       	adiw	r26, 0x06	; 6
 9fe:	8d 91       	ld	r24, X+
 a00:	9c 91       	ld	r25, X
 a02:	17 97       	sbiw	r26, 0x07	; 7
 a04:	01 96       	adiw	r24, 0x01	; 1
 a06:	17 96       	adiw	r26, 0x07	; 7
 a08:	9c 93       	st	X, r25
 a0a:	8e 93       	st	-X, r24
 a0c:	16 97       	sbiw	r26, 0x06	; 6
 a0e:	ce 01       	movw	r24, r28
 a10:	df 91       	pop	r29
 a12:	cf 91       	pop	r28
 a14:	1f 91       	pop	r17
 a16:	0f 91       	pop	r16
 a18:	08 95       	ret

00000a1a <__ultoa_invert>:
 a1a:	fa 01       	movw	r30, r20
 a1c:	aa 27       	eor	r26, r26
 a1e:	28 30       	cpi	r18, 0x08	; 8
 a20:	51 f1       	breq	.+84     	; 0xa76 <__ultoa_invert+0x5c>
 a22:	20 31       	cpi	r18, 0x10	; 16
 a24:	81 f1       	breq	.+96     	; 0xa86 <__ultoa_invert+0x6c>
 a26:	e8 94       	clt
 a28:	6f 93       	push	r22
 a2a:	6e 7f       	andi	r22, 0xFE	; 254
 a2c:	6e 5f       	subi	r22, 0xFE	; 254
 a2e:	7f 4f       	sbci	r23, 0xFF	; 255
 a30:	8f 4f       	sbci	r24, 0xFF	; 255
 a32:	9f 4f       	sbci	r25, 0xFF	; 255
 a34:	af 4f       	sbci	r26, 0xFF	; 255
 a36:	b1 e0       	ldi	r27, 0x01	; 1
 a38:	3e d0       	rcall	.+124    	; 0xab6 <__ultoa_invert+0x9c>
 a3a:	b4 e0       	ldi	r27, 0x04	; 4
 a3c:	3c d0       	rcall	.+120    	; 0xab6 <__ultoa_invert+0x9c>
 a3e:	67 0f       	add	r22, r23
 a40:	78 1f       	adc	r23, r24
 a42:	89 1f       	adc	r24, r25
 a44:	9a 1f       	adc	r25, r26
 a46:	a1 1d       	adc	r26, r1
 a48:	68 0f       	add	r22, r24
 a4a:	79 1f       	adc	r23, r25
 a4c:	8a 1f       	adc	r24, r26
 a4e:	91 1d       	adc	r25, r1
 a50:	a1 1d       	adc	r26, r1
 a52:	6a 0f       	add	r22, r26
 a54:	71 1d       	adc	r23, r1
 a56:	81 1d       	adc	r24, r1
 a58:	91 1d       	adc	r25, r1
 a5a:	a1 1d       	adc	r26, r1
 a5c:	20 d0       	rcall	.+64     	; 0xa9e <__ultoa_invert+0x84>
 a5e:	09 f4       	brne	.+2      	; 0xa62 <__ultoa_invert+0x48>
 a60:	68 94       	set
 a62:	3f 91       	pop	r19
 a64:	2a e0       	ldi	r18, 0x0A	; 10
 a66:	26 9f       	mul	r18, r22
 a68:	11 24       	eor	r1, r1
 a6a:	30 19       	sub	r19, r0
 a6c:	30 5d       	subi	r19, 0xD0	; 208
 a6e:	31 93       	st	Z+, r19
 a70:	de f6       	brtc	.-74     	; 0xa28 <__ultoa_invert+0xe>
 a72:	cf 01       	movw	r24, r30
 a74:	08 95       	ret
 a76:	46 2f       	mov	r20, r22
 a78:	47 70       	andi	r20, 0x07	; 7
 a7a:	40 5d       	subi	r20, 0xD0	; 208
 a7c:	41 93       	st	Z+, r20
 a7e:	b3 e0       	ldi	r27, 0x03	; 3
 a80:	0f d0       	rcall	.+30     	; 0xaa0 <__ultoa_invert+0x86>
 a82:	c9 f7       	brne	.-14     	; 0xa76 <__ultoa_invert+0x5c>
 a84:	f6 cf       	rjmp	.-20     	; 0xa72 <__ultoa_invert+0x58>
 a86:	46 2f       	mov	r20, r22
 a88:	4f 70       	andi	r20, 0x0F	; 15
 a8a:	40 5d       	subi	r20, 0xD0	; 208
 a8c:	4a 33       	cpi	r20, 0x3A	; 58
 a8e:	18 f0       	brcs	.+6      	; 0xa96 <__ultoa_invert+0x7c>
 a90:	49 5d       	subi	r20, 0xD9	; 217
 a92:	31 fd       	sbrc	r19, 1
 a94:	40 52       	subi	r20, 0x20	; 32
 a96:	41 93       	st	Z+, r20
 a98:	02 d0       	rcall	.+4      	; 0xa9e <__ultoa_invert+0x84>
 a9a:	a9 f7       	brne	.-22     	; 0xa86 <__ultoa_invert+0x6c>
 a9c:	ea cf       	rjmp	.-44     	; 0xa72 <__ultoa_invert+0x58>
 a9e:	b4 e0       	ldi	r27, 0x04	; 4
 aa0:	a6 95       	lsr	r26
 aa2:	97 95       	ror	r25
 aa4:	87 95       	ror	r24
 aa6:	77 95       	ror	r23
 aa8:	67 95       	ror	r22
 aaa:	ba 95       	dec	r27
 aac:	c9 f7       	brne	.-14     	; 0xaa0 <__ultoa_invert+0x86>
 aae:	00 97       	sbiw	r24, 0x00	; 0
 ab0:	61 05       	cpc	r22, r1
 ab2:	71 05       	cpc	r23, r1
 ab4:	08 95       	ret
 ab6:	9b 01       	movw	r18, r22
 ab8:	ac 01       	movw	r20, r24
 aba:	0a 2e       	mov	r0, r26
 abc:	06 94       	lsr	r0
 abe:	57 95       	ror	r21
 ac0:	47 95       	ror	r20
 ac2:	37 95       	ror	r19
 ac4:	27 95       	ror	r18
 ac6:	ba 95       	dec	r27
 ac8:	c9 f7       	brne	.-14     	; 0xabc <__ultoa_invert+0xa2>
 aca:	62 0f       	add	r22, r18
 acc:	73 1f       	adc	r23, r19
 ace:	84 1f       	adc	r24, r20
 ad0:	95 1f       	adc	r25, r21
 ad2:	a0 1d       	adc	r26, r0
 ad4:	08 95       	ret

00000ad6 <__prologue_saves__>:
 ad6:	2f 92       	push	r2
 ad8:	3f 92       	push	r3
 ada:	4f 92       	push	r4
 adc:	5f 92       	push	r5
 ade:	6f 92       	push	r6
 ae0:	7f 92       	push	r7
 ae2:	8f 92       	push	r8
 ae4:	9f 92       	push	r9
 ae6:	af 92       	push	r10
 ae8:	bf 92       	push	r11
 aea:	cf 92       	push	r12
 aec:	df 92       	push	r13
 aee:	ef 92       	push	r14
 af0:	ff 92       	push	r15
 af2:	0f 93       	push	r16
 af4:	1f 93       	push	r17
 af6:	cf 93       	push	r28
 af8:	df 93       	push	r29
 afa:	cd b7       	in	r28, 0x3d	; 61
 afc:	de b7       	in	r29, 0x3e	; 62
 afe:	ca 1b       	sub	r28, r26
 b00:	db 0b       	sbc	r29, r27
 b02:	0f b6       	in	r0, 0x3f	; 63
 b04:	f8 94       	cli
 b06:	de bf       	out	0x3e, r29	; 62
 b08:	0f be       	out	0x3f, r0	; 63
 b0a:	cd bf       	out	0x3d, r28	; 61
 b0c:	09 94       	ijmp

00000b0e <__epilogue_restores__>:
 b0e:	2a 88       	ldd	r2, Y+18	; 0x12
 b10:	39 88       	ldd	r3, Y+17	; 0x11
 b12:	48 88       	ldd	r4, Y+16	; 0x10
 b14:	5f 84       	ldd	r5, Y+15	; 0x0f
 b16:	6e 84       	ldd	r6, Y+14	; 0x0e
 b18:	7d 84       	ldd	r7, Y+13	; 0x0d
 b1a:	8c 84       	ldd	r8, Y+12	; 0x0c
 b1c:	9b 84       	ldd	r9, Y+11	; 0x0b
 b1e:	aa 84       	ldd	r10, Y+10	; 0x0a
 b20:	b9 84       	ldd	r11, Y+9	; 0x09
 b22:	c8 84       	ldd	r12, Y+8	; 0x08
 b24:	df 80       	ldd	r13, Y+7	; 0x07
 b26:	ee 80       	ldd	r14, Y+6	; 0x06
 b28:	fd 80       	ldd	r15, Y+5	; 0x05
 b2a:	0c 81       	ldd	r16, Y+4	; 0x04
 b2c:	1b 81       	ldd	r17, Y+3	; 0x03
 b2e:	aa 81       	ldd	r26, Y+2	; 0x02
 b30:	b9 81       	ldd	r27, Y+1	; 0x01
 b32:	ce 0f       	add	r28, r30
 b34:	d1 1d       	adc	r29, r1
 b36:	0f b6       	in	r0, 0x3f	; 63
 b38:	f8 94       	cli
 b3a:	de bf       	out	0x3e, r29	; 62
 b3c:	0f be       	out	0x3f, r0	; 63
 b3e:	cd bf       	out	0x3d, r28	; 61
 b40:	ed 01       	movw	r28, r26
 b42:	08 95       	ret

00000b44 <_exit>:
 b44:	f8 94       	cli

00000b46 <__stop_program>:
 b46:	ff cf       	rjmp	.-2      	; 0xb46 <__stop_program>
