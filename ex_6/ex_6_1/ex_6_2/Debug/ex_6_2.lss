
ex_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000003f0  00000464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000472  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f39  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000909  00000000  00000000  000014c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000078c  00000000  00000000  00001dce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  0000255c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d3  00000000  00000000  000026c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006a0  00000000  00000000  00002b97  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00003237  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ef       	ldi	r30, 0xF0	; 240
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 91 01 	call	0x322	; 0x322 <main>
  8e:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  96:	85 b1       	in	r24, 0x05	; 5
  98:	88 60       	ori	r24, 0x08	; 8
  9a:	85 b9       	out	0x05, r24	; 5
  9c:	00 00       	nop
  9e:	85 b1       	in	r24, 0x05	; 5
  a0:	87 7f       	andi	r24, 0xF7	; 247
  a2:	85 b9       	out	0x05, r24	; 5
  a4:	08 95       	ret

000000a6 <lcd_write>:
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  aa:	66 23       	and	r22, r22
  ac:	21 f0       	breq	.+8      	; 0xb6 <lcd_write+0x10>
  ae:	85 b1       	in	r24, 0x05	; 5
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	85 b9       	out	0x05, r24	; 5
  b4:	03 c0       	rjmp	.+6      	; 0xbc <lcd_write+0x16>
  b6:	85 b1       	in	r24, 0x05	; 5
  b8:	8d 7f       	andi	r24, 0xFD	; 253
  ba:	85 b9       	out	0x05, r24	; 5
  bc:	85 b1       	in	r24, 0x05	; 5
  be:	8b 7f       	andi	r24, 0xFB	; 251
  c0:	85 b9       	out	0x05, r24	; 5
  c2:	8a b1       	in	r24, 0x0a	; 10
  c4:	88 60       	ori	r24, 0x08	; 8
  c6:	8a b9       	out	0x0a, r24	; 10
  c8:	8a b1       	in	r24, 0x0a	; 10
  ca:	80 61       	ori	r24, 0x10	; 16
  cc:	8a b9       	out	0x0a, r24	; 10
  ce:	8a b1       	in	r24, 0x0a	; 10
  d0:	80 62       	ori	r24, 0x20	; 32
  d2:	8a b9       	out	0x0a, r24	; 10
  d4:	8a b1       	in	r24, 0x0a	; 10
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	8a b9       	out	0x0a, r24	; 10
  da:	8b b1       	in	r24, 0x0b	; 11
  dc:	8f 7b       	andi	r24, 0xBF	; 191
  de:	8b b9       	out	0x0b, r24	; 11
  e0:	8b b1       	in	r24, 0x0b	; 11
  e2:	8f 7d       	andi	r24, 0xDF	; 223
  e4:	8b b9       	out	0x0b, r24	; 11
  e6:	8b b1       	in	r24, 0x0b	; 11
  e8:	8f 7e       	andi	r24, 0xEF	; 239
  ea:	8b b9       	out	0x0b, r24	; 11
  ec:	8b b1       	in	r24, 0x0b	; 11
  ee:	87 7f       	andi	r24, 0xF7	; 247
  f0:	8b b9       	out	0x0b, r24	; 11
  f2:	cc 23       	and	r28, r28
  f4:	1c f4       	brge	.+6      	; 0xfc <lcd_write+0x56>
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	80 64       	ori	r24, 0x40	; 64
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	c6 ff       	sbrs	r28, 6
  fe:	03 c0       	rjmp	.+6      	; 0x106 <lcd_write+0x60>
 100:	8b b1       	in	r24, 0x0b	; 11
 102:	80 62       	ori	r24, 0x20	; 32
 104:	8b b9       	out	0x0b, r24	; 11
 106:	c5 ff       	sbrs	r28, 5
 108:	03 c0       	rjmp	.+6      	; 0x110 <lcd_write+0x6a>
 10a:	8b b1       	in	r24, 0x0b	; 11
 10c:	80 61       	ori	r24, 0x10	; 16
 10e:	8b b9       	out	0x0b, r24	; 11
 110:	c4 ff       	sbrs	r28, 4
 112:	03 c0       	rjmp	.+6      	; 0x11a <lcd_write+0x74>
 114:	8b b1       	in	r24, 0x0b	; 11
 116:	88 60       	ori	r24, 0x08	; 8
 118:	8b b9       	out	0x0b, r24	; 11
 11a:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
 11e:	8b b1       	in	r24, 0x0b	; 11
 120:	8f 7b       	andi	r24, 0xBF	; 191
 122:	8b b9       	out	0x0b, r24	; 11
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	8f 7d       	andi	r24, 0xDF	; 223
 128:	8b b9       	out	0x0b, r24	; 11
 12a:	8b b1       	in	r24, 0x0b	; 11
 12c:	8f 7e       	andi	r24, 0xEF	; 239
 12e:	8b b9       	out	0x0b, r24	; 11
 130:	8b b1       	in	r24, 0x0b	; 11
 132:	87 7f       	andi	r24, 0xF7	; 247
 134:	8b b9       	out	0x0b, r24	; 11
 136:	c3 ff       	sbrs	r28, 3
 138:	03 c0       	rjmp	.+6      	; 0x140 <lcd_write+0x9a>
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	80 64       	ori	r24, 0x40	; 64
 13e:	8b b9       	out	0x0b, r24	; 11
 140:	c2 ff       	sbrs	r28, 2
 142:	03 c0       	rjmp	.+6      	; 0x14a <lcd_write+0xa4>
 144:	8b b1       	in	r24, 0x0b	; 11
 146:	80 62       	ori	r24, 0x20	; 32
 148:	8b b9       	out	0x0b, r24	; 11
 14a:	c1 ff       	sbrs	r28, 1
 14c:	03 c0       	rjmp	.+6      	; 0x154 <lcd_write+0xae>
 14e:	8b b1       	in	r24, 0x0b	; 11
 150:	80 61       	ori	r24, 0x10	; 16
 152:	8b b9       	out	0x0b, r24	; 11
 154:	c0 ff       	sbrs	r28, 0
 156:	03 c0       	rjmp	.+6      	; 0x15e <lcd_write+0xb8>
 158:	8b b1       	in	r24, 0x0b	; 11
 15a:	88 60       	ori	r24, 0x08	; 8
 15c:	8b b9       	out	0x0b, r24	; 11
 15e:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
 162:	8b b1       	in	r24, 0x0b	; 11
 164:	88 60       	ori	r24, 0x08	; 8
 166:	8b b9       	out	0x0b, r24	; 11
 168:	8b b1       	in	r24, 0x0b	; 11
 16a:	80 61       	ori	r24, 0x10	; 16
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	8b b1       	in	r24, 0x0b	; 11
 170:	80 62       	ori	r24, 0x20	; 32
 172:	8b b9       	out	0x0b, r24	; 11
 174:	8b b1       	in	r24, 0x0b	; 11
 176:	80 64       	ori	r24, 0x40	; 64
 178:	8b b9       	out	0x0b, r24	; 11
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <lcd_read>:
 17e:	88 23       	and	r24, r24
 180:	21 f0       	breq	.+8      	; 0x18a <lcd_read+0xc>
 182:	85 b1       	in	r24, 0x05	; 5
 184:	82 60       	ori	r24, 0x02	; 2
 186:	85 b9       	out	0x05, r24	; 5
 188:	03 c0       	rjmp	.+6      	; 0x190 <lcd_read+0x12>
 18a:	85 b1       	in	r24, 0x05	; 5
 18c:	8d 7f       	andi	r24, 0xFD	; 253
 18e:	85 b9       	out	0x05, r24	; 5
 190:	85 b1       	in	r24, 0x05	; 5
 192:	84 60       	ori	r24, 0x04	; 4
 194:	85 b9       	out	0x05, r24	; 5
 196:	8a b1       	in	r24, 0x0a	; 10
 198:	87 7f       	andi	r24, 0xF7	; 247
 19a:	8a b9       	out	0x0a, r24	; 10
 19c:	8a b1       	in	r24, 0x0a	; 10
 19e:	8f 7e       	andi	r24, 0xEF	; 239
 1a0:	8a b9       	out	0x0a, r24	; 10
 1a2:	8a b1       	in	r24, 0x0a	; 10
 1a4:	8f 7d       	andi	r24, 0xDF	; 223
 1a6:	8a b9       	out	0x0a, r24	; 10
 1a8:	8a b1       	in	r24, 0x0a	; 10
 1aa:	8f 7b       	andi	r24, 0xBF	; 191
 1ac:	8a b9       	out	0x0a, r24	; 10
 1ae:	85 b1       	in	r24, 0x05	; 5
 1b0:	88 60       	ori	r24, 0x08	; 8
 1b2:	85 b9       	out	0x05, r24	; 5
 1b4:	00 00       	nop
 1b6:	4b 99       	sbic	0x09, 3	; 9
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <lcd_read+0x40>
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <lcd_read+0x42>
 1be:	80 e1       	ldi	r24, 0x10	; 16
 1c0:	4c 99       	sbic	0x09, 4	; 9
 1c2:	80 62       	ori	r24, 0x20	; 32
 1c4:	4d 99       	sbic	0x09, 5	; 9
 1c6:	80 64       	ori	r24, 0x40	; 64
 1c8:	4e 99       	sbic	0x09, 6	; 9
 1ca:	80 68       	ori	r24, 0x80	; 128
 1cc:	95 b1       	in	r25, 0x05	; 5
 1ce:	97 7f       	andi	r25, 0xF7	; 247
 1d0:	95 b9       	out	0x05, r25	; 5
 1d2:	00 00       	nop
 1d4:	95 b1       	in	r25, 0x05	; 5
 1d6:	98 60       	ori	r25, 0x08	; 8
 1d8:	95 b9       	out	0x05, r25	; 5
 1da:	00 00       	nop
 1dc:	4b 99       	sbic	0x09, 3	; 9
 1de:	81 60       	ori	r24, 0x01	; 1
 1e0:	4c 99       	sbic	0x09, 4	; 9
 1e2:	82 60       	ori	r24, 0x02	; 2
 1e4:	4d 99       	sbic	0x09, 5	; 9
 1e6:	84 60       	ori	r24, 0x04	; 4
 1e8:	4e 99       	sbic	0x09, 6	; 9
 1ea:	88 60       	ori	r24, 0x08	; 8
 1ec:	95 b1       	in	r25, 0x05	; 5
 1ee:	97 7f       	andi	r25, 0xF7	; 247
 1f0:	95 b9       	out	0x05, r25	; 5
 1f2:	08 95       	ret

000001f4 <lcd_waitbusy>:
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_read>
 1fa:	88 23       	and	r24, r24
 1fc:	dc f3       	brlt	.-10     	; 0x1f4 <lcd_waitbusy>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <lcd_waitbusy+0xc>
 200:	00 c0       	rjmp	.+0      	; 0x202 <lcd_waitbusy+0xe>
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_read>
 208:	08 95       	ret

0000020a <lcd_command>:
 20a:	cf 93       	push	r28
 20c:	c8 2f       	mov	r28, r24
 20e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_waitbusy>
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	8c 2f       	mov	r24, r28
 216:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write>
 21a:	cf 91       	pop	r28
 21c:	08 95       	ret

0000021e <lcd_gotoxy>:
 21e:	61 11       	cpse	r22, r1
 220:	04 c0       	rjmp	.+8      	; 0x22a <lcd_gotoxy+0xc>
 222:	80 58       	subi	r24, 0x80	; 128
 224:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_command>
 228:	08 95       	ret
 22a:	80 54       	subi	r24, 0x40	; 64
 22c:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_command>
 230:	08 95       	ret

00000232 <lcd_clrscr>:
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_command>
 238:	08 95       	ret

0000023a <lcd_putc>:
 23a:	cf 93       	push	r28
 23c:	c8 2f       	mov	r28, r24
 23e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_waitbusy>
 242:	ca 30       	cpi	r28, 0x0A	; 10
 244:	49 f4       	brne	.+18     	; 0x258 <lcd_putc+0x1e>
 246:	80 34       	cpi	r24, 0x40	; 64
 248:	10 f4       	brcc	.+4      	; 0x24e <lcd_putc+0x14>
 24a:	80 e4       	ldi	r24, 0x40	; 64
 24c:	01 c0       	rjmp	.+2      	; 0x250 <lcd_putc+0x16>
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	80 58       	subi	r24, 0x80	; 128
 252:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_command>
 256:	04 c0       	rjmp	.+8      	; 0x260 <lcd_putc+0x26>
 258:	61 e0       	ldi	r22, 0x01	; 1
 25a:	8c 2f       	mov	r24, r28
 25c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write>
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <lcd_puts>:
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
 268:	fc 01       	movw	r30, r24
 26a:	03 c0       	rjmp	.+6      	; 0x272 <lcd_puts+0xe>
 26c:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_putc>
 270:	fe 01       	movw	r30, r28
 272:	ef 01       	movw	r28, r30
 274:	21 96       	adiw	r28, 0x01	; 1
 276:	80 81       	ld	r24, Z
 278:	81 11       	cpse	r24, r1
 27a:	f8 cf       	rjmp	.-16     	; 0x26c <lcd_puts+0x8>
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 282:	cf 93       	push	r28
 284:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 286:	84 b1       	in	r24, 0x04	; 4
 288:	82 60       	ori	r24, 0x02	; 2
 28a:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 28c:	84 b1       	in	r24, 0x04	; 4
 28e:	84 60       	ori	r24, 0x04	; 4
 290:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 292:	84 b1       	in	r24, 0x04	; 4
 294:	88 60       	ori	r24, 0x08	; 8
 296:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 298:	8a b1       	in	r24, 0x0a	; 10
 29a:	88 60       	ori	r24, 0x08	; 8
 29c:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 29e:	8a b1       	in	r24, 0x0a	; 10
 2a0:	80 61       	ori	r24, 0x10	; 16
 2a2:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 2a4:	8a b1       	in	r24, 0x0a	; 10
 2a6:	80 62       	ori	r24, 0x20	; 32
 2a8:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 2aa:	8a b1       	in	r24, 0x0a	; 10
 2ac:	80 64       	ori	r24, 0x40	; 64
 2ae:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b0:	8f e9       	ldi	r24, 0x9F	; 159
 2b2:	9f e0       	ldi	r25, 0x0F	; 15
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <lcd_init+0x32>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <lcd_init+0x38>
 2ba:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 2bc:	8b b1       	in	r24, 0x0b	; 11
 2be:	80 61       	ori	r24, 0x10	; 16
 2c0:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 2c2:	8b b1       	in	r24, 0x0b	; 11
 2c4:	88 60       	ori	r24, 0x08	; 8
 2c6:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 2c8:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
 2cc:	81 ee       	ldi	r24, 0xE1	; 225
 2ce:	94 e0       	ldi	r25, 0x04	; 4
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <lcd_init+0x4e>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <lcd_init+0x54>
 2d6:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 2d8:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
 2dc:	95 e1       	ldi	r25, 0x15	; 21
 2de:	9a 95       	dec	r25
 2e0:	f1 f7       	brne	.-4      	; 0x2de <lcd_init+0x5c>
 2e2:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 2e4:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
 2e8:	85 e1       	ldi	r24, 0x15	; 21
 2ea:	8a 95       	dec	r24
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <lcd_init+0x68>
 2ee:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 2f0:	8b b1       	in	r24, 0x0b	; 11
 2f2:	87 7f       	andi	r24, 0xF7	; 247
 2f4:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 2f6:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
 2fa:	95 e1       	ldi	r25, 0x15	; 21
 2fc:	9a 95       	dec	r25
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <lcd_init+0x7a>
 300:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 302:	88 e2       	ldi	r24, 0x28	; 40
 304:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 308:	88 e0       	ldi	r24, 0x08	; 8
 30a:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 30e:	0e 94 19 01 	call	0x232	; 0x232 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 312:	86 e0       	ldi	r24, 0x06	; 6
 314:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 318:	8c 2f       	mov	r24, r28
 31a:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_command>

}/* lcd_init */
 31e:	cf 91       	pop	r28
 320:	08 95       	ret

00000322 <main>:
#include <util/delay.h>
#include "lcd.h" // lcd header file made by Peter Fleury

int 
main(void)
{
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	cd b7       	in	r28, 0x3d	; 61
 328:	de b7       	in	r29, 0x3e	; 62
 32a:	60 97       	sbiw	r28, 0x10	; 16
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	f8 94       	cli
 330:	de bf       	out	0x3e, r29	; 62
 332:	0f be       	out	0x3f, r0	; 63
 334:	cd bf       	out	0x3d, r28	; 61
    /* initialize display, cursor off */
    lcd_init(LCD_DISP_ON);
 336:	8c e0       	ldi	r24, 0x0C	; 12
 338:	0e 94 41 01 	call	0x282	; 0x282 <lcd_init>
    
    // lets create a test number (int) and convert it to char array
    int16_t test_number = 1023;
    char test_char_array[16]; // 16-bit array, assumes that the int given is 16-bits
    itoa(test_number, test_char_array, 10);
 33c:	4a e0       	ldi	r20, 0x0A	; 10
 33e:	50 e0       	ldi	r21, 0x00	; 0
 340:	be 01       	movw	r22, r28
 342:	6f 5f       	subi	r22, 0xFF	; 255
 344:	7f 4f       	sbci	r23, 0xFF	; 255
 346:	8f ef       	ldi	r24, 0xFF	; 255
 348:	93 e0       	ldi	r25, 0x03	; 3
 34a:	0e 94 b6 01 	call	0x36c	; 0x36c <itoa>

    /* clear display */
    lcd_clrscr();
 34e:	0e 94 19 01 	call	0x232	; 0x232 <lcd_clrscr>
    /* print string */
    lcd_puts("Hello World!");
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	0e 94 32 01 	call	0x264	; 0x264 <lcd_puts>
        
    /* move cursor to position second line and print test number */
    lcd_gotoxy(0,1);
 35a:	61 e0       	ldi	r22, 0x01	; 1
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_gotoxy>
    lcd_puts(test_char_array);
 362:	ce 01       	movw	r24, r28
 364:	01 96       	adiw	r24, 0x01	; 1
 366:	0e 94 32 01 	call	0x264	; 0x264 <lcd_puts>
 36a:	ff cf       	rjmp	.-2      	; 0x36a <main+0x48>

0000036c <itoa>:
 36c:	45 32       	cpi	r20, 0x25	; 37
 36e:	51 05       	cpc	r21, r1
 370:	20 f4       	brcc	.+8      	; 0x37a <itoa+0xe>
 372:	42 30       	cpi	r20, 0x02	; 2
 374:	10 f0       	brcs	.+4      	; 0x37a <itoa+0xe>
 376:	0c 94 c1 01 	jmp	0x382	; 0x382 <__itoa_ncheck>
 37a:	fb 01       	movw	r30, r22
 37c:	10 82       	st	Z, r1
 37e:	cb 01       	movw	r24, r22
 380:	08 95       	ret

00000382 <__itoa_ncheck>:
 382:	bb 27       	eor	r27, r27
 384:	4a 30       	cpi	r20, 0x0A	; 10
 386:	31 f4       	brne	.+12     	; 0x394 <__itoa_ncheck+0x12>
 388:	99 23       	and	r25, r25
 38a:	22 f4       	brpl	.+8      	; 0x394 <__itoa_ncheck+0x12>
 38c:	bd e2       	ldi	r27, 0x2D	; 45
 38e:	90 95       	com	r25
 390:	81 95       	neg	r24
 392:	9f 4f       	sbci	r25, 0xFF	; 255
 394:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__utoa_common>

00000398 <__utoa_ncheck>:
 398:	bb 27       	eor	r27, r27

0000039a <__utoa_common>:
 39a:	fb 01       	movw	r30, r22
 39c:	55 27       	eor	r21, r21
 39e:	aa 27       	eor	r26, r26
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	aa 1f       	adc	r26, r26
 3a6:	a4 17       	cp	r26, r20
 3a8:	10 f0       	brcs	.+4      	; 0x3ae <__utoa_common+0x14>
 3aa:	a4 1b       	sub	r26, r20
 3ac:	83 95       	inc	r24
 3ae:	50 51       	subi	r21, 0x10	; 16
 3b0:	b9 f7       	brne	.-18     	; 0x3a0 <__utoa_common+0x6>
 3b2:	a0 5d       	subi	r26, 0xD0	; 208
 3b4:	aa 33       	cpi	r26, 0x3A	; 58
 3b6:	08 f0       	brcs	.+2      	; 0x3ba <__utoa_common+0x20>
 3b8:	a9 5d       	subi	r26, 0xD9	; 217
 3ba:	a1 93       	st	Z+, r26
 3bc:	00 97       	sbiw	r24, 0x00	; 0
 3be:	79 f7       	brne	.-34     	; 0x39e <__utoa_common+0x4>
 3c0:	b1 11       	cpse	r27, r1
 3c2:	b1 93       	st	Z+, r27
 3c4:	11 92       	st	Z+, r1
 3c6:	cb 01       	movw	r24, r22
 3c8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <strrev>

000003cc <strrev>:
 3cc:	dc 01       	movw	r26, r24
 3ce:	fc 01       	movw	r30, r24
 3d0:	67 2f       	mov	r22, r23
 3d2:	71 91       	ld	r23, Z+
 3d4:	77 23       	and	r23, r23
 3d6:	e1 f7       	brne	.-8      	; 0x3d0 <strrev+0x4>
 3d8:	32 97       	sbiw	r30, 0x02	; 2
 3da:	04 c0       	rjmp	.+8      	; 0x3e4 <strrev+0x18>
 3dc:	7c 91       	ld	r23, X
 3de:	6d 93       	st	X+, r22
 3e0:	70 83       	st	Z, r23
 3e2:	62 91       	ld	r22, -Z
 3e4:	ae 17       	cp	r26, r30
 3e6:	bf 07       	cpc	r27, r31
 3e8:	c8 f3       	brcs	.-14     	; 0x3dc <strrev+0x10>
 3ea:	08 95       	ret

000003ec <_exit>:
 3ec:	f8 94       	cli

000003ee <__stop_program>:
 3ee:	ff cf       	rjmp	.-2      	; 0x3ee <__stop_program>
