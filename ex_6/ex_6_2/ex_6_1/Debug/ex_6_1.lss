
ex_6_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800200  0000048c  00000500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000048c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000050e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000540  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001501  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e81  00000000  00000000  00001b29  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000852  00000000  00000000  000029aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  000031fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006b9  00000000  00000000  0000336c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006ba  00000000  00000000  00003a25  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  000040df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e8       	ldi	r30, 0x8C	; 140
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 30       	cpi	r26, 0x0E	; 14
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	60 d1       	rcall	.+704    	; 0x3d0 <main>
 110:	bb c1       	rjmp	.+886    	; 0x488 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 114:	85 b1       	in	r24, 0x05	; 5
 116:	80 68       	ori	r24, 0x80	; 128
 118:	85 b9       	out	0x05, r24	; 5
 11a:	00 00       	nop
 11c:	85 b1       	in	r24, 0x05	; 5
 11e:	8f 77       	andi	r24, 0x7F	; 127
 120:	85 b9       	out	0x05, r24	; 5
 122:	08 95       	ret

00000124 <lcd_write>:
 124:	cf 93       	push	r28
 126:	c8 2f       	mov	r28, r24
 128:	66 23       	and	r22, r22
 12a:	21 f0       	breq	.+8      	; 0x134 <lcd_write+0x10>
 12c:	85 b1       	in	r24, 0x05	; 5
 12e:	80 62       	ori	r24, 0x20	; 32
 130:	85 b9       	out	0x05, r24	; 5
 132:	03 c0       	rjmp	.+6      	; 0x13a <lcd_write+0x16>
 134:	85 b1       	in	r24, 0x05	; 5
 136:	8f 7d       	andi	r24, 0xDF	; 223
 138:	85 b9       	out	0x05, r24	; 5
 13a:	85 b1       	in	r24, 0x05	; 5
 13c:	8f 7b       	andi	r24, 0xBF	; 191
 13e:	85 b9       	out	0x05, r24	; 5
 140:	e1 e0       	ldi	r30, 0x01	; 1
 142:	f1 e0       	ldi	r31, 0x01	; 1
 144:	80 81       	ld	r24, Z
 146:	88 60       	ori	r24, 0x08	; 8
 148:	80 83       	st	Z, r24
 14a:	80 81       	ld	r24, Z
 14c:	80 61       	ori	r24, 0x10	; 16
 14e:	80 83       	st	Z, r24
 150:	80 81       	ld	r24, Z
 152:	80 62       	ori	r24, 0x20	; 32
 154:	80 83       	st	Z, r24
 156:	80 81       	ld	r24, Z
 158:	80 64       	ori	r24, 0x40	; 64
 15a:	80 83       	st	Z, r24
 15c:	e2 e0       	ldi	r30, 0x02	; 2
 15e:	f1 e0       	ldi	r31, 0x01	; 1
 160:	80 81       	ld	r24, Z
 162:	8f 7b       	andi	r24, 0xBF	; 191
 164:	80 83       	st	Z, r24
 166:	80 81       	ld	r24, Z
 168:	8f 7d       	andi	r24, 0xDF	; 223
 16a:	80 83       	st	Z, r24
 16c:	80 81       	ld	r24, Z
 16e:	8f 7e       	andi	r24, 0xEF	; 239
 170:	80 83       	st	Z, r24
 172:	80 81       	ld	r24, Z
 174:	87 7f       	andi	r24, 0xF7	; 247
 176:	80 83       	st	Z, r24
 178:	cc 23       	and	r28, r28
 17a:	1c f4       	brge	.+6      	; 0x182 <lcd_write+0x5e>
 17c:	80 81       	ld	r24, Z
 17e:	80 64       	ori	r24, 0x40	; 64
 180:	80 83       	st	Z, r24
 182:	c6 ff       	sbrs	r28, 6
 184:	05 c0       	rjmp	.+10     	; 0x190 <lcd_write+0x6c>
 186:	e2 e0       	ldi	r30, 0x02	; 2
 188:	f1 e0       	ldi	r31, 0x01	; 1
 18a:	80 81       	ld	r24, Z
 18c:	80 62       	ori	r24, 0x20	; 32
 18e:	80 83       	st	Z, r24
 190:	c5 ff       	sbrs	r28, 5
 192:	05 c0       	rjmp	.+10     	; 0x19e <lcd_write+0x7a>
 194:	e2 e0       	ldi	r30, 0x02	; 2
 196:	f1 e0       	ldi	r31, 0x01	; 1
 198:	80 81       	ld	r24, Z
 19a:	80 61       	ori	r24, 0x10	; 16
 19c:	80 83       	st	Z, r24
 19e:	c4 ff       	sbrs	r28, 4
 1a0:	05 c0       	rjmp	.+10     	; 0x1ac <lcd_write+0x88>
 1a2:	e2 e0       	ldi	r30, 0x02	; 2
 1a4:	f1 e0       	ldi	r31, 0x01	; 1
 1a6:	80 81       	ld	r24, Z
 1a8:	88 60       	ori	r24, 0x08	; 8
 1aa:	80 83       	st	Z, r24
 1ac:	b3 df       	rcall	.-154    	; 0x114 <toggle_e>
 1ae:	e2 e0       	ldi	r30, 0x02	; 2
 1b0:	f1 e0       	ldi	r31, 0x01	; 1
 1b2:	80 81       	ld	r24, Z
 1b4:	8f 7b       	andi	r24, 0xBF	; 191
 1b6:	80 83       	st	Z, r24
 1b8:	80 81       	ld	r24, Z
 1ba:	8f 7d       	andi	r24, 0xDF	; 223
 1bc:	80 83       	st	Z, r24
 1be:	80 81       	ld	r24, Z
 1c0:	8f 7e       	andi	r24, 0xEF	; 239
 1c2:	80 83       	st	Z, r24
 1c4:	80 81       	ld	r24, Z
 1c6:	87 7f       	andi	r24, 0xF7	; 247
 1c8:	80 83       	st	Z, r24
 1ca:	c3 ff       	sbrs	r28, 3
 1cc:	03 c0       	rjmp	.+6      	; 0x1d4 <lcd_write+0xb0>
 1ce:	80 81       	ld	r24, Z
 1d0:	80 64       	ori	r24, 0x40	; 64
 1d2:	80 83       	st	Z, r24
 1d4:	c2 ff       	sbrs	r28, 2
 1d6:	05 c0       	rjmp	.+10     	; 0x1e2 <lcd_write+0xbe>
 1d8:	e2 e0       	ldi	r30, 0x02	; 2
 1da:	f1 e0       	ldi	r31, 0x01	; 1
 1dc:	80 81       	ld	r24, Z
 1de:	80 62       	ori	r24, 0x20	; 32
 1e0:	80 83       	st	Z, r24
 1e2:	c1 ff       	sbrs	r28, 1
 1e4:	05 c0       	rjmp	.+10     	; 0x1f0 <lcd_write+0xcc>
 1e6:	e2 e0       	ldi	r30, 0x02	; 2
 1e8:	f1 e0       	ldi	r31, 0x01	; 1
 1ea:	80 81       	ld	r24, Z
 1ec:	80 61       	ori	r24, 0x10	; 16
 1ee:	80 83       	st	Z, r24
 1f0:	c0 ff       	sbrs	r28, 0
 1f2:	05 c0       	rjmp	.+10     	; 0x1fe <lcd_write+0xda>
 1f4:	e2 e0       	ldi	r30, 0x02	; 2
 1f6:	f1 e0       	ldi	r31, 0x01	; 1
 1f8:	80 81       	ld	r24, Z
 1fa:	88 60       	ori	r24, 0x08	; 8
 1fc:	80 83       	st	Z, r24
 1fe:	8a df       	rcall	.-236    	; 0x114 <toggle_e>
 200:	e2 e0       	ldi	r30, 0x02	; 2
 202:	f1 e0       	ldi	r31, 0x01	; 1
 204:	80 81       	ld	r24, Z
 206:	88 60       	ori	r24, 0x08	; 8
 208:	80 83       	st	Z, r24
 20a:	80 81       	ld	r24, Z
 20c:	80 61       	ori	r24, 0x10	; 16
 20e:	80 83       	st	Z, r24
 210:	80 81       	ld	r24, Z
 212:	80 62       	ori	r24, 0x20	; 32
 214:	80 83       	st	Z, r24
 216:	80 81       	ld	r24, Z
 218:	80 64       	ori	r24, 0x40	; 64
 21a:	80 83       	st	Z, r24
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <lcd_read>:
 220:	88 23       	and	r24, r24
 222:	21 f0       	breq	.+8      	; 0x22c <lcd_read+0xc>
 224:	85 b1       	in	r24, 0x05	; 5
 226:	80 62       	ori	r24, 0x20	; 32
 228:	85 b9       	out	0x05, r24	; 5
 22a:	03 c0       	rjmp	.+6      	; 0x232 <lcd_read+0x12>
 22c:	85 b1       	in	r24, 0x05	; 5
 22e:	8f 7d       	andi	r24, 0xDF	; 223
 230:	85 b9       	out	0x05, r24	; 5
 232:	85 b1       	in	r24, 0x05	; 5
 234:	80 64       	ori	r24, 0x40	; 64
 236:	85 b9       	out	0x05, r24	; 5
 238:	e1 e0       	ldi	r30, 0x01	; 1
 23a:	f1 e0       	ldi	r31, 0x01	; 1
 23c:	80 81       	ld	r24, Z
 23e:	87 7f       	andi	r24, 0xF7	; 247
 240:	80 83       	st	Z, r24
 242:	80 81       	ld	r24, Z
 244:	8f 7e       	andi	r24, 0xEF	; 239
 246:	80 83       	st	Z, r24
 248:	80 81       	ld	r24, Z
 24a:	8f 7d       	andi	r24, 0xDF	; 223
 24c:	80 83       	st	Z, r24
 24e:	80 81       	ld	r24, Z
 250:	8f 7b       	andi	r24, 0xBF	; 191
 252:	80 83       	st	Z, r24
 254:	85 b1       	in	r24, 0x05	; 5
 256:	80 68       	ori	r24, 0x80	; 128
 258:	85 b9       	out	0x05, r24	; 5
 25a:	00 00       	nop
 25c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
 260:	83 fd       	sbrc	r24, 3
 262:	02 c0       	rjmp	.+4      	; 0x268 <lcd_read+0x48>
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	01 c0       	rjmp	.+2      	; 0x26a <lcd_read+0x4a>
 268:	80 e1       	ldi	r24, 0x10	; 16
 26a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
 26e:	94 fd       	sbrc	r25, 4
 270:	80 62       	ori	r24, 0x20	; 32
 272:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
 276:	95 fd       	sbrc	r25, 5
 278:	80 64       	ori	r24, 0x40	; 64
 27a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
 27e:	96 fd       	sbrc	r25, 6
 280:	80 68       	ori	r24, 0x80	; 128
 282:	95 b1       	in	r25, 0x05	; 5
 284:	9f 77       	andi	r25, 0x7F	; 127
 286:	95 b9       	out	0x05, r25	; 5
 288:	00 00       	nop
 28a:	95 b1       	in	r25, 0x05	; 5
 28c:	90 68       	ori	r25, 0x80	; 128
 28e:	95 b9       	out	0x05, r25	; 5
 290:	00 00       	nop
 292:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
 296:	93 fd       	sbrc	r25, 3
 298:	81 60       	ori	r24, 0x01	; 1
 29a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
 29e:	94 fd       	sbrc	r25, 4
 2a0:	82 60       	ori	r24, 0x02	; 2
 2a2:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
 2a6:	95 fd       	sbrc	r25, 5
 2a8:	84 60       	ori	r24, 0x04	; 4
 2aa:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
 2ae:	96 fd       	sbrc	r25, 6
 2b0:	88 60       	ori	r24, 0x08	; 8
 2b2:	95 b1       	in	r25, 0x05	; 5
 2b4:	9f 77       	andi	r25, 0x7F	; 127
 2b6:	95 b9       	out	0x05, r25	; 5
 2b8:	08 95       	ret

000002ba <lcd_waitbusy>:
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	b1 df       	rcall	.-158    	; 0x220 <lcd_read>
 2be:	88 23       	and	r24, r24
 2c0:	e4 f3       	brlt	.-8      	; 0x2ba <lcd_waitbusy>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <lcd_waitbusy+0xa>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <lcd_waitbusy+0xc>
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	ab cf       	rjmp	.-170    	; 0x220 <lcd_read>
 2ca:	08 95       	ret

000002cc <lcd_command>:
 2cc:	cf 93       	push	r28
 2ce:	c8 2f       	mov	r28, r24
 2d0:	f4 df       	rcall	.-24     	; 0x2ba <lcd_waitbusy>
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	8c 2f       	mov	r24, r28
 2d6:	26 df       	rcall	.-436    	; 0x124 <lcd_write>
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <lcd_gotoxy>:
 2dc:	61 11       	cpse	r22, r1
 2de:	03 c0       	rjmp	.+6      	; 0x2e6 <lcd_gotoxy+0xa>
 2e0:	80 58       	subi	r24, 0x80	; 128
 2e2:	f4 cf       	rjmp	.-24     	; 0x2cc <lcd_command>
 2e4:	08 95       	ret
 2e6:	80 54       	subi	r24, 0x40	; 64
 2e8:	f1 cf       	rjmp	.-30     	; 0x2cc <lcd_command>
 2ea:	08 95       	ret

000002ec <lcd_clrscr>:
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	ee cf       	rjmp	.-36     	; 0x2cc <lcd_command>
 2f0:	08 95       	ret

000002f2 <lcd_putc>:
 2f2:	cf 93       	push	r28
 2f4:	c8 2f       	mov	r28, r24
 2f6:	e1 df       	rcall	.-62     	; 0x2ba <lcd_waitbusy>
 2f8:	ca 30       	cpi	r28, 0x0A	; 10
 2fa:	41 f4       	brne	.+16     	; 0x30c <lcd_putc+0x1a>
 2fc:	80 34       	cpi	r24, 0x40	; 64
 2fe:	10 f4       	brcc	.+4      	; 0x304 <lcd_putc+0x12>
 300:	80 e4       	ldi	r24, 0x40	; 64
 302:	01 c0       	rjmp	.+2      	; 0x306 <lcd_putc+0x14>
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	80 58       	subi	r24, 0x80	; 128
 308:	e1 df       	rcall	.-62     	; 0x2cc <lcd_command>
 30a:	03 c0       	rjmp	.+6      	; 0x312 <lcd_putc+0x20>
 30c:	61 e0       	ldi	r22, 0x01	; 1
 30e:	8c 2f       	mov	r24, r28
 310:	09 df       	rcall	.-494    	; 0x124 <lcd_write>
 312:	cf 91       	pop	r28
 314:	08 95       	ret

00000316 <lcd_puts>:
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	fc 01       	movw	r30, r24
 31c:	02 c0       	rjmp	.+4      	; 0x322 <lcd_puts+0xc>
 31e:	e9 df       	rcall	.-46     	; 0x2f2 <lcd_putc>
 320:	fe 01       	movw	r30, r28
 322:	ef 01       	movw	r28, r30
 324:	21 96       	adiw	r28, 0x01	; 1
 326:	80 81       	ld	r24, Z
 328:	81 11       	cpse	r24, r1
 32a:	f9 cf       	rjmp	.-14     	; 0x31e <lcd_puts+0x8>
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	08 95       	ret

00000332 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 332:	1f 93       	push	r17
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 33a:	84 b1       	in	r24, 0x04	; 4
 33c:	80 62       	ori	r24, 0x20	; 32
 33e:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 340:	84 b1       	in	r24, 0x04	; 4
 342:	80 64       	ori	r24, 0x40	; 64
 344:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 346:	84 b1       	in	r24, 0x04	; 4
 348:	80 68       	ori	r24, 0x80	; 128
 34a:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 34c:	e1 e0       	ldi	r30, 0x01	; 1
 34e:	f1 e0       	ldi	r31, 0x01	; 1
 350:	80 81       	ld	r24, Z
 352:	88 60       	ori	r24, 0x08	; 8
 354:	80 83       	st	Z, r24
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 356:	80 81       	ld	r24, Z
 358:	80 61       	ori	r24, 0x10	; 16
 35a:	80 83       	st	Z, r24
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 35c:	80 81       	ld	r24, Z
 35e:	80 62       	ori	r24, 0x20	; 32
 360:	80 83       	st	Z, r24
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 362:	80 81       	ld	r24, Z
 364:	80 64       	ori	r24, 0x40	; 64
 366:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 368:	8f e9       	ldi	r24, 0x9F	; 159
 36a:	9f e0       	ldi	r25, 0x0F	; 15
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <lcd_init+0x3a>
 370:	00 c0       	rjmp	.+0      	; 0x372 <lcd_init+0x40>
 372:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 374:	c2 e0       	ldi	r28, 0x02	; 2
 376:	d1 e0       	ldi	r29, 0x01	; 1
 378:	88 81       	ld	r24, Y
 37a:	80 61       	ori	r24, 0x10	; 16
 37c:	88 83       	st	Y, r24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 37e:	88 81       	ld	r24, Y
 380:	88 60       	ori	r24, 0x08	; 8
 382:	88 83       	st	Y, r24
    lcd_e_toggle();
 384:	c7 de       	rcall	.-626    	; 0x114 <toggle_e>
 386:	81 ee       	ldi	r24, 0xE1	; 225
 388:	94 e0       	ldi	r25, 0x04	; 4
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <lcd_init+0x58>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <lcd_init+0x5e>
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 390:	00 00       	nop
 392:	c0 de       	rcall	.-640    	; 0x114 <toggle_e>
 394:	95 e1       	ldi	r25, 0x15	; 21
 396:	9a 95       	dec	r25
 398:	f1 f7       	brne	.-4      	; 0x396 <lcd_init+0x64>
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 39a:	00 00       	nop
 39c:	bb de       	rcall	.-650    	; 0x114 <toggle_e>
 39e:	85 e1       	ldi	r24, 0x15	; 21
 3a0:	8a 95       	dec	r24
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <lcd_init+0x6e>
 3a4:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 3a6:	88 81       	ld	r24, Y
 3a8:	87 7f       	andi	r24, 0xF7	; 247
    lcd_e_toggle();
 3aa:	88 83       	st	Y, r24
 3ac:	b3 de       	rcall	.-666    	; 0x114 <toggle_e>
 3ae:	95 e1       	ldi	r25, 0x15	; 21
 3b0:	9a 95       	dec	r25
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <lcd_init+0x7e>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 3b4:	00 00       	nop
 3b6:	88 e2       	ldi	r24, 0x28	; 40
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 3b8:	89 df       	rcall	.-238    	; 0x2cc <lcd_command>
 3ba:	88 e0       	ldi	r24, 0x08	; 8
    lcd_clrscr();                           /* display clear                */ 
 3bc:	87 df       	rcall	.-242    	; 0x2cc <lcd_command>
 3be:	96 df       	rcall	.-212    	; 0x2ec <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 3c0:	86 e0       	ldi	r24, 0x06	; 6
 3c2:	84 df       	rcall	.-248    	; 0x2cc <lcd_command>
 3c4:	81 2f       	mov	r24, r17
    lcd_command(dispAttr);                  /* display/cursor control       */
 3c6:	82 df       	rcall	.-252    	; 0x2cc <lcd_command>
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28

}/* lcd_init */
 3cc:	1f 91       	pop	r17
 3ce:	08 95       	ret

000003d0 <main>:
#include <util/delay.h>
#include "lcd.h" // lcd header file made by Peter Fleury

int
main(void)
{
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	cd b7       	in	r28, 0x3d	; 61
 3d6:	de b7       	in	r29, 0x3e	; 62
 3d8:	60 97       	sbiw	r28, 0x10	; 16
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	f8 94       	cli
 3de:	de bf       	out	0x3e, r29	; 62
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	cd bf       	out	0x3d, r28	; 61
    /* initialize display, cursor off */
    lcd_init(LCD_DISP_ON);
 3e4:	8c e0       	ldi	r24, 0x0C	; 12
 3e6:	a5 df       	rcall	.-182    	; 0x332 <lcd_init>
    
    // let's create a test number (int) and convert it to char array
    int16_t test_number = 1923;
    char test_char_array[16]; // 16-bit array, assumes that the int given is 16-bits
    itoa(test_number, test_char_array, 10);
 3e8:	4a e0       	ldi	r20, 0x0A	; 10
 3ea:	50 e0       	ldi	r21, 0x00	; 0
 3ec:	be 01       	movw	r22, r28
 3ee:	6f 5f       	subi	r22, 0xFF	; 255
 3f0:	7f 4f       	sbci	r23, 0xFF	; 255
 3f2:	83 e8       	ldi	r24, 0x83	; 131
 3f4:	97 e0       	ldi	r25, 0x07	; 7

    /* clear display */
    lcd_clrscr();
 3f6:	0b d0       	rcall	.+22     	; 0x40e <itoa>
    /* print string */
    lcd_puts("Hello World!");
 3f8:	79 df       	rcall	.-270    	; 0x2ec <lcd_clrscr>
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	92 e0       	ldi	r25, 0x02	; 2
    
    /* move cursor to position second line and print test number */
    lcd_gotoxy(0,1);
 3fe:	8b df       	rcall	.-234    	; 0x316 <lcd_puts>
 400:	61 e0       	ldi	r22, 0x01	; 1
 402:	80 e0       	ldi	r24, 0x00	; 0
    lcd_puts(test_char_array);
 404:	6b df       	rcall	.-298    	; 0x2dc <lcd_gotoxy>
 406:	ce 01       	movw	r24, r28
 408:	01 96       	adiw	r24, 0x01	; 1
 40a:	85 df       	rcall	.-246    	; 0x316 <lcd_puts>
 40c:	ff cf       	rjmp	.-2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>

0000040e <itoa>:
 40e:	45 32       	cpi	r20, 0x25	; 37
 410:	51 05       	cpc	r21, r1
 412:	18 f4       	brcc	.+6      	; 0x41a <itoa+0xc>
 414:	42 30       	cpi	r20, 0x02	; 2
 416:	08 f0       	brcs	.+2      	; 0x41a <itoa+0xc>
 418:	04 c0       	rjmp	.+8      	; 0x422 <__itoa_ncheck>
 41a:	fb 01       	movw	r30, r22
 41c:	10 82       	st	Z, r1
 41e:	cb 01       	movw	r24, r22
 420:	08 95       	ret

00000422 <__itoa_ncheck>:
 422:	bb 27       	eor	r27, r27
 424:	4a 30       	cpi	r20, 0x0A	; 10
 426:	31 f4       	brne	.+12     	; 0x434 <__itoa_ncheck+0x12>
 428:	99 23       	and	r25, r25
 42a:	22 f4       	brpl	.+8      	; 0x434 <__itoa_ncheck+0x12>
 42c:	bd e2       	ldi	r27, 0x2D	; 45
 42e:	90 95       	com	r25
 430:	81 95       	neg	r24
 432:	9f 4f       	sbci	r25, 0xFF	; 255
 434:	01 c0       	rjmp	.+2      	; 0x438 <__utoa_common>

00000436 <__utoa_ncheck>:
 436:	bb 27       	eor	r27, r27

00000438 <__utoa_common>:
 438:	fb 01       	movw	r30, r22
 43a:	55 27       	eor	r21, r21
 43c:	aa 27       	eor	r26, r26
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	aa 1f       	adc	r26, r26
 444:	a4 17       	cp	r26, r20
 446:	10 f0       	brcs	.+4      	; 0x44c <__utoa_common+0x14>
 448:	a4 1b       	sub	r26, r20
 44a:	83 95       	inc	r24
 44c:	50 51       	subi	r21, 0x10	; 16
 44e:	b9 f7       	brne	.-18     	; 0x43e <__utoa_common+0x6>
 450:	a0 5d       	subi	r26, 0xD0	; 208
 452:	aa 33       	cpi	r26, 0x3A	; 58
 454:	08 f0       	brcs	.+2      	; 0x458 <__utoa_common+0x20>
 456:	a9 5d       	subi	r26, 0xD9	; 217
 458:	a1 93       	st	Z+, r26
 45a:	00 97       	sbiw	r24, 0x00	; 0
 45c:	79 f7       	brne	.-34     	; 0x43c <__utoa_common+0x4>
 45e:	b1 11       	cpse	r27, r1
 460:	b1 93       	st	Z+, r27
 462:	11 92       	st	Z+, r1
 464:	cb 01       	movw	r24, r22
 466:	00 c0       	rjmp	.+0      	; 0x468 <strrev>

00000468 <strrev>:
 468:	dc 01       	movw	r26, r24
 46a:	fc 01       	movw	r30, r24
 46c:	67 2f       	mov	r22, r23
 46e:	71 91       	ld	r23, Z+
 470:	77 23       	and	r23, r23
 472:	e1 f7       	brne	.-8      	; 0x46c <strrev+0x4>
 474:	32 97       	sbiw	r30, 0x02	; 2
 476:	04 c0       	rjmp	.+8      	; 0x480 <strrev+0x18>
 478:	7c 91       	ld	r23, X
 47a:	6d 93       	st	X+, r22
 47c:	70 83       	st	Z, r23
 47e:	62 91       	ld	r22, -Z
 480:	ae 17       	cp	r26, r30
 482:	bf 07       	cpc	r27, r31
 484:	c8 f3       	brcs	.-14     	; 0x478 <strrev+0x10>
 486:	08 95       	ret

00000488 <_exit>:
 488:	f8 94       	cli

0000048a <__stop_program>:
 48a:	ff cf       	rjmp	.-2      	; 0x48a <__stop_program>
