
ProjectMega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800200  0000048e  00000522  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000048e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800258  00800258  0000057a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000057a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015b7  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ed0  00000000  00000000  00001c53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000097d  00000000  00000000  00002b23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  000034a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b9  00000000  00000000  00003610  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006e1  00000000  00000000  00003cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000043aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e8       	ldi	r30, 0x8E	; 142
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 35       	cpi	r26, 0x58	; 88
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e5       	ldi	r26, 0x58	; 88
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a9 35       	cpi	r26, 0x59	; 89
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	63 d1       	rcall	.+710    	; 0x3e6 <main>
 120:	b4 c1       	rjmp	.+872    	; 0x48a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 124:	85 b1       	in	r24, 0x05	; 5
 126:	80 68       	ori	r24, 0x80	; 128
 128:	85 b9       	out	0x05, r24	; 5
 12a:	00 00       	nop
 12c:	85 b1       	in	r24, 0x05	; 5
 12e:	8f 77       	andi	r24, 0x7F	; 127
 130:	85 b9       	out	0x05, r24	; 5
 132:	08 95       	ret

00000134 <lcd_write>:
 134:	cf 93       	push	r28
 136:	c8 2f       	mov	r28, r24
 138:	66 23       	and	r22, r22
 13a:	21 f0       	breq	.+8      	; 0x144 <lcd_write+0x10>
 13c:	85 b1       	in	r24, 0x05	; 5
 13e:	80 62       	ori	r24, 0x20	; 32
 140:	85 b9       	out	0x05, r24	; 5
 142:	03 c0       	rjmp	.+6      	; 0x14a <lcd_write+0x16>
 144:	85 b1       	in	r24, 0x05	; 5
 146:	8f 7d       	andi	r24, 0xDF	; 223
 148:	85 b9       	out	0x05, r24	; 5
 14a:	85 b1       	in	r24, 0x05	; 5
 14c:	8f 7b       	andi	r24, 0xBF	; 191
 14e:	85 b9       	out	0x05, r24	; 5
 150:	e1 e0       	ldi	r30, 0x01	; 1
 152:	f1 e0       	ldi	r31, 0x01	; 1
 154:	80 81       	ld	r24, Z
 156:	88 60       	ori	r24, 0x08	; 8
 158:	80 83       	st	Z, r24
 15a:	80 81       	ld	r24, Z
 15c:	80 61       	ori	r24, 0x10	; 16
 15e:	80 83       	st	Z, r24
 160:	80 81       	ld	r24, Z
 162:	80 62       	ori	r24, 0x20	; 32
 164:	80 83       	st	Z, r24
 166:	80 81       	ld	r24, Z
 168:	80 64       	ori	r24, 0x40	; 64
 16a:	80 83       	st	Z, r24
 16c:	e2 e0       	ldi	r30, 0x02	; 2
 16e:	f1 e0       	ldi	r31, 0x01	; 1
 170:	80 81       	ld	r24, Z
 172:	8f 7b       	andi	r24, 0xBF	; 191
 174:	80 83       	st	Z, r24
 176:	80 81       	ld	r24, Z
 178:	8f 7d       	andi	r24, 0xDF	; 223
 17a:	80 83       	st	Z, r24
 17c:	80 81       	ld	r24, Z
 17e:	8f 7e       	andi	r24, 0xEF	; 239
 180:	80 83       	st	Z, r24
 182:	80 81       	ld	r24, Z
 184:	87 7f       	andi	r24, 0xF7	; 247
 186:	80 83       	st	Z, r24
 188:	cc 23       	and	r28, r28
 18a:	1c f4       	brge	.+6      	; 0x192 <lcd_write+0x5e>
 18c:	80 81       	ld	r24, Z
 18e:	80 64       	ori	r24, 0x40	; 64
 190:	80 83       	st	Z, r24
 192:	c6 ff       	sbrs	r28, 6
 194:	05 c0       	rjmp	.+10     	; 0x1a0 <lcd_write+0x6c>
 196:	e2 e0       	ldi	r30, 0x02	; 2
 198:	f1 e0       	ldi	r31, 0x01	; 1
 19a:	80 81       	ld	r24, Z
 19c:	80 62       	ori	r24, 0x20	; 32
 19e:	80 83       	st	Z, r24
 1a0:	c5 ff       	sbrs	r28, 5
 1a2:	05 c0       	rjmp	.+10     	; 0x1ae <lcd_write+0x7a>
 1a4:	e2 e0       	ldi	r30, 0x02	; 2
 1a6:	f1 e0       	ldi	r31, 0x01	; 1
 1a8:	80 81       	ld	r24, Z
 1aa:	80 61       	ori	r24, 0x10	; 16
 1ac:	80 83       	st	Z, r24
 1ae:	c4 ff       	sbrs	r28, 4
 1b0:	05 c0       	rjmp	.+10     	; 0x1bc <lcd_write+0x88>
 1b2:	e2 e0       	ldi	r30, 0x02	; 2
 1b4:	f1 e0       	ldi	r31, 0x01	; 1
 1b6:	80 81       	ld	r24, Z
 1b8:	88 60       	ori	r24, 0x08	; 8
 1ba:	80 83       	st	Z, r24
 1bc:	b3 df       	rcall	.-154    	; 0x124 <toggle_e>
 1be:	e2 e0       	ldi	r30, 0x02	; 2
 1c0:	f1 e0       	ldi	r31, 0x01	; 1
 1c2:	80 81       	ld	r24, Z
 1c4:	8f 7b       	andi	r24, 0xBF	; 191
 1c6:	80 83       	st	Z, r24
 1c8:	80 81       	ld	r24, Z
 1ca:	8f 7d       	andi	r24, 0xDF	; 223
 1cc:	80 83       	st	Z, r24
 1ce:	80 81       	ld	r24, Z
 1d0:	8f 7e       	andi	r24, 0xEF	; 239
 1d2:	80 83       	st	Z, r24
 1d4:	80 81       	ld	r24, Z
 1d6:	87 7f       	andi	r24, 0xF7	; 247
 1d8:	80 83       	st	Z, r24
 1da:	c3 ff       	sbrs	r28, 3
 1dc:	03 c0       	rjmp	.+6      	; 0x1e4 <lcd_write+0xb0>
 1de:	80 81       	ld	r24, Z
 1e0:	80 64       	ori	r24, 0x40	; 64
 1e2:	80 83       	st	Z, r24
 1e4:	c2 ff       	sbrs	r28, 2
 1e6:	05 c0       	rjmp	.+10     	; 0x1f2 <lcd_write+0xbe>
 1e8:	e2 e0       	ldi	r30, 0x02	; 2
 1ea:	f1 e0       	ldi	r31, 0x01	; 1
 1ec:	80 81       	ld	r24, Z
 1ee:	80 62       	ori	r24, 0x20	; 32
 1f0:	80 83       	st	Z, r24
 1f2:	c1 ff       	sbrs	r28, 1
 1f4:	05 c0       	rjmp	.+10     	; 0x200 <lcd_write+0xcc>
 1f6:	e2 e0       	ldi	r30, 0x02	; 2
 1f8:	f1 e0       	ldi	r31, 0x01	; 1
 1fa:	80 81       	ld	r24, Z
 1fc:	80 61       	ori	r24, 0x10	; 16
 1fe:	80 83       	st	Z, r24
 200:	c0 ff       	sbrs	r28, 0
 202:	05 c0       	rjmp	.+10     	; 0x20e <lcd_write+0xda>
 204:	e2 e0       	ldi	r30, 0x02	; 2
 206:	f1 e0       	ldi	r31, 0x01	; 1
 208:	80 81       	ld	r24, Z
 20a:	88 60       	ori	r24, 0x08	; 8
 20c:	80 83       	st	Z, r24
 20e:	8a df       	rcall	.-236    	; 0x124 <toggle_e>
 210:	e2 e0       	ldi	r30, 0x02	; 2
 212:	f1 e0       	ldi	r31, 0x01	; 1
 214:	80 81       	ld	r24, Z
 216:	88 60       	ori	r24, 0x08	; 8
 218:	80 83       	st	Z, r24
 21a:	80 81       	ld	r24, Z
 21c:	80 61       	ori	r24, 0x10	; 16
 21e:	80 83       	st	Z, r24
 220:	80 81       	ld	r24, Z
 222:	80 62       	ori	r24, 0x20	; 32
 224:	80 83       	st	Z, r24
 226:	80 81       	ld	r24, Z
 228:	80 64       	ori	r24, 0x40	; 64
 22a:	80 83       	st	Z, r24
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <lcd_read>:
 230:	88 23       	and	r24, r24
 232:	21 f0       	breq	.+8      	; 0x23c <lcd_read+0xc>
 234:	85 b1       	in	r24, 0x05	; 5
 236:	80 62       	ori	r24, 0x20	; 32
 238:	85 b9       	out	0x05, r24	; 5
 23a:	03 c0       	rjmp	.+6      	; 0x242 <lcd_read+0x12>
 23c:	85 b1       	in	r24, 0x05	; 5
 23e:	8f 7d       	andi	r24, 0xDF	; 223
 240:	85 b9       	out	0x05, r24	; 5
 242:	85 b1       	in	r24, 0x05	; 5
 244:	80 64       	ori	r24, 0x40	; 64
 246:	85 b9       	out	0x05, r24	; 5
 248:	e1 e0       	ldi	r30, 0x01	; 1
 24a:	f1 e0       	ldi	r31, 0x01	; 1
 24c:	80 81       	ld	r24, Z
 24e:	87 7f       	andi	r24, 0xF7	; 247
 250:	80 83       	st	Z, r24
 252:	80 81       	ld	r24, Z
 254:	8f 7e       	andi	r24, 0xEF	; 239
 256:	80 83       	st	Z, r24
 258:	80 81       	ld	r24, Z
 25a:	8f 7d       	andi	r24, 0xDF	; 223
 25c:	80 83       	st	Z, r24
 25e:	80 81       	ld	r24, Z
 260:	8f 7b       	andi	r24, 0xBF	; 191
 262:	80 83       	st	Z, r24
 264:	85 b1       	in	r24, 0x05	; 5
 266:	80 68       	ori	r24, 0x80	; 128
 268:	85 b9       	out	0x05, r24	; 5
 26a:	00 00       	nop
 26c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
 270:	83 fd       	sbrc	r24, 3
 272:	02 c0       	rjmp	.+4      	; 0x278 <lcd_read+0x48>
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	01 c0       	rjmp	.+2      	; 0x27a <lcd_read+0x4a>
 278:	80 e1       	ldi	r24, 0x10	; 16
 27a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
 27e:	94 fd       	sbrc	r25, 4
 280:	80 62       	ori	r24, 0x20	; 32
 282:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
 286:	95 fd       	sbrc	r25, 5
 288:	80 64       	ori	r24, 0x40	; 64
 28a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
 28e:	96 fd       	sbrc	r25, 6
 290:	80 68       	ori	r24, 0x80	; 128
 292:	95 b1       	in	r25, 0x05	; 5
 294:	9f 77       	andi	r25, 0x7F	; 127
 296:	95 b9       	out	0x05, r25	; 5
 298:	00 00       	nop
 29a:	95 b1       	in	r25, 0x05	; 5
 29c:	90 68       	ori	r25, 0x80	; 128
 29e:	95 b9       	out	0x05, r25	; 5
 2a0:	00 00       	nop
 2a2:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
 2a6:	93 fd       	sbrc	r25, 3
 2a8:	81 60       	ori	r24, 0x01	; 1
 2aa:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
 2ae:	94 fd       	sbrc	r25, 4
 2b0:	82 60       	ori	r24, 0x02	; 2
 2b2:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
 2b6:	95 fd       	sbrc	r25, 5
 2b8:	84 60       	ori	r24, 0x04	; 4
 2ba:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
 2be:	96 fd       	sbrc	r25, 6
 2c0:	88 60       	ori	r24, 0x08	; 8
 2c2:	95 b1       	in	r25, 0x05	; 5
 2c4:	9f 77       	andi	r25, 0x7F	; 127
 2c6:	95 b9       	out	0x05, r25	; 5
 2c8:	08 95       	ret

000002ca <lcd_waitbusy>:
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	b1 df       	rcall	.-158    	; 0x230 <lcd_read>
 2ce:	88 23       	and	r24, r24
 2d0:	e4 f3       	brlt	.-8      	; 0x2ca <lcd_waitbusy>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <lcd_waitbusy+0xa>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <lcd_waitbusy+0xc>
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	ab cf       	rjmp	.-170    	; 0x230 <lcd_read>
 2da:	08 95       	ret

000002dc <lcd_command>:
 2dc:	cf 93       	push	r28
 2de:	c8 2f       	mov	r28, r24
 2e0:	f4 df       	rcall	.-24     	; 0x2ca <lcd_waitbusy>
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	8c 2f       	mov	r24, r28
 2e6:	26 df       	rcall	.-436    	; 0x134 <lcd_write>
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <lcd_clrscr>:
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	f6 cf       	rjmp	.-20     	; 0x2dc <lcd_command>
 2f0:	08 95       	ret

000002f2 <lcd_putc>:
 2f2:	cf 93       	push	r28
 2f4:	c8 2f       	mov	r28, r24
 2f6:	e9 df       	rcall	.-46     	; 0x2ca <lcd_waitbusy>
 2f8:	ca 30       	cpi	r28, 0x0A	; 10
 2fa:	41 f4       	brne	.+16     	; 0x30c <lcd_putc+0x1a>
 2fc:	80 34       	cpi	r24, 0x40	; 64
 2fe:	10 f4       	brcc	.+4      	; 0x304 <lcd_putc+0x12>
 300:	80 e4       	ldi	r24, 0x40	; 64
 302:	01 c0       	rjmp	.+2      	; 0x306 <lcd_putc+0x14>
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	80 58       	subi	r24, 0x80	; 128
 308:	e9 df       	rcall	.-46     	; 0x2dc <lcd_command>
 30a:	03 c0       	rjmp	.+6      	; 0x312 <lcd_putc+0x20>
 30c:	61 e0       	ldi	r22, 0x01	; 1
 30e:	8c 2f       	mov	r24, r28
 310:	11 df       	rcall	.-478    	; 0x134 <lcd_write>
 312:	cf 91       	pop	r28
 314:	08 95       	ret

00000316 <lcd_puts>:
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	fc 01       	movw	r30, r24
 31c:	02 c0       	rjmp	.+4      	; 0x322 <lcd_puts+0xc>
 31e:	e9 df       	rcall	.-46     	; 0x2f2 <lcd_putc>
 320:	fe 01       	movw	r30, r28
 322:	ef 01       	movw	r28, r30
 324:	21 96       	adiw	r28, 0x01	; 1
 326:	80 81       	ld	r24, Z
 328:	81 11       	cpse	r24, r1
 32a:	f9 cf       	rjmp	.-14     	; 0x31e <lcd_puts+0x8>
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	08 95       	ret

00000332 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 332:	1f 93       	push	r17
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 33a:	84 b1       	in	r24, 0x04	; 4
 33c:	80 62       	ori	r24, 0x20	; 32
 33e:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 340:	84 b1       	in	r24, 0x04	; 4
 342:	80 64       	ori	r24, 0x40	; 64
 344:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 346:	84 b1       	in	r24, 0x04	; 4
 348:	80 68       	ori	r24, 0x80	; 128
 34a:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 34c:	e1 e0       	ldi	r30, 0x01	; 1
 34e:	f1 e0       	ldi	r31, 0x01	; 1
 350:	80 81       	ld	r24, Z
 352:	88 60       	ori	r24, 0x08	; 8
 354:	80 83       	st	Z, r24
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 356:	80 81       	ld	r24, Z
 358:	80 61       	ori	r24, 0x10	; 16
 35a:	80 83       	st	Z, r24
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 35c:	80 81       	ld	r24, Z
 35e:	80 62       	ori	r24, 0x20	; 32
 360:	80 83       	st	Z, r24
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 362:	80 81       	ld	r24, Z
 364:	80 64       	ori	r24, 0x40	; 64
 366:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 368:	8f e9       	ldi	r24, 0x9F	; 159
 36a:	9f e0       	ldi	r25, 0x0F	; 15
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <lcd_init+0x3a>
 370:	00 c0       	rjmp	.+0      	; 0x372 <lcd_init+0x40>
 372:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 374:	c2 e0       	ldi	r28, 0x02	; 2
 376:	d1 e0       	ldi	r29, 0x01	; 1
 378:	88 81       	ld	r24, Y
 37a:	80 61       	ori	r24, 0x10	; 16
 37c:	88 83       	st	Y, r24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 37e:	88 81       	ld	r24, Y
 380:	88 60       	ori	r24, 0x08	; 8
 382:	88 83       	st	Y, r24
    lcd_e_toggle();
 384:	cf de       	rcall	.-610    	; 0x124 <toggle_e>
 386:	81 ee       	ldi	r24, 0xE1	; 225
 388:	94 e0       	ldi	r25, 0x04	; 4
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <lcd_init+0x58>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <lcd_init+0x5e>
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 390:	00 00       	nop
 392:	c8 de       	rcall	.-624    	; 0x124 <toggle_e>
 394:	95 e1       	ldi	r25, 0x15	; 21
 396:	9a 95       	dec	r25
 398:	f1 f7       	brne	.-4      	; 0x396 <lcd_init+0x64>
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 39a:	00 00       	nop
 39c:	c3 de       	rcall	.-634    	; 0x124 <toggle_e>
 39e:	85 e1       	ldi	r24, 0x15	; 21
 3a0:	8a 95       	dec	r24
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <lcd_init+0x6e>
 3a4:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 3a6:	88 81       	ld	r24, Y
 3a8:	87 7f       	andi	r24, 0xF7	; 247
    lcd_e_toggle();
 3aa:	88 83       	st	Y, r24
 3ac:	bb de       	rcall	.-650    	; 0x124 <toggle_e>
 3ae:	95 e1       	ldi	r25, 0x15	; 21
 3b0:	9a 95       	dec	r25
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <lcd_init+0x7e>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 3b4:	00 00       	nop
 3b6:	88 e2       	ldi	r24, 0x28	; 40
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 3b8:	91 df       	rcall	.-222    	; 0x2dc <lcd_command>
 3ba:	88 e0       	ldi	r24, 0x08	; 8
    lcd_clrscr();                           /* display clear                */ 
 3bc:	8f df       	rcall	.-226    	; 0x2dc <lcd_command>
 3be:	96 df       	rcall	.-212    	; 0x2ec <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 3c0:	86 e0       	ldi	r24, 0x06	; 6
 3c2:	8c df       	rcall	.-232    	; 0x2dc <lcd_command>
 3c4:	81 2f       	mov	r24, r17
    lcd_command(dispAttr);                  /* display/cursor control       */
 3c6:	8a df       	rcall	.-236    	; 0x2dc <lcd_command>
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28

}/* lcd_init */
 3cc:	1f 91       	pop	r17
 3ce:	08 95       	ret

000003d0 <USART_init>:
    }
}

void USART_init(unsigned int ubrr) {
    // Set baud rate
    UBRR0H = (unsigned char) (ubrr>>8);
 3d0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
    UBRR0L = (unsigned char) ubrr;
 3d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
    
    // Enable receiver and transmitter
    UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 3d8:	88 e1       	ldi	r24, 0x18	; 24
 3da:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    
    // Set frame format: 8data, 2stop bit
    UCSR0C = (1<<USBS0) | (3<<UCSZ00);
 3de:	8e e0       	ldi	r24, 0x0E	; 14
 3e0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 3e4:	08 95       	ret

000003e6 <main>:
void USART_init(unsigned int ubrr);

int main(void)
{   
    // Set up passive buzzer ports and pins
    DDRE |= (1 << PE3); // OC3A is located in digital pin 5
 3e6:	8d b1       	in	r24, 0x0d	; 13
 3e8:	88 60       	ori	r24, 0x08	; 8
 3ea:	8d b9       	out	0x0d, r24	; 13
    
    // Initialize USART
    USART_init(UBRR);
 3ec:	87 e6       	ldi	r24, 0x67	; 103
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	ef df       	rcall	.-34     	; 0x3d0 <USART_init>
    
    // Enable interrupts
    sei();
 3f2:	78 94       	sei
    
    // initialize display, cursor off
    lcd_init(LCD_DISP_ON);
 3f4:	8c e0       	ldi	r24, 0x0C	; 12
 3f6:	9d df       	rcall	.-198    	; 0x332 <lcd_init>
    
    while (1) 
    {
        // State machine
        switch(state) {
 3f8:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <__data_end>
 3fc:	82 30       	cpi	r24, 0x02	; 2
 3fe:	59 f1       	breq	.+86     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 400:	2c f4       	brge	.+10     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 402:	88 23       	and	r24, r24
 404:	41 f0       	breq	.+16     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 406:	81 30       	cpi	r24, 0x01	; 1
 408:	99 f0       	breq	.+38     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 40a:	3c c0       	rjmp	.+120    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 40c:	83 30       	cpi	r24, 0x03	; 3
 40e:	81 f1       	breq	.+96     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 410:	84 30       	cpi	r24, 0x04	; 4
 412:	99 f1       	breq	.+102    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
            case IDLE:
                // Clear display and print string
                lcd_clrscr();
 414:	37 c0       	rjmp	.+110    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
                lcd_puts("Alarm system on");
 416:	6a df       	rcall	.-300    	; 0x2ec <lcd_clrscr>
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	92 e0       	ldi	r25, 0x02	; 2
 41c:	7c df       	rcall	.-264    	; 0x316 <lcd_puts>
            
                // Wait for data to be received
                while (!(UCSR0A & (1<<RXC0)));
 41e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 422:	88 23       	and	r24, r24
 424:	e4 f7       	brge	.-8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
                
                // Read the received data into state variable
                state = UDR0;
 426:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 42a:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <__data_end>
                break;
                
            case DISARMED:
                lcd_clrscr();
 42e:	e4 cf       	rjmp	.-56     	; 0x3f8 <main+0x12>
                lcd_puts("Disarmed");
 430:	5d df       	rcall	.-326    	; 0x2ec <lcd_clrscr>
 432:	80 e1       	ldi	r24, 0x10	; 16
 434:	92 e0       	ldi	r25, 0x02	; 2
 436:	6f df       	rcall	.-290    	; 0x316 <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 438:	8f e3       	ldi	r24, 0x3F	; 63
 43a:	9c e9       	ldi	r25, 0x9C	; 156
 43c:	01 97       	sbiw	r24, 0x01	; 1
 43e:	f1 f7       	brne	.-4      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 440:	00 c0       	rjmp	.+0      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 442:	00 00       	nop
                _delay_ms(10);
                
                // Wait for data to be received and read the received data
                // TODO: should it only be possible to change the state to idle from here? 
                while (!(UCSR0A & (1<<RXC0)));
 444:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 448:	88 23       	and	r24, r24
                state = UDR0;
 44a:	e4 f7       	brge	.-8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 44c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
                break;
 450:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <__data_end>
                
            case ALARM:
                lcd_clrscr();
 454:	d1 cf       	rjmp	.-94     	; 0x3f8 <main+0x12>
                lcd_puts("Give password");
 456:	4a df       	rcall	.-364    	; 0x2ec <lcd_clrscr>
 458:	89 e1       	ldi	r24, 0x19	; 25
 45a:	92 e0       	ldi	r25, 0x02	; 2
 45c:	5c df       	rcall	.-328    	; 0x316 <lcd_puts>
                                
                // Wait for data to be received and read the received data
                while (!(UCSR0A & (1<<RXC0)));
 45e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 462:	88 23       	and	r24, r24
                state = UDR0;
 464:	e4 f7       	brge	.-8      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 466:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
                break;
                
            case TRIGGERED_WRONGPASSWORD:
                lcd_clrscr();
 46a:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <__data_end>
                lcd_puts("Wrong password");
 46e:	c4 cf       	rjmp	.-120    	; 0x3f8 <main+0x12>
 470:	3d df       	rcall	.-390    	; 0x2ec <lcd_clrscr>
 472:	87 e2       	ldi	r24, 0x27	; 39
                break;
 474:	92 e0       	ldi	r25, 0x02	; 2
                
            case TRIGGERED_TOOSLOW:
                lcd_clrscr();
 476:	4f df       	rcall	.-354    	; 0x316 <lcd_puts>
 478:	bf cf       	rjmp	.-130    	; 0x3f8 <main+0x12>
                lcd_puts("You did not give password on time");
 47a:	38 df       	rcall	.-400    	; 0x2ec <lcd_clrscr>
 47c:	86 e3       	ldi	r24, 0x36	; 54
 47e:	92 e0       	ldi	r25, 0x02	; 2
 480:	4a df       	rcall	.-364    	; 0x316 <lcd_puts>
                break;
 482:	ba cf       	rjmp	.-140    	; 0x3f8 <main+0x12>
                
            default:
                state = IDLE;
 484:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <__data_end>
                break;
 488:	b7 cf       	rjmp	.-146    	; 0x3f8 <main+0x12>

0000048a <_exit>:
 48a:	f8 94       	cli

0000048c <__stop_program>:
 48c:	ff cf       	rjmp	.-2      	; 0x48c <__stop_program>
